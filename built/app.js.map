{
  "version": 3,
  "file": "/Users/colbynatale/workspace/field_promotion/built/app.js",
  "sources": [
    "js/lib/require.js",
    "js/lib/jquery-1.9.1.js",
    "js/lib/angular-1.1.5.js",
    "js/controllers/AdminController.js",
    "js/controllers/GameResultsController.js",
    "js/controllers/RecordGameController.js",
    "js/controllers/controllers.js",
    "js/filters/filters.js",
    "js/services/services.js",
    "js/directives/directives.js",
    "js/app.js",
    "main.js"
  ],
  "names": [],
  "mappingsp+DA,ADq+DA;ACpl/gBA,ADm/gBA;ACl/gBA;AACA,ACFA;AACA;AACA,ACFA;AACA;AACA,ACFA;AACA;AACA,ACFA;AACA;AACA,ACFA;AACA;ACDA,ADEA;ACDA;ACDA,ADEA;ACDA;AACA,ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "\n/** vim: et:ts=4:sw=4:sts=4\n * @license RequireJS 2.1.5 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/requirejs for details\n */\n//Not using strict: uneven strict support in browsers, #392, and causes\n//problems with requirejs.exec()/transpiler plugins that may not be strict.\n/*jslint regexp: true, nomen: true, sloppy: true */\n/*global window, navigator, document, importScripts, setTimeout, opera */\n\nvar requirejs, require, define;\n(function (global) {\n    var req, s, head, baseElement, dataMain, src,\n        interactiveScript, currentlyAddingScript, mainScript, subPath,\n        version = '2.1.5',\n        commentRegExp = /(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/mg,\n        cjsRequireRegExp = /[^.]\\s*require\\s*\\(\\s*[\"']([^'\"\\s]+)[\"']\\s*\\)/g,\n        jsSuffixRegExp = /\\.js$/,\n        currDirRegExp = /^\\.\\//,\n        op = Object.prototype,\n        ostring = op.toString,\n        hasOwn = op.hasOwnProperty,\n        ap = Array.prototype,\n        apsp = ap.splice,\n        isBrowser = !!(typeof window !== 'undefined' && navigator && document),\n        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',\n    //PS3 indicates loaded and complete, but need to wait for complete\n    //specifically. Sequence is 'loading', 'loaded', execution,\n    // then 'complete'. The UA check is unfortunate, but not sure how\n    //to feature test w/o causing perf issues.\n        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?\n            /^complete$/ : /^(complete|loaded)$/,\n        defContextName = '_',\n    //Oh the tragedy, detecting opera. See the usage of isOpera for reason.\n        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',\n        contexts = {},\n        cfg = {},\n        globalDefQueue = [],\n        useInteractive = false;\n\n    function isFunction(it) {\n        return ostring.call(it) === '[object Function]';\n    }\n\n    function isArray(it) {\n        return ostring.call(it) === '[object Array]';\n    }\n\n    /**\n     * Helper function for iterating over an array. If the func returns\n     * a true value, it will break out of the loop.\n     */\n    function each(ary, func) {\n        if (ary) {\n            var i;\n            for (i = 0; i < ary.length; i += 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Helper function for iterating over an array backwards. If the func\n     * returns a true value, it will break out of the loop.\n     */\n    function eachReverse(ary, func) {\n        if (ary) {\n            var i;\n            for (i = ary.length - 1; i > -1; i -= 1) {\n                if (ary[i] && func(ary[i], i, ary)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    function getOwn(obj, prop) {\n        return hasProp(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Cycles over properties in an object and calls a function for each\n     * property value. If the function returns a truthy value, then the\n     * iteration is stopped.\n     */\n    function eachProp(obj, func) {\n        var prop;\n        for (prop in obj) {\n            if (hasProp(obj, prop)) {\n                if (func(obj[prop], prop)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Simple function to mix in properties from source into target,\n     * but only if target does not already have a property of the same name.\n     */\n    function mixin(target, source, force, deepStringMixin) {\n        if (source) {\n            eachProp(source, function (value, prop) {\n                if (force || !hasProp(target, prop)) {\n                    if (deepStringMixin && typeof value !== 'string') {\n                        if (!target[prop]) {\n                            target[prop] = {};\n                        }\n                        mixin(target[prop], value, force, deepStringMixin);\n                    } else {\n                        target[prop] = value;\n                    }\n                }\n            });\n        }\n        return target;\n    }\n\n    //Similar to Function.prototype.bind, but the 'this' object is specified\n    //first, since it is easier to read/figure out what 'this' will be.\n    function bind(obj, fn) {\n        return function () {\n            return fn.apply(obj, arguments);\n        };\n    }\n\n    function scripts() {\n        return document.getElementsByTagName('script');\n    }\n\n    //Allow getting a global that expressed in\n    //dot notation, like 'a.b.c'.\n    function getGlobal(value) {\n        if (!value) {\n            return value;\n        }\n        var g = global;\n        each(value.split('.'), function (part) {\n            g = g[part];\n        });\n        return g;\n    }\n\n    /**\n     * Constructs an error with a pointer to an URL with more information.\n     * @param {String} id the error ID that maps to an ID on a web page.\n     * @param {String} message human readable error.\n     * @param {Error} [err] the original error, if there is one.\n     *\n     * @returns {Error}\n     */\n    function makeError(id, msg, err, requireModules) {\n        var e = new Error(msg + '\\nhttp://requirejs.org/docs/errors.html#' + id);\n        e.requireType = id;\n        e.requireModules = requireModules;\n        if (err) {\n            e.originalError = err;\n        }\n        return e;\n    }\n\n    if (typeof define !== 'undefined') {\n        //If a define is already in play via another AMD loader,\n        //do not overwrite.\n        return;\n    }\n\n    if (typeof requirejs !== 'undefined') {\n        if (isFunction(requirejs)) {\n            //Do not overwrite and existing requirejs instance.\n            return;\n        }\n        cfg = requirejs;\n        requirejs = undefined;\n    }\n\n    //Allow for a require config object\n    if (typeof require !== 'undefined' && !isFunction(require)) {\n        //assume it is a config object.\n        cfg = require;\n        require = undefined;\n    }\n\n    function newContext(contextName) {\n        var inCheckLoaded, Module, context, handlers,\n            checkLoadedTimeoutId,\n            config = {\n                //Defaults. Do not set a default for map\n                //config to speed up normalize(), which\n                //will run faster if there is no default.\n                waitSeconds: 7,\n                baseUrl: './',\n                paths: {},\n                pkgs: {},\n                shim: {},\n                config: {}\n            },\n            registry = {},\n        //registry of just enabled modules, to speed\n        //cycle breaking code when lots of modules\n        //are registered, but not activated.\n            enabledRegistry = {},\n            undefEvents = {},\n            defQueue = [],\n            defined = {},\n            urlFetched = {},\n            requireCounter = 1,\n            unnormalizedCounter = 1;\n\n        /**\n         * Trims the . and .. from an array of path segments.\n         * It will keep a leading path segment if a .. will become\n         * the first path segment, to help with module name lookups,\n         * which act like paths, but can be remapped. But the end result,\n         * all paths that use this function should look normalized.\n         * NOTE: this method MODIFIES the input array.\n         * @param {Array} ary the array of path segments.\n         */\n        function trimDots(ary) {\n            var i, part;\n            for (i = 0; ary[i]; i += 1) {\n                part = ary[i];\n                if (part === '.') {\n                    ary.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\n                        //End of the line. Keep at least one non-dot\n                        //path segment at the front so it can be mapped\n                        //correctly to disk. Otherwise, there is likely\n                        //no path mapping for a path starting with '..'.\n                        //This can still fail, but catches the most reasonable\n                        //uses of ..\n                        break;\n                    } else if (i > 0) {\n                        ary.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Given a relative module name, like ./something, normalize it to\n         * a real name that can be mapped to a path.\n         * @param {String} name the relative name\n         * @param {String} baseName a real name that the name arg is relative\n         * to.\n         * @param {Boolean} applyMap apply the map config to the value. Should\n         * only be done if this normalization is for a dependency ID.\n         * @returns {String} normalized name\n         */\n        function normalize(name, baseName, applyMap) {\n            var pkgName, pkgConfig, mapValue, nameParts, i, j, nameSegment,\n                foundMap, foundI, foundStarMap, starI,\n                baseParts = baseName && baseName.split('/'),\n                normalizedBaseParts = baseParts,\n                map = config.map,\n                starMap = map && map['*'];\n\n            //Adjust any relative paths.\n            if (name && name.charAt(0) === '.') {\n                //If have a base name, try to normalize against it,\n                //otherwise, assume it is a top-level require that will\n                //be relative to baseUrl in the end.\n                if (baseName) {\n                    if (getOwn(config.pkgs, baseName)) {\n                        //If the baseName is a package name, then just treat it as one\n                        //name to concat the name with.\n                        normalizedBaseParts = baseParts = [baseName];\n                    } else {\n                        //Convert baseName to array, and lop off the last part,\n                        //so that . matches that 'directory' and not name of the baseName's\n                        //module. For instance, baseName of 'one/two/three', maps to\n                        //'one/two/three.js', but we want the directory, 'one/two' for\n                        //this normalization.\n                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                    }\n\n                    name = normalizedBaseParts.concat(name.split('/'));\n                    trimDots(name);\n\n                    //Some use of packages may use a . path to reference the\n                    //'main' module name, so normalize for that.\n                    pkgConfig = getOwn(config.pkgs, (pkgName = name[0]));\n                    name = name.join('/');\n                    if (pkgConfig && name === pkgName + '/' + pkgConfig.main) {\n                        name = pkgName;\n                    }\n                } else if (name.indexOf('./') === 0) {\n                    // No baseName, so this is ID is resolved relative\n                    // to baseUrl, pull off the leading dot.\n                    name = name.substring(2);\n                }\n            }\n\n            //Apply map config if available.\n            if (applyMap && map && (baseParts || starMap)) {\n                nameParts = name.split('/');\n\n                for (i = nameParts.length; i > 0; i -= 1) {\n                    nameSegment = nameParts.slice(0, i).join('/');\n\n                    if (baseParts) {\n                        //Find the longest baseName segment match in the config.\n                        //So, do joins on the biggest to smallest lengths of baseParts.\n                        for (j = baseParts.length; j > 0; j -= 1) {\n                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));\n\n                            //baseName segment has config, find if it has one for\n                            //this name.\n                            if (mapValue) {\n                                mapValue = getOwn(mapValue, nameSegment);\n                                if (mapValue) {\n                                    //Match, update name to the new value.\n                                    foundMap = mapValue;\n                                    foundI = i;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if (foundMap) {\n                        break;\n                    }\n\n                    //Check for a star map match, but just hold on to it,\n                    //if there is a shorter segment match later in a matching\n                    //config, then favor over this star map.\n                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {\n                        foundStarMap = getOwn(starMap, nameSegment);\n                        starI = i;\n                    }\n                }\n\n                if (!foundMap && foundStarMap) {\n                    foundMap = foundStarMap;\n                    foundI = starI;\n                }\n\n                if (foundMap) {\n                    nameParts.splice(0, foundI, foundMap);\n                    name = nameParts.join('/');\n                }\n            }\n\n            return name;\n        }\n\n        function removeScript(name) {\n            if (isBrowser) {\n                each(scripts(), function (scriptNode) {\n                    if (scriptNode.getAttribute('data-requiremodule') === name &&\n                        scriptNode.getAttribute('data-requirecontext') === context.contextName) {\n                        scriptNode.parentNode.removeChild(scriptNode);\n                        return true;\n                    }\n                });\n            }\n        }\n\n        function hasPathFallback(id) {\n            var pathConfig = getOwn(config.paths, id);\n            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {\n                removeScript(id);\n                //Pop off the first array value, since it failed, and\n                //retry\n                pathConfig.shift();\n                context.require.undef(id);\n                context.require([id]);\n                return true;\n            }\n        }\n\n        //Turns a plugin!resource to [plugin, resource]\n        //with the plugin being undefined if the name\n        //did not have a plugin prefix.\n        function splitPrefix(name) {\n            var prefix,\n                index = name ? name.indexOf('!') : -1;\n            if (index > -1) {\n                prefix = name.substring(0, index);\n                name = name.substring(index + 1, name.length);\n            }\n            return [prefix, name];\n        }\n\n        /**\n         * Creates a module mapping that includes plugin prefix, module\n         * name, and path. If parentModuleMap is provided it will\n         * also normalize the name via require.normalize()\n         *\n         * @param {String} name the module name\n         * @param {String} [parentModuleMap] parent module map\n         * for the module name, used to resolve relative names.\n         * @param {Boolean} isNormalized: is the ID already normalized.\n         * This is true if this call is done for a define() module ID.\n         * @param {Boolean} applyMap: apply the map config to the ID.\n         * Should only be true if this map is for a dependency.\n         *\n         * @returns {Object}\n         */\n        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {\n            var url, pluginModule, suffix, nameParts,\n                prefix = null,\n                parentName = parentModuleMap ? parentModuleMap.name : null,\n                originalName = name,\n                isDefine = true,\n                normalizedName = '';\n\n            //If no name, then it means it is a require call, generate an\n            //internal name.\n            if (!name) {\n                isDefine = false;\n                name = '_@r' + (requireCounter += 1);\n            }\n\n            nameParts = splitPrefix(name);\n            prefix = nameParts[0];\n            name = nameParts[1];\n\n            if (prefix) {\n                prefix = normalize(prefix, parentName, applyMap);\n                pluginModule = getOwn(defined, prefix);\n            }\n\n            //Account for relative paths if there is a base name.\n            if (name) {\n                if (prefix) {\n                    if (pluginModule && pluginModule.normalize) {\n                        //Plugin is loaded, use its normalize method.\n                        normalizedName = pluginModule.normalize(name, function (name) {\n                            return normalize(name, parentName, applyMap);\n                        });\n                    } else {\n                        normalizedName = normalize(name, parentName, applyMap);\n                    }\n                } else {\n                    //A regular module.\n                    normalizedName = normalize(name, parentName, applyMap);\n\n                    //Normalized name may be a plugin ID due to map config\n                    //application in normalize. The map config values must\n                    //already be normalized, so do not need to redo that part.\n                    nameParts = splitPrefix(normalizedName);\n                    prefix = nameParts[0];\n                    normalizedName = nameParts[1];\n                    isNormalized = true;\n\n                    url = context.nameToUrl(normalizedName);\n                }\n            }\n\n            //If the id is a plugin id that cannot be determined if it needs\n            //normalization, stamp it with a unique ID so two matching relative\n            //ids that may conflict can be separate.\n            suffix = prefix && !pluginModule && !isNormalized ?\n                '_unnormalized' + (unnormalizedCounter += 1) :\n                '';\n\n            return {\n                prefix: prefix,\n                name: normalizedName,\n                parentMap: parentModuleMap,\n                unnormalized: !!suffix,\n                url: url,\n                originalName: originalName,\n                isDefine: isDefine,\n                id: (prefix ?\n                    prefix + '!' + normalizedName :\n                    normalizedName) + suffix\n            };\n        }\n\n        function getModule(depMap) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (!mod) {\n                mod = registry[id] = new context.Module(depMap);\n            }\n\n            return mod;\n        }\n\n        function on(depMap, name, fn) {\n            var id = depMap.id,\n                mod = getOwn(registry, id);\n\n            if (hasProp(defined, id) &&\n                (!mod || mod.defineEmitComplete)) {\n                if (name === 'defined') {\n                    fn(defined[id]);\n                }\n            } else {\n                getModule(depMap).on(name, fn);\n            }\n        }\n\n        function onError(err, errback) {\n            var ids = err.requireModules,\n                notified = false;\n\n            if (errback) {\n                errback(err);\n            } else {\n                each(ids, function (id) {\n                    var mod = getOwn(registry, id);\n                    if (mod) {\n                        //Set error on module, so it skips timeout checks.\n                        mod.error = err;\n                        if (mod.events.error) {\n                            notified = true;\n                            mod.emit('error', err);\n                        }\n                    }\n                });\n\n                if (!notified) {\n                    req.onError(err);\n                }\n            }\n        }\n\n        /**\n         * Internal method to transfer globalQueue items to this context's\n         * defQueue.\n         */\n        function takeGlobalQueue() {\n            //Push all the globalDefQueue items into the context's defQueue\n            if (globalDefQueue.length) {\n                //Array splice in the values since the context code has a\n                //local var ref to defQueue, so cannot just reassign the one\n                //on context.\n                apsp.apply(defQueue,\n                    [defQueue.length - 1, 0].concat(globalDefQueue));\n                globalDefQueue = [];\n            }\n        }\n\n        handlers = {\n            'require': function (mod) {\n                if (mod.require) {\n                    return mod.require;\n                } else {\n                    return (mod.require = context.makeRequire(mod.map));\n                }\n            },\n            'exports': function (mod) {\n                mod.usingExports = true;\n                if (mod.map.isDefine) {\n                    if (mod.exports) {\n                        return mod.exports;\n                    } else {\n                        return (mod.exports = defined[mod.map.id] = {});\n                    }\n                }\n            },\n            'module': function (mod) {\n                if (mod.module) {\n                    return mod.module;\n                } else {\n                    return (mod.module = {\n                        id: mod.map.id,\n                        uri: mod.map.url,\n                        config: function () {\n                            return (config.config && getOwn(config.config, mod.map.id)) || {};\n                        },\n                        exports: defined[mod.map.id]\n                    });\n                }\n            }\n        };\n\n        function cleanRegistry(id) {\n            //Clean up machinery used for waiting modules.\n            delete registry[id];\n            delete enabledRegistry[id];\n        }\n\n        function breakCycle(mod, traced, processed) {\n            var id = mod.map.id;\n\n            if (mod.error) {\n                mod.emit('error', mod.error);\n            } else {\n                traced[id] = true;\n                each(mod.depMaps, function (depMap, i) {\n                    var depId = depMap.id,\n                        dep = getOwn(registry, depId);\n\n                    //Only force things that have not completed\n                    //being defined, so still in the registry,\n                    //and only if it has not been matched up\n                    //in the module already.\n                    if (dep && !mod.depMatched[i] && !processed[depId]) {\n                        if (getOwn(traced, depId)) {\n                            mod.defineDep(i, defined[depId]);\n                            mod.check(); //pass false?\n                        } else {\n                            breakCycle(dep, traced, processed);\n                        }\n                    }\n                });\n                processed[id] = true;\n            }\n        }\n\n        function checkLoaded() {\n            var map, modId, err, usingPathFallback,\n                waitInterval = config.waitSeconds * 1000,\n            //It is possible to disable the wait interval by using waitSeconds of 0.\n                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),\n                noLoads = [],\n                reqCalls = [],\n                stillLoading = false,\n                needCycleCheck = true;\n\n            //Do not bother if this call was a result of a cycle break.\n            if (inCheckLoaded) {\n                return;\n            }\n\n            inCheckLoaded = true;\n\n            //Figure out the state of all the modules.\n            eachProp(enabledRegistry, function (mod) {\n                map = mod.map;\n                modId = map.id;\n\n                //Skip things that are not enabled or in error state.\n                if (!mod.enabled) {\n                    return;\n                }\n\n                if (!map.isDefine) {\n                    reqCalls.push(mod);\n                }\n\n                if (!mod.error) {\n                    //If the module should be executed, and it has not\n                    //been inited and time is up, remember it.\n                    if (!mod.inited && expired) {\n                        if (hasPathFallback(modId)) {\n                            usingPathFallback = true;\n                            stillLoading = true;\n                        } else {\n                            noLoads.push(modId);\n                            removeScript(modId);\n                        }\n                    } else if (!mod.inited && mod.fetched && map.isDefine) {\n                        stillLoading = true;\n                        if (!map.prefix) {\n                            //No reason to keep looking for unfinished\n                            //loading. If the only stillLoading is a\n                            //plugin resource though, keep going,\n                            //because it may be that a plugin resource\n                            //is waiting on a non-plugin cycle.\n                            return (needCycleCheck = false);\n                        }\n                    }\n                }\n            });\n\n            if (expired && noLoads.length) {\n                //If wait time expired, throw error of unloaded modules.\n                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);\n                err.contextName = context.contextName;\n                return onError(err);\n            }\n\n            //Not expired, check for a cycle.\n            if (needCycleCheck) {\n                each(reqCalls, function (mod) {\n                    breakCycle(mod, {}, {});\n                });\n            }\n\n            //If still waiting on loads, and the waiting load is something\n            //other than a plugin resource, or there are still outstanding\n            //scripts, then just try back later.\n            if ((!expired || usingPathFallback) && stillLoading) {\n                //Something is still waiting to load. Wait for it, but only\n                //if a timeout is not already in effect.\n                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {\n                    checkLoadedTimeoutId = setTimeout(function () {\n                        checkLoadedTimeoutId = 0;\n                        checkLoaded();\n                    }, 50);\n                }\n            }\n\n            inCheckLoaded = false;\n        }\n\n        Module = function (map) {\n            this.events = getOwn(undefEvents, map.id) || {};\n            this.map = map;\n            this.shim = getOwn(config.shim, map.id);\n            this.depExports = [];\n            this.depMaps = [];\n            this.depMatched = [];\n            this.pluginMaps = {};\n            this.depCount = 0;\n\n            /* this.exports this.factory\n             this.depMaps = [],\n             this.enabled, this.fetched\n             */\n        };\n\n        Module.prototype = {\n            init: function (depMaps, factory, errback, options) {\n                options = options || {};\n\n                //Do not do more inits if already done. Can happen if there\n                //are multiple define calls for the same module. That is not\n                //a normal, common case, but it is also not unexpected.\n                if (this.inited) {\n                    return;\n                }\n\n                this.factory = factory;\n\n                if (errback) {\n                    //Register for errors on this module.\n                    this.on('error', errback);\n                } else if (this.events.error) {\n                    //If no errback already, but there are error listeners\n                    //on this module, set up an errback to pass to the deps.\n                    errback = bind(this, function (err) {\n                        this.emit('error', err);\n                    });\n                }\n\n                //Do a copy of the dependency array, so that\n                //source inputs are not modified. For example\n                //\"shim\" deps are passed in here directly, and\n                //doing a direct modification of the depMaps array\n                //would affect that config.\n                this.depMaps = depMaps && depMaps.slice(0);\n\n                this.errback = errback;\n\n                //Indicate this module has be initialized\n                this.inited = true;\n\n                this.ignore = options.ignore;\n\n                //Could have option to init this module in enabled mode,\n                //or could have been previously marked as enabled. However,\n                //the dependencies are not known until init is called. So\n                //if enabled previously, now trigger dependencies as enabled.\n                if (options.enabled || this.enabled) {\n                    //Enable this module and dependencies.\n                    //Will call this.check()\n                    this.enable();\n                } else {\n                    this.check();\n                }\n            },\n\n            defineDep: function (i, depExports) {\n                //Because of cycles, defined callback for a given\n                //export can be called more than once.\n                if (!this.depMatched[i]) {\n                    this.depMatched[i] = true;\n                    this.depCount -= 1;\n                    this.depExports[i] = depExports;\n                }\n            },\n\n            fetch: function () {\n                if (this.fetched) {\n                    return;\n                }\n                this.fetched = true;\n\n                context.startTime = (new Date()).getTime();\n\n                var map = this.map;\n\n                //If the manager is for a plugin managed resource,\n                //ask the plugin to load it now.\n                if (this.shim) {\n                    context.makeRequire(this.map, {\n                        enableBuildCallback: true\n                    })(this.shim.deps || [], bind(this, function () {\n                            return map.prefix ? this.callPlugin() : this.load();\n                        }));\n                } else {\n                    //Regular dependency.\n                    return map.prefix ? this.callPlugin() : this.load();\n                }\n            },\n\n            load: function () {\n                var url = this.map.url;\n\n                //Regular dependency.\n                if (!urlFetched[url]) {\n                    urlFetched[url] = true;\n                    context.load(this.map.id, url);\n                }\n            },\n\n            /**\n             * Checks if the module is ready to define itself, and if so,\n             * define it.\n             */\n            check: function () {\n                if (!this.enabled || this.enabling) {\n                    return;\n                }\n\n                var err, cjsModule,\n                    id = this.map.id,\n                    depExports = this.depExports,\n                    exports = this.exports,\n                    factory = this.factory;\n\n                if (!this.inited) {\n                    this.fetch();\n                } else if (this.error) {\n                    this.emit('error', this.error);\n                } else if (!this.defining) {\n                    //The factory could trigger another require call\n                    //that would result in checking this module to\n                    //define itself again. If already in the process\n                    //of doing that, skip this work.\n                    this.defining = true;\n\n                    if (this.depCount < 1 && !this.defined) {\n                        if (isFunction(factory)) {\n                            //If there is an error listener, favor passing\n                            //to that instead of throwing an error.\n                            if (this.events.error) {\n                                try {\n                                    exports = context.execCb(id, factory, depExports, exports);\n                                } catch (e) {\n                                    err = e;\n                                }\n                            } else {\n                                exports = context.execCb(id, factory, depExports, exports);\n                            }\n\n                            if (this.map.isDefine) {\n                                //If setting exports via 'module' is in play,\n                                //favor that over return value and exports. After that,\n                                //favor a non-undefined return value over exports use.\n                                cjsModule = this.module;\n                                if (cjsModule &&\n                                    cjsModule.exports !== undefined &&\n                                    //Make sure it is not already the exports value\n                                    cjsModule.exports !== this.exports) {\n                                    exports = cjsModule.exports;\n                                } else if (exports === undefined && this.usingExports) {\n                                    //exports already set the defined value.\n                                    exports = this.exports;\n                                }\n                            }\n\n                            if (err) {\n                                err.requireMap = this.map;\n                                err.requireModules = [this.map.id];\n                                err.requireType = 'define';\n                                return onError((this.error = err));\n                            }\n\n                        } else {\n                            //Just a literal value\n                            exports = factory;\n                        }\n\n                        this.exports = exports;\n\n                        if (this.map.isDefine && !this.ignore) {\n                            defined[id] = exports;\n\n                            if (req.onResourceLoad) {\n                                req.onResourceLoad(context, this.map, this.depMaps);\n                            }\n                        }\n\n                        //Clean up\n                        cleanRegistry(id);\n\n                        this.defined = true;\n                    }\n\n                    //Finished the define stage. Allow calling check again\n                    //to allow define notifications below in the case of a\n                    //cycle.\n                    this.defining = false;\n\n                    if (this.defined && !this.defineEmitted) {\n                        this.defineEmitted = true;\n                        this.emit('defined', this.exports);\n                        this.defineEmitComplete = true;\n                    }\n\n                }\n            },\n\n            callPlugin: function () {\n                var map = this.map,\n                    id = map.id,\n                //Map already normalized the prefix.\n                    pluginMap = makeModuleMap(map.prefix);\n\n                //Mark this as a dependency for this plugin, so it\n                //can be traced for cycles.\n                this.depMaps.push(pluginMap);\n\n                on(pluginMap, 'defined', bind(this, function (plugin) {\n                    var load, normalizedMap, normalizedMod,\n                        name = this.map.name,\n                        parentName = this.map.parentMap ? this.map.parentMap.name : null,\n                        localRequire = context.makeRequire(map.parentMap, {\n                            enableBuildCallback: true\n                        });\n\n                    //If current map is not normalized, wait for that\n                    //normalized name to load instead of continuing.\n                    if (this.map.unnormalized) {\n                        //Normalize the ID if the plugin allows it.\n                        if (plugin.normalize) {\n                            name = plugin.normalize(name, function (name) {\n                                return normalize(name, parentName, true);\n                            }) || '';\n                        }\n\n                        //prefix and name should already be normalized, no need\n                        //for applying map config again either.\n                        normalizedMap = makeModuleMap(map.prefix + '!' + name,\n                            this.map.parentMap);\n                        on(normalizedMap,\n                            'defined', bind(this, function (value) {\n                                this.init([], function () { return value; }, null, {\n                                    enabled: true,\n                                    ignore: true\n                                });\n                            }));\n\n                        normalizedMod = getOwn(registry, normalizedMap.id);\n                        if (normalizedMod) {\n                            //Mark this as a dependency for this plugin, so it\n                            //can be traced for cycles.\n                            this.depMaps.push(normalizedMap);\n\n                            if (this.events.error) {\n                                normalizedMod.on('error', bind(this, function (err) {\n                                    this.emit('error', err);\n                                }));\n                            }\n                            normalizedMod.enable();\n                        }\n\n                        return;\n                    }\n\n                    load = bind(this, function (value) {\n                        this.init([], function () { return value; }, null, {\n                            enabled: true\n                        });\n                    });\n\n                    load.error = bind(this, function (err) {\n                        this.inited = true;\n                        this.error = err;\n                        err.requireModules = [id];\n\n                        //Remove temp unnormalized modules for this module,\n                        //since they will never be resolved otherwise now.\n                        eachProp(registry, function (mod) {\n                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {\n                                cleanRegistry(mod.map.id);\n                            }\n                        });\n\n                        onError(err);\n                    });\n\n                    //Allow plugins to load other code without having to know the\n                    //context or how to 'complete' the load.\n                    load.fromText = bind(this, function (text, textAlt) {\n                        /*jslint evil: true */\n                        var moduleName = map.name,\n                            moduleMap = makeModuleMap(moduleName),\n                            hasInteractive = useInteractive;\n\n                        //As of 2.1.0, support just passing the text, to reinforce\n                        //fromText only being called once per resource. Still\n                        //support old style of passing moduleName but discard\n                        //that moduleName in favor of the internal ref.\n                        if (textAlt) {\n                            text = textAlt;\n                        }\n\n                        //Turn off interactive script matching for IE for any define\n                        //calls in the text, then turn it back on at the end.\n                        if (hasInteractive) {\n                            useInteractive = false;\n                        }\n\n                        //Prime the system by creating a module instance for\n                        //it.\n                        getModule(moduleMap);\n\n                        //Transfer any config to this other module.\n                        if (hasProp(config.config, id)) {\n                            config.config[moduleName] = config.config[id];\n                        }\n\n                        try {\n                            req.exec(text);\n                        } catch (e) {\n                            return onError(makeError('fromtexteval',\n                                'fromText eval for ' + id +\n                                    ' failed: ' + e,\n                                e,\n                                [id]));\n                        }\n\n                        if (hasInteractive) {\n                            useInteractive = true;\n                        }\n\n                        //Mark this as a dependency for the plugin\n                        //resource\n                        this.depMaps.push(moduleMap);\n\n                        //Support anonymous modules.\n                        context.completeLoad(moduleName);\n\n                        //Bind the value of that module to the value for this\n                        //resource ID.\n                        localRequire([moduleName], load);\n                    });\n\n                    //Use parentName here since the plugin's name is not reliable,\n                    //could be some weird string with no path that actually wants to\n                    //reference the parentName's path.\n                    plugin.load(map.name, localRequire, load, config);\n                }));\n\n                context.enable(pluginMap, this);\n                this.pluginMaps[pluginMap.id] = pluginMap;\n            },\n\n            enable: function () {\n                enabledRegistry[this.map.id] = this;\n                this.enabled = true;\n\n                //Set flag mentioning that the module is enabling,\n                //so that immediate calls to the defined callbacks\n                //for dependencies do not trigger inadvertent load\n                //with the depCount still being zero.\n                this.enabling = true;\n\n                //Enable each dependency\n                each(this.depMaps, bind(this, function (depMap, i) {\n                    var id, mod, handler;\n\n                    if (typeof depMap === 'string') {\n                        //Dependency needs to be converted to a depMap\n                        //and wired up to this module.\n                        depMap = makeModuleMap(depMap,\n                            (this.map.isDefine ? this.map : this.map.parentMap),\n                            false,\n                            !this.skipMap);\n                        this.depMaps[i] = depMap;\n\n                        handler = getOwn(handlers, depMap.id);\n\n                        if (handler) {\n                            this.depExports[i] = handler(this);\n                            return;\n                        }\n\n                        this.depCount += 1;\n\n                        on(depMap, 'defined', bind(this, function (depExports) {\n                            this.defineDep(i, depExports);\n                            this.check();\n                        }));\n\n                        if (this.errback) {\n                            on(depMap, 'error', this.errback);\n                        }\n                    }\n\n                    id = depMap.id;\n                    mod = registry[id];\n\n                    //Skip special modules like 'require', 'exports', 'module'\n                    //Also, don't call enable if it is already enabled,\n                    //important in circular dependency cases.\n                    if (!hasProp(handlers, id) && mod && !mod.enabled) {\n                        context.enable(depMap, this);\n                    }\n                }));\n\n                //Enable each plugin that is used in\n                //a dependency\n                eachProp(this.pluginMaps, bind(this, function (pluginMap) {\n                    var mod = getOwn(registry, pluginMap.id);\n                    if (mod && !mod.enabled) {\n                        context.enable(pluginMap, this);\n                    }\n                }));\n\n                this.enabling = false;\n\n                this.check();\n            },\n\n            on: function (name, cb) {\n                var cbs = this.events[name];\n                if (!cbs) {\n                    cbs = this.events[name] = [];\n                }\n                cbs.push(cb);\n            },\n\n            emit: function (name, evt) {\n                each(this.events[name], function (cb) {\n                    cb(evt);\n                });\n                if (name === 'error') {\n                    //Now that the error handler was triggered, remove\n                    //the listeners, since this broken Module instance\n                    //can stay around for a while in the registry.\n                    delete this.events[name];\n                }\n            }\n        };\n\n        function callGetModule(args) {\n            //Skip modules already defined.\n            if (!hasProp(defined, args[0])) {\n                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);\n            }\n        }\n\n        function removeListener(node, func, name, ieName) {\n            //Favor detachEvent because of IE9\n            //issue, see attachEvent/addEventListener comment elsewhere\n            //in this file.\n            if (node.detachEvent && !isOpera) {\n                //Probably IE. If not it will throw an error, which will be\n                //useful to know.\n                if (ieName) {\n                    node.detachEvent(ieName, func);\n                }\n            } else {\n                node.removeEventListener(name, func, false);\n            }\n        }\n\n        /**\n         * Given an event from a script node, get the requirejs info from it,\n         * and then removes the event listeners on the node.\n         * @param {Event} evt\n         * @returns {Object}\n         */\n        function getScriptData(evt) {\n            //Using currentTarget instead of target for Firefox 2.0's sake. Not\n            //all old browsers will be supported, but this one was easy enough\n            //to support and still makes sense.\n            var node = evt.currentTarget || evt.srcElement;\n\n            //Remove the listeners once here.\n            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');\n            removeListener(node, context.onScriptError, 'error');\n\n            return {\n                node: node,\n                id: node && node.getAttribute('data-requiremodule')\n            };\n        }\n\n        function intakeDefines() {\n            var args;\n\n            //Any defined modules in the global queue, intake them now.\n            takeGlobalQueue();\n\n            //Make sure any remaining defQueue items get properly processed.\n            while (defQueue.length) {\n                args = defQueue.shift();\n                if (args[0] === null) {\n                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));\n                } else {\n                    //args are id, deps, factory. Should be normalized by the\n                    //define() function.\n                    callGetModule(args);\n                }\n            }\n        }\n\n        context = {\n            config: config,\n            contextName: contextName,\n            registry: registry,\n            defined: defined,\n            urlFetched: urlFetched,\n            defQueue: defQueue,\n            Module: Module,\n            makeModuleMap: makeModuleMap,\n            nextTick: req.nextTick,\n            onError: onError,\n\n            /**\n             * Set a configuration for the context.\n             * @param {Object} cfg config object to integrate.\n             */\n            configure: function (cfg) {\n                //Make sure the baseUrl ends in a slash.\n                if (cfg.baseUrl) {\n                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {\n                        cfg.baseUrl += '/';\n                    }\n                }\n\n                //Save off the paths and packages since they require special processing,\n                //they are additive.\n                var pkgs = config.pkgs,\n                    shim = config.shim,\n                    objs = {\n                        paths: true,\n                        config: true,\n                        map: true\n                    };\n\n                eachProp(cfg, function (value, prop) {\n                    if (objs[prop]) {\n                        if (prop === 'map') {\n                            if (!config.map) {\n                                config.map = {};\n                            }\n                            mixin(config[prop], value, true, true);\n                        } else {\n                            mixin(config[prop], value, true);\n                        }\n                    } else {\n                        config[prop] = value;\n                    }\n                });\n\n                //Merge shim\n                if (cfg.shim) {\n                    eachProp(cfg.shim, function (value, id) {\n                        //Normalize the structure\n                        if (isArray(value)) {\n                            value = {\n                                deps: value\n                            };\n                        }\n                        if ((value.exports || value.init) && !value.exportsFn) {\n                            value.exportsFn = context.makeShimExports(value);\n                        }\n                        shim[id] = value;\n                    });\n                    config.shim = shim;\n                }\n\n                //Adjust packages if necessary.\n                if (cfg.packages) {\n                    each(cfg.packages, function (pkgObj) {\n                        var location;\n\n                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;\n                        location = pkgObj.location;\n\n                        //Create a brand new object on pkgs, since currentPackages can\n                        //be passed in again, and config.pkgs is the internal transformed\n                        //state for all package configs.\n                        pkgs[pkgObj.name] = {\n                            name: pkgObj.name,\n                            location: location || pkgObj.name,\n                            //Remove leading dot in main, so main paths are normalized,\n                            //and remove any trailing .js, since different package\n                            //envs have different conventions: some use a module name,\n                            //some use a file name.\n                            main: (pkgObj.main || 'main')\n                                      .replace(currDirRegExp, '')\n                                      .replace(jsSuffixRegExp, '')\n                        };\n                    });\n\n                    //Done with modifications, assing packages back to context config\n                    config.pkgs = pkgs;\n                }\n\n                //If there are any \"waiting to execute\" modules in the registry,\n                //update the maps for them, since their info, like URLs to load,\n                //may have changed.\n                eachProp(registry, function (mod, id) {\n                    //If module already has init called, since it is too\n                    //late to modify them, and ignore unnormalized ones\n                    //since they are transient.\n                    if (!mod.inited && !mod.map.unnormalized) {\n                        mod.map = makeModuleMap(id);\n                    }\n                });\n\n                //If a deps array or a config callback is specified, then call\n                //require with those args. This is useful when require is defined as a\n                //config object before require.js is loaded.\n                if (cfg.deps || cfg.callback) {\n                    context.require(cfg.deps || [], cfg.callback);\n                }\n            },\n\n            makeShimExports: function (value) {\n                function fn() {\n                    var ret;\n                    if (value.init) {\n                        ret = value.init.apply(global, arguments);\n                    }\n                    return ret || (value.exports && getGlobal(value.exports));\n                }\n                return fn;\n            },\n\n            makeRequire: function (relMap, options) {\n                options = options || {};\n\n                function localRequire(deps, callback, errback) {\n                    var id, map, requireMod;\n\n                    if (options.enableBuildCallback && callback && isFunction(callback)) {\n                        callback.__requireJsBuild = true;\n                    }\n\n                    if (typeof deps === 'string') {\n                        if (isFunction(callback)) {\n                            //Invalid call\n                            return onError(makeError('requireargs', 'Invalid require call'), errback);\n                        }\n\n                        //If require|exports|module are requested, get the\n                        //value for them from the special handlers. Caveat:\n                        //this only works while module is being defined.\n                        if (relMap && hasProp(handlers, deps)) {\n                            return handlers[deps](registry[relMap.id]);\n                        }\n\n                        //Synchronous access to one module. If require.get is\n                        //available (as in the Node adapter), prefer that.\n                        if (req.get) {\n                            return req.get(context, deps, relMap, localRequire);\n                        }\n\n                        //Normalize module name, if it contains . or ..\n                        map = makeModuleMap(deps, relMap, false, true);\n                        id = map.id;\n\n                        if (!hasProp(defined, id)) {\n                            return onError(makeError('notloaded', 'Module name \"' +\n                                id +\n                                '\" has not been loaded yet for context: ' +\n                                contextName +\n                                (relMap ? '' : '. Use require([])')));\n                        }\n                        return defined[id];\n                    }\n\n                    //Grab defines waiting in the global queue.\n                    intakeDefines();\n\n                    //Mark all the dependencies as needing to be loaded.\n                    context.nextTick(function () {\n                        //Some defines could have been added since the\n                        //require call, collect them.\n                        intakeDefines();\n\n                        requireMod = getModule(makeModuleMap(null, relMap));\n\n                        //Store if map config should be applied to this require\n                        //call for dependencies.\n                        requireMod.skipMap = options.skipMap;\n\n                        requireMod.init(deps, callback, errback, {\n                            enabled: true\n                        });\n\n                        checkLoaded();\n                    });\n\n                    return localRequire;\n                }\n\n                mixin(localRequire, {\n                    isBrowser: isBrowser,\n\n                    /**\n                     * Converts a module name + .extension into an URL path.\n                     * *Requires* the use of a module name. It does not support using\n                     * plain URLs like nameToUrl.\n                     */\n                    toUrl: function (moduleNamePlusExt) {\n                        var ext,\n                            index = moduleNamePlusExt.lastIndexOf('.'),\n                            segment = moduleNamePlusExt.split('/')[0],\n                            isRelative = segment === '.' || segment === '..';\n\n                        //Have a file extension alias, and it is not the\n                        //dots from a relative path.\n                        if (index !== -1 && (!isRelative || index > 1)) {\n                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);\n                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);\n                        }\n\n                        return context.nameToUrl(normalize(moduleNamePlusExt,\n                            relMap && relMap.id, true), ext,  true);\n                    },\n\n                    defined: function (id) {\n                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);\n                    },\n\n                    specified: function (id) {\n                        id = makeModuleMap(id, relMap, false, true).id;\n                        return hasProp(defined, id) || hasProp(registry, id);\n                    }\n                });\n\n                //Only allow undef on top level require calls\n                if (!relMap) {\n                    localRequire.undef = function (id) {\n                        //Bind any waiting define() calls to this context,\n                        //fix for #408\n                        takeGlobalQueue();\n\n                        var map = makeModuleMap(id, relMap, true),\n                            mod = getOwn(registry, id);\n\n                        delete defined[id];\n                        delete urlFetched[map.url];\n                        delete undefEvents[id];\n\n                        if (mod) {\n                            //Hold on to listeners in case the\n                            //module will be attempted to be reloaded\n                            //using a different config.\n                            if (mod.events.defined) {\n                                undefEvents[id] = mod.events;\n                            }\n\n                            cleanRegistry(id);\n                        }\n                    };\n                }\n\n                return localRequire;\n            },\n\n            /**\n             * Called to enable a module if it is still in the registry\n             * awaiting enablement. A second arg, parent, the parent module,\n             * is passed in for context, when this method is overriden by\n             * the optimizer. Not shown here to keep code compact.\n             */\n            enable: function (depMap) {\n                var mod = getOwn(registry, depMap.id);\n                if (mod) {\n                    getModule(depMap).enable();\n                }\n            },\n\n            /**\n             * Internal method used by environment adapters to complete a load event.\n             * A load event could be a script load or just a load pass from a synchronous\n             * load call.\n             * @param {String} moduleName the name of the module to potentially complete.\n             */\n            completeLoad: function (moduleName) {\n                var found, args, mod,\n                    shim = getOwn(config.shim, moduleName) || {},\n                    shExports = shim.exports;\n\n                takeGlobalQueue();\n\n                while (defQueue.length) {\n                    args = defQueue.shift();\n                    if (args[0] === null) {\n                        args[0] = moduleName;\n                        //If already found an anonymous module and bound it\n                        //to this name, then this is some other anon module\n                        //waiting for its completeLoad to fire.\n                        if (found) {\n                            break;\n                        }\n                        found = true;\n                    } else if (args[0] === moduleName) {\n                        //Found matching define call for this script!\n                        found = true;\n                    }\n\n                    callGetModule(args);\n                }\n\n                //Do this after the cycle of callGetModule in case the result\n                //of those calls/init calls changes the registry.\n                mod = getOwn(registry, moduleName);\n\n                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {\n                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {\n                        if (hasPathFallback(moduleName)) {\n                            return;\n                        } else {\n                            return onError(makeError('nodefine',\n                                'No define call for ' + moduleName,\n                                null,\n                                [moduleName]));\n                        }\n                    } else {\n                        //A script that does not call define(), so just simulate\n                        //the call for it.\n                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);\n                    }\n                }\n\n                checkLoaded();\n            },\n\n            /**\n             * Converts a module name to a file path. Supports cases where\n             * moduleName may actually be just an URL.\n             * Note that it **does not** call normalize on the moduleName,\n             * it is assumed to have already been normalized. This is an\n             * internal API, not a public one. Use toUrl for the public API.\n             */\n            nameToUrl: function (moduleName, ext, skipExt) {\n                var paths, pkgs, pkg, pkgPath, syms, i, parentModule, url,\n                    parentPath;\n\n                //If a colon is in the URL, it indicates a protocol is used and it is just\n                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)\n                //or ends with .js, then assume the user meant to use an url and not a module id.\n                //The slash is important for protocol-less URLs as well as full paths.\n                if (req.jsExtRegExp.test(moduleName)) {\n                    //Just a plain path, not module name lookup, so just return it.\n                    //Add extension if it is included. This is a bit wonky, only non-.js things pass\n                    //an extension, this method probably needs to be reworked.\n                    url = moduleName + (ext || '');\n                } else {\n                    //A module that needs to be converted to a path.\n                    paths = config.paths;\n                    pkgs = config.pkgs;\n\n                    syms = moduleName.split('/');\n                    //For each module name segment, see if there is a path\n                    //registered for it. Start with most specific name\n                    //and work up from it.\n                    for (i = syms.length; i > 0; i -= 1) {\n                        parentModule = syms.slice(0, i).join('/');\n                        pkg = getOwn(pkgs, parentModule);\n                        parentPath = getOwn(paths, parentModule);\n                        if (parentPath) {\n                            //If an array, it means there are a few choices,\n                            //Choose the one that is desired\n                            if (isArray(parentPath)) {\n                                parentPath = parentPath[0];\n                            }\n                            syms.splice(0, i, parentPath);\n                            break;\n                        } else if (pkg) {\n                            //If module name is just the package name, then looking\n                            //for the main module.\n                            if (moduleName === pkg.name) {\n                                pkgPath = pkg.location + '/' + pkg.main;\n                            } else {\n                                pkgPath = pkg.location;\n                            }\n                            syms.splice(0, i, pkgPath);\n                            break;\n                        }\n                    }\n\n                    //Join the path parts together, then figure out if baseUrl is needed.\n                    url = syms.join('/');\n                    url += (ext || (/\\?/.test(url) || skipExt ? '' : '.js'));\n                    url = (url.charAt(0) === '/' || url.match(/^[\\w\\+\\.\\-]+:/) ? '' : config.baseUrl) + url;\n                }\n\n                return config.urlArgs ? url +\n                    ((url.indexOf('?') === -1 ? '?' : '&') +\n                        config.urlArgs) : url;\n            },\n\n            //Delegates to req.load. Broken out as a separate function to\n            //allow overriding in the optimizer.\n            load: function (id, url) {\n                req.load(context, id, url);\n            },\n\n            /**\n             * Executes a module callack function. Broken out as a separate function\n             * solely to allow the build system to sequence the files in the built\n             * layer in the right sequence.\n             *\n             * @private\n             */\n            execCb: function (name, callback, args, exports) {\n                return callback.apply(exports, args);\n            },\n\n            /**\n             * callback for script loads, used to check status of loading.\n             *\n             * @param {Event} evt the event from the browser for the script\n             * that was loaded.\n             */\n            onScriptLoad: function (evt) {\n                //Using currentTarget instead of target for Firefox 2.0's sake. Not\n                //all old browsers will be supported, but this one was easy enough\n                //to support and still makes sense.\n                if (evt.type === 'load' ||\n                    (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {\n                    //Reset interactive script so a script node is not held onto for\n                    //to long.\n                    interactiveScript = null;\n\n                    //Pull out the name of the module and the context.\n                    var data = getScriptData(evt);\n                    context.completeLoad(data.id);\n                }\n            },\n\n            /**\n             * Callback for script errors.\n             */\n            onScriptError: function (evt) {\n                var data = getScriptData(evt);\n                if (!hasPathFallback(data.id)) {\n                    return onError(makeError('scripterror', 'Script error', evt, [data.id]));\n                }\n            }\n        };\n\n        context.require = context.makeRequire();\n        return context;\n    }\n\n    /**\n     * Main entry point.\n     *\n     * If the only argument to require is a string, then the module that\n     * is represented by that string is fetched for the appropriate context.\n     *\n     * If the first argument is an array, then it will be treated as an array\n     * of dependency string names to fetch. An optional function callback can\n     * be specified to execute when all of those dependencies are available.\n     *\n     * Make a local req variable to help Caja compliance (it assumes things\n     * on a require that are not standardized), and to give a short\n     * name for minification/local scope use.\n     */\n    req = requirejs = function (deps, callback, errback, optional) {\n\n        //Find the right context, use default\n        var context, config,\n            contextName = defContextName;\n\n        // Determine if have config object in the call.\n        if (!isArray(deps) && typeof deps !== 'string') {\n            // deps is a config object\n            config = deps;\n            if (isArray(callback)) {\n                // Adjust args if there are dependencies\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n        if (!context) {\n            context = contexts[contextName] = req.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Support require.config() to make it easier to cooperate with other\n     * AMD loaders on globally agreed names.\n     */\n    req.config = function (config) {\n        return req(config);\n    };\n\n    /**\n     * Execute something after the current tick\n     * of the event loop. Override for other envs\n     * that have a better solution than setTimeout.\n     * @param  {Function} fn function to execute later.\n     */\n    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {\n        setTimeout(fn, 4);\n    } : function (fn) { fn(); };\n\n    /**\n     * Export require as a global, but only if it does not already exist.\n     */\n    if (!require) {\n        require = req;\n    }\n\n    req.version = version;\n\n    //Used to filter out dependencies that are already paths.\n    req.jsExtRegExp = /^\\/|:|\\?|\\.js$/;\n    req.isBrowser = isBrowser;\n    s = req.s = {\n        contexts: contexts,\n        newContext: newContext\n    };\n\n    //Create default context.\n    req({});\n\n    //Exports some context-sensitive methods on global require.\n    each([\n        'toUrl',\n        'undef',\n        'defined',\n        'specified'\n    ], function (prop) {\n        //Reference from contexts instead of early binding to default context,\n        //so that during builds, the latest instance of the default context\n        //with its config gets used.\n        req[prop] = function () {\n            var ctx = contexts[defContextName];\n            return ctx.require[prop].apply(ctx, arguments);\n        };\n    });\n\n    if (isBrowser) {\n        head = s.head = document.getElementsByTagName('head')[0];\n        //If BASE tag is in play, using appendChild is a problem for IE6.\n        //When that browser dies, this can be removed. Details in this jQuery bug:\n        //http://dev.jquery.com/ticket/2709\n        baseElement = document.getElementsByTagName('base')[0];\n        if (baseElement) {\n            head = s.head = baseElement.parentNode;\n        }\n    }\n\n    /**\n     * Any errors that require explicitly generates will be passed to this\n     * function. Intercept/override it if you want custom error handling.\n     * @param {Error} err the error object.\n     */\n    req.onError = function (err) {\n        throw err;\n    };\n\n    /**\n     * Does the request to load a module for the browser case.\n     * Make this a separate function to allow other environments\n     * to override it.\n     *\n     * @param {Object} context the require context to find state.\n     * @param {String} moduleName the name of the module.\n     * @param {Object} url the URL to the module.\n     */\n    req.load = function (context, moduleName, url) {\n        var config = (context && context.config) || {},\n            node;\n        if (isBrowser) {\n            //In the browser so use a script tag\n            node = config.xhtml ?\n                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :\n                document.createElement('script');\n            node.type = config.scriptType || 'text/javascript';\n            node.charset = 'utf-8';\n            node.async = true;\n\n            node.setAttribute('data-requirecontext', context.contextName);\n            node.setAttribute('data-requiremodule', moduleName);\n\n            //Set up load listener. Test attachEvent first because IE9 has\n            //a subtle issue in its addEventListener and script onload firings\n            //that do not match the behavior of all other browsers with\n            //addEventListener support, which fire the onload event for a\n            //script right after the script execution. See:\n            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution\n            //UNFORTUNATELY Opera implements attachEvent but does not follow the script\n            //script execution mode.\n            if (node.attachEvent &&\n                //Check if node.attachEvent is artificially added by custom script or\n                //natively supported by browser\n                //read https://github.com/jrburke/requirejs/issues/187\n                //if we can NOT find [native code] then it must NOT natively supported.\n                //in IE8, node.attachEvent does not have toString()\n                //Note the test for \"[native code\" with no closing brace, see:\n                //https://github.com/jrburke/requirejs/issues/273\n                !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&\n                !isOpera) {\n                //Probably IE. IE (at least 6-8) do not fire\n                //script onload right after executing the script, so\n                //we cannot tie the anonymous define call to a name.\n                //However, IE reports the script as being in 'interactive'\n                //readyState at the time of the define call.\n                useInteractive = true;\n\n                node.attachEvent('onreadystatechange', context.onScriptLoad);\n                //It would be great to add an error handler here to catch\n                //404s in IE9+. However, onreadystatechange will fire before\n                //the error handler, so that does not help. If addEventListener\n                //is used, then IE will fire error before load, but we cannot\n                //use that pathway given the connect.microsoft.com issue\n                //mentioned above about not doing the 'script execute,\n                //then fire the script load event listener before execute\n                //next script' that other browsers do.\n                //Best hope: IE10 fixes the issues,\n                //and then destroys all installs of IE 6-9.\n                //node.attachEvent('onerror', context.onScriptError);\n            } else {\n                node.addEventListener('load', context.onScriptLoad, false);\n                node.addEventListener('error', context.onScriptError, false);\n            }\n            node.src = url;\n\n            //For some cache cases in IE 6-8, the script executes before the end\n            //of the appendChild execution, so to tie an anonymous define\n            //call to the module name (which is stored on the node), hold on\n            //to a reference to this node, but clear after the DOM insertion.\n            currentlyAddingScript = node;\n            if (baseElement) {\n                head.insertBefore(node, baseElement);\n            } else {\n                head.appendChild(node);\n            }\n            currentlyAddingScript = null;\n\n            return node;\n        } else if (isWebWorker) {\n            try {\n                //In a web worker, use importScripts. This is not a very\n                //efficient use of importScripts, importScripts will block until\n                //its script is downloaded and evaluated. However, if web workers\n                //are in play, the expectation that a build has been done so that\n                //only one script needs to be loaded anyway. This may need to be\n                //reevaluated if other use cases become common.\n                importScripts(url);\n\n                //Account for anonymous modules\n                context.completeLoad(moduleName);\n            } catch (e) {\n                context.onError(makeError('importscripts',\n                    'importScripts failed for ' +\n                        moduleName + ' at ' + url,\n                    e,\n                    [moduleName]));\n            }\n        }\n    };\n\n    function getInteractiveScript() {\n        if (interactiveScript && interactiveScript.readyState === 'interactive') {\n            return interactiveScript;\n        }\n\n        eachReverse(scripts(), function (script) {\n            if (script.readyState === 'interactive') {\n                return (interactiveScript = script);\n            }\n        });\n        return interactiveScript;\n    }\n\n    //Look for a data-main script attribute, which could also adjust the baseUrl.\n    if (isBrowser) {\n        //Figure out baseUrl. Get it from the script tag with require.js in it.\n        eachReverse(scripts(), function (script) {\n            //Set the 'head' where we can append children by\n            //using the script's parent.\n            if (!head) {\n                head = script.parentNode;\n            }\n\n            //Look for a data-main attribute to set main script for the page\n            //to load. If it is there, the path to data main becomes the\n            //baseUrl, if it is not already set.\n            dataMain = script.getAttribute('data-main');\n            if (dataMain) {\n                //Set final baseUrl if there is not already an explicit one.\n                if (!cfg.baseUrl) {\n                    //Pull off the directory of data-main for use as the\n                    //baseUrl.\n                    src = dataMain.split('/');\n                    mainScript = src.pop();\n                    subPath = src.length ? src.join('/')  + '/' : './';\n\n                    cfg.baseUrl = subPath;\n                    dataMain = mainScript;\n                }\n\n                //Strip off any trailing .js since dataMain is now\n                //like a module name.\n                dataMain = dataMain.replace(jsSuffixRegExp, '');\n\n                //Put the data-main script in the files to load.\n                cfg.deps = cfg.deps ? cfg.deps.concat(dataMain) : [dataMain];\n\n                return true;\n            }\n        });\n    }\n\n    /**\n     * The function that handles definitions of modules. Differs from\n     * require() in that a string for the module should be the first argument,\n     * and the function to execute after dependencies are loaded should\n     * return a value to define the module corresponding to the first argument's\n     * name.\n     */\n    define = function (name, deps, callback) {\n        var node, context;\n\n        //Allow for anonymous modules\n        if (typeof name !== 'string') {\n            //Adjust args appropriately\n            callback = deps;\n            deps = name;\n            name = null;\n        }\n\n        //This module may not have dependencies\n        if (!isArray(deps)) {\n            callback = deps;\n            deps = [];\n        }\n\n        //If no name, and callback is a function, then figure out if it a\n        //CommonJS thing with dependencies.\n        if (!deps.length && isFunction(callback)) {\n            //Remove comments from the callback string,\n            //look for require calls, and pull them into the dependencies,\n            //but only if there are function args.\n            if (callback.length) {\n                callback\n                    .toString()\n                    .replace(commentRegExp, '')\n                    .replace(cjsRequireRegExp, function (match, dep) {\n                        deps.push(dep);\n                    });\n\n                //May be a CommonJS thing even without require calls, but still\n                //could use exports, and module. Avoid doing exports and module\n                //work though if it just needs require.\n                //REQUIRES the function to expect the CommonJS variables in the\n                //order listed below.\n                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);\n            }\n        }\n\n        //If in IE 6-8 and hit an anonymous define() call, do the interactive\n        //work.\n        if (useInteractive) {\n            node = currentlyAddingScript || getInteractiveScript();\n            if (node) {\n                if (!name) {\n                    name = node.getAttribute('data-requiremodule');\n                }\n                context = contexts[node.getAttribute('data-requirecontext')];\n            }\n        }\n\n        //Always save off evaluating the def call until the script onload handler.\n        //This allows multiple modules to be in a file without prematurely\n        //tracing dependencies, and allows for anonymous module support,\n        //where the module name is not known until the script onload event\n        //occurs. If no context, use the global queue, and get it processed\n        //in the onscript load callback.\n        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n\n\n    /**\n     * Executes the text. Normally just uses eval, but can be modified\n     * to use a better, environment-specific call. Only used for transpiling\n     * loader plugins, not for plain JS modules.\n     * @param {String} text the text to execute/evaluate.\n     */\n    req.exec = function (text) {\n        /*jslint evil: true */\n        return eval(text);\n    };\n\n    //Set up with config info.\n    req(cfg);\n}(this));\ndefine(\"requireLib\", function(){});\n",
    "\n/*!\n * jQuery JavaScript Library v1.9.1\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2013-2-4\n */\n(function( window, undefined ) {\n\n// Can't do this because several apps including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n// Support: Firefox 18+\n//\"use strict\";\n    var\n    // The deferred used on DOM ready\n        readyList,\n\n    // A central reference to the root jQuery(document)\n        rootjQuery,\n\n    // Support: IE<9\n    // For `typeof node.method` instead of `node.method !== undefined`\n        core_strundefined = typeof undefined,\n\n    // Use the correct document accordingly with window argument (sandbox)\n        document = window.document,\n        location = window.location,\n\n    // Map over jQuery in case of overwrite\n        _jQuery = window.jQuery,\n\n    // Map over the $ in case of overwrite\n        _$ = window.$,\n\n    // [[Class]] -> type pairs\n        class2type = {},\n\n    // List of deleted data cache ids, so we can reuse them\n        core_deletedIds = [],\n\n        core_version = \"1.9.1\",\n\n    // Save a reference to some core methods\n        core_concat = core_deletedIds.concat,\n        core_push = core_deletedIds.push,\n        core_slice = core_deletedIds.slice,\n        core_indexOf = core_deletedIds.indexOf,\n        core_toString = class2type.toString,\n        core_hasOwn = class2type.hasOwnProperty,\n        core_trim = core_version.trim,\n\n    // Define a local copy of jQuery\n        jQuery = function( selector, context ) {\n            // The jQuery object is actually just the init constructor 'enhanced'\n            return new jQuery.fn.init( selector, context, rootjQuery );\n        },\n\n    // Used for matching numbers\n        core_pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,\n\n    // Used for splitting on whitespace\n        core_rnotwhite = /\\S+/g,\n\n    // Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)\n        rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n    // A simple way to check for HTML strings\n    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n    // Strict HTML recognition (#11290: must start with <)\n        rquickExpr = /^(?:(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n    // Match a standalone tag\n        rsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\n\n    // JSON RegExp\n        rvalidchars = /^[\\],:{}\\s]*$/,\n        rvalidbraces = /(?:^|:|,)(?:\\s*\\[)+/g,\n        rvalidescape = /\\\\(?:[\"\\\\\\/bfnrt]|u[\\da-fA-F]{4})/g,\n        rvalidtokens = /\"[^\"\\\\\\r\\n]*\"|true|false|null|-?(?:\\d+\\.|)\\d+(?:[eE][+-]?\\d+|)/g,\n\n    // Matches dashed string for camelizing\n        rmsPrefix = /^-ms-/,\n        rdashAlpha = /-([\\da-z])/gi,\n\n    // Used by jQuery.camelCase as callback to replace()\n        fcamelCase = function( all, letter ) {\n            return letter.toUpperCase();\n        },\n\n    // The ready event handler\n        completed = function( event ) {\n\n            // readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n            if ( document.addEventListener || event.type === \"load\" || document.readyState === \"complete\" ) {\n                detach();\n                jQuery.ready();\n            }\n        },\n    // Clean-up method for dom ready events\n        detach = function() {\n            if ( document.addEventListener ) {\n                document.removeEventListener( \"DOMContentLoaded\", completed, false );\n                window.removeEventListener( \"load\", completed, false );\n\n            } else {\n                document.detachEvent( \"onreadystatechange\", completed );\n                window.detachEvent( \"onload\", completed );\n            }\n        };\n\n    jQuery.fn = jQuery.prototype = {\n        // The current version of jQuery being used\n        jquery: core_version,\n\n        constructor: jQuery,\n        init: function( selector, context, rootjQuery ) {\n            var match, elem;\n\n            // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n            if ( !selector ) {\n                return this;\n            }\n\n            // Handle HTML strings\n            if ( typeof selector === \"string\" ) {\n                if ( selector.charAt(0) === \"<\" && selector.charAt( selector.length - 1 ) === \">\" && selector.length >= 3 ) {\n                    // Assume that strings that start and end with <> are HTML and skip the regex check\n                    match = [ null, selector, null ];\n\n                } else {\n                    match = rquickExpr.exec( selector );\n                }\n\n                // Match html or make sure no context is specified for #id\n                if ( match && (match[1] || !context) ) {\n\n                    // HANDLE: $(html) -> $(array)\n                    if ( match[1] ) {\n                        context = context instanceof jQuery ? context[0] : context;\n\n                        // scripts is true for back-compat\n                        jQuery.merge( this, jQuery.parseHTML(\n                            match[1],\n                            context && context.nodeType ? context.ownerDocument || context : document,\n                            true\n                        ) );\n\n                        // HANDLE: $(html, props)\n                        if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {\n                            for ( match in context ) {\n                                // Properties of context are called as methods if possible\n                                if ( jQuery.isFunction( this[ match ] ) ) {\n                                    this[ match ]( context[ match ] );\n\n                                    // ...and otherwise set as attributes\n                                } else {\n                                    this.attr( match, context[ match ] );\n                                }\n                            }\n                        }\n\n                        return this;\n\n                        // HANDLE: $(#id)\n                    } else {\n                        elem = document.getElementById( match[2] );\n\n                        // Check parentNode to catch when Blackberry 4.6 returns\n                        // nodes that are no longer in the document #6963\n                        if ( elem && elem.parentNode ) {\n                            // Handle the case where IE and Opera return items\n                            // by name instead of ID\n                            if ( elem.id !== match[2] ) {\n                                return rootjQuery.find( selector );\n                            }\n\n                            // Otherwise, we inject the element directly into the jQuery object\n                            this.length = 1;\n                            this[0] = elem;\n                        }\n\n                        this.context = document;\n                        this.selector = selector;\n                        return this;\n                    }\n\n                    // HANDLE: $(expr, $(...))\n                } else if ( !context || context.jquery ) {\n                    return ( context || rootjQuery ).find( selector );\n\n                    // HANDLE: $(expr, context)\n                    // (which is just equivalent to: $(context).find(expr)\n                } else {\n                    return this.constructor( context ).find( selector );\n                }\n\n                // HANDLE: $(DOMElement)\n            } else if ( selector.nodeType ) {\n                this.context = this[0] = selector;\n                this.length = 1;\n                return this;\n\n                // HANDLE: $(function)\n                // Shortcut for document ready\n            } else if ( jQuery.isFunction( selector ) ) {\n                return rootjQuery.ready( selector );\n            }\n\n            if ( selector.selector !== undefined ) {\n                this.selector = selector.selector;\n                this.context = selector.context;\n            }\n\n            return jQuery.makeArray( selector, this );\n        },\n\n        // Start with an empty selector\n        selector: \"\",\n\n        // The default length of a jQuery object is 0\n        length: 0,\n\n        // The number of elements contained in the matched element set\n        size: function() {\n            return this.length;\n        },\n\n        toArray: function() {\n            return core_slice.call( this );\n        },\n\n        // Get the Nth element in the matched element set OR\n        // Get the whole matched element set as a clean array\n        get: function( num ) {\n            return num == null ?\n\n                // Return a 'clean' array\n                this.toArray() :\n\n                // Return just the object\n                ( num < 0 ? this[ this.length + num ] : this[ num ] );\n        },\n\n        // Take an array of elements and push it onto the stack\n        // (returning the new matched element set)\n        pushStack: function( elems ) {\n\n            // Build a new jQuery matched element set\n            var ret = jQuery.merge( this.constructor(), elems );\n\n            // Add the old object onto the stack (as a reference)\n            ret.prevObject = this;\n            ret.context = this.context;\n\n            // Return the newly-formed element set\n            return ret;\n        },\n\n        // Execute a callback for every element in the matched set.\n        // (You can seed the arguments with an array of args, but this is\n        // only used internally.)\n        each: function( callback, args ) {\n            return jQuery.each( this, callback, args );\n        },\n\n        ready: function( fn ) {\n            // Add the callback\n            jQuery.ready.promise().done( fn );\n\n            return this;\n        },\n\n        slice: function() {\n            return this.pushStack( core_slice.apply( this, arguments ) );\n        },\n\n        first: function() {\n            return this.eq( 0 );\n        },\n\n        last: function() {\n            return this.eq( -1 );\n        },\n\n        eq: function( i ) {\n            var len = this.length,\n                j = +i + ( i < 0 ? len : 0 );\n            return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );\n        },\n\n        map: function( callback ) {\n            return this.pushStack( jQuery.map(this, function( elem, i ) {\n                return callback.call( elem, i, elem );\n            }));\n        },\n\n        end: function() {\n            return this.prevObject || this.constructor(null);\n        },\n\n        // For internal use only.\n        // Behaves like an Array's method, not like a jQuery method.\n        push: core_push,\n        sort: [].sort,\n        splice: [].splice\n    };\n\n// Give the init function the jQuery prototype for later instantiation\n    jQuery.fn.init.prototype = jQuery.fn;\n\n    jQuery.extend = jQuery.fn.extend = function() {\n        var src, copyIsArray, copy, name, options, clone,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length,\n            deep = false;\n\n        // Handle a deep copy situation\n        if ( typeof target === \"boolean\" ) {\n            deep = target;\n            target = arguments[1] || {};\n            // skip the boolean and the target\n            i = 2;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if ( typeof target !== \"object\" && !jQuery.isFunction(target) ) {\n            target = {};\n        }\n\n        // extend jQuery itself if only one argument is passed\n        if ( length === i ) {\n            target = this;\n            --i;\n        }\n\n        for ( ; i < length; i++ ) {\n            // Only deal with non-null/undefined values\n            if ( (options = arguments[ i ]) != null ) {\n                // Extend the base object\n                for ( name in options ) {\n                    src = target[ name ];\n                    copy = options[ name ];\n\n                    // Prevent never-ending loop\n                    if ( target === copy ) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {\n                        if ( copyIsArray ) {\n                            copyIsArray = false;\n                            clone = src && jQuery.isArray(src) ? src : [];\n\n                        } else {\n                            clone = src && jQuery.isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[ name ] = jQuery.extend( deep, clone, copy );\n\n                        // Don't bring in undefined values\n                    } else if ( copy !== undefined ) {\n                        target[ name ] = copy;\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n    };\n\n    jQuery.extend({\n        noConflict: function( deep ) {\n            if ( window.$ === jQuery ) {\n                window.$ = _$;\n            }\n\n            if ( deep && window.jQuery === jQuery ) {\n                window.jQuery = _jQuery;\n            }\n\n            return jQuery;\n        },\n\n        // Is the DOM ready to be used? Set to true once it occurs.\n        isReady: false,\n\n        // A counter to track how many items to wait for before\n        // the ready event fires. See #6781\n        readyWait: 1,\n\n        // Hold (or release) the ready event\n        holdReady: function( hold ) {\n            if ( hold ) {\n                jQuery.readyWait++;\n            } else {\n                jQuery.ready( true );\n            }\n        },\n\n        // Handle when the DOM is ready\n        ready: function( wait ) {\n\n            // Abort if there are pending holds or we're already ready\n            if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n                return;\n            }\n\n            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n            if ( !document.body ) {\n                return setTimeout( jQuery.ready );\n            }\n\n            // Remember that the DOM is ready\n            jQuery.isReady = true;\n\n            // If a normal DOM Ready event fired, decrement, and wait if need be\n            if ( wait !== true && --jQuery.readyWait > 0 ) {\n                return;\n            }\n\n            // If there are functions bound, to execute\n            readyList.resolveWith( document, [ jQuery ] );\n\n            // Trigger any bound ready events\n            if ( jQuery.fn.trigger ) {\n                jQuery( document ).trigger(\"ready\").off(\"ready\");\n            }\n        },\n\n        // See test/unit/core.js for details concerning isFunction.\n        // Since version 1.3, DOM methods and functions like alert\n        // aren't supported. They return false on IE (#2968).\n        isFunction: function( obj ) {\n            return jQuery.type(obj) === \"function\";\n        },\n\n        isArray: Array.isArray || function( obj ) {\n            return jQuery.type(obj) === \"array\";\n        },\n\n        isWindow: function( obj ) {\n            return obj != null && obj == obj.window;\n        },\n\n        isNumeric: function( obj ) {\n            return !isNaN( parseFloat(obj) ) && isFinite( obj );\n        },\n\n        type: function( obj ) {\n            if ( obj == null ) {\n                return String( obj );\n            }\n            return typeof obj === \"object\" || typeof obj === \"function\" ?\n                class2type[ core_toString.call(obj) ] || \"object\" :\n                typeof obj;\n        },\n\n        isPlainObject: function( obj ) {\n            // Must be an Object.\n            // Because of IE, we also have to check the presence of the constructor property.\n            // Make sure that DOM nodes and window objects don't pass through, as well\n            if ( !obj || jQuery.type(obj) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n                return false;\n            }\n\n            try {\n                // Not own constructor property must be Object\n                if ( obj.constructor &&\n                    !core_hasOwn.call(obj, \"constructor\") &&\n                    !core_hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\") ) {\n                    return false;\n                }\n            } catch ( e ) {\n                // IE8,9 Will throw exceptions on certain host objects #9897\n                return false;\n            }\n\n            // Own properties are enumerated firstly, so to speed up,\n            // if last one is own, then all properties are own.\n\n            var key;\n            for ( key in obj ) {}\n\n            return key === undefined || core_hasOwn.call( obj, key );\n        },\n\n        isEmptyObject: function( obj ) {\n            var name;\n            for ( name in obj ) {\n                return false;\n            }\n            return true;\n        },\n\n        error: function( msg ) {\n            throw new Error( msg );\n        },\n\n        // data: string of html\n        // context (optional): If specified, the fragment will be created in this context, defaults to document\n        // keepScripts (optional): If true, will include scripts passed in the html string\n        parseHTML: function( data, context, keepScripts ) {\n            if ( !data || typeof data !== \"string\" ) {\n                return null;\n            }\n            if ( typeof context === \"boolean\" ) {\n                keepScripts = context;\n                context = false;\n            }\n            context = context || document;\n\n            var parsed = rsingleTag.exec( data ),\n                scripts = !keepScripts && [];\n\n            // Single tag\n            if ( parsed ) {\n                return [ context.createElement( parsed[1] ) ];\n            }\n\n            parsed = jQuery.buildFragment( [ data ], context, scripts );\n            if ( scripts ) {\n                jQuery( scripts ).remove();\n            }\n            return jQuery.merge( [], parsed.childNodes );\n        },\n\n        parseJSON: function( data ) {\n            // Attempt to parse using the native JSON parser first\n            if ( window.JSON && window.JSON.parse ) {\n                return window.JSON.parse( data );\n            }\n\n            if ( data === null ) {\n                return data;\n            }\n\n            if ( typeof data === \"string\" ) {\n\n                // Make sure leading/trailing whitespace is removed (IE can't handle it)\n                data = jQuery.trim( data );\n\n                if ( data ) {\n                    // Make sure the incoming data is actual JSON\n                    // Logic borrowed from http://json.org/json2.js\n                    if ( rvalidchars.test( data.replace( rvalidescape, \"@\" )\n                        .replace( rvalidtokens, \"]\" )\n                        .replace( rvalidbraces, \"\")) ) {\n\n                        return ( new Function( \"return \" + data ) )();\n                    }\n                }\n            }\n\n            jQuery.error( \"Invalid JSON: \" + data );\n        },\n\n        // Cross-browser xml parsing\n        parseXML: function( data ) {\n            var xml, tmp;\n            if ( !data || typeof data !== \"string\" ) {\n                return null;\n            }\n            try {\n                if ( window.DOMParser ) { // Standard\n                    tmp = new DOMParser();\n                    xml = tmp.parseFromString( data , \"text/xml\" );\n                } else { // IE\n                    xml = new ActiveXObject( \"Microsoft.XMLDOM\" );\n                    xml.async = \"false\";\n                    xml.loadXML( data );\n                }\n            } catch( e ) {\n                xml = undefined;\n            }\n            if ( !xml || !xml.documentElement || xml.getElementsByTagName( \"parsererror\" ).length ) {\n                jQuery.error( \"Invalid XML: \" + data );\n            }\n            return xml;\n        },\n\n        noop: function() {},\n\n        // Evaluates a script in a global context\n        // Workarounds based on findings by Jim Driscoll\n        // http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\n        globalEval: function( data ) {\n            if ( data && jQuery.trim( data ) ) {\n                // We use execScript on Internet Explorer\n                // We use an anonymous function so that context is window\n                // rather than jQuery in Firefox\n                ( window.execScript || function( data ) {\n                    window[ \"eval\" ].call( window, data );\n                } )( data );\n            }\n        },\n\n        // Convert dashed to camelCase; used by the css and data modules\n        // Microsoft forgot to hump their vendor prefix (#9572)\n        camelCase: function( string ) {\n            return string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n        },\n\n        nodeName: function( elem, name ) {\n            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n        },\n\n        // args is for internal usage only\n        each: function( obj, callback, args ) {\n            var value,\n                i = 0,\n                length = obj.length,\n                isArray = isArraylike( obj );\n\n            if ( args ) {\n                if ( isArray ) {\n                    for ( ; i < length; i++ ) {\n                        value = callback.apply( obj[ i ], args );\n\n                        if ( value === false ) {\n                            break;\n                        }\n                    }\n                } else {\n                    for ( i in obj ) {\n                        value = callback.apply( obj[ i ], args );\n\n                        if ( value === false ) {\n                            break;\n                        }\n                    }\n                }\n\n                // A special, fast, case for the most common use of each\n            } else {\n                if ( isArray ) {\n                    for ( ; i < length; i++ ) {\n                        value = callback.call( obj[ i ], i, obj[ i ] );\n\n                        if ( value === false ) {\n                            break;\n                        }\n                    }\n                } else {\n                    for ( i in obj ) {\n                        value = callback.call( obj[ i ], i, obj[ i ] );\n\n                        if ( value === false ) {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return obj;\n        },\n\n        // Use native String.trim function wherever possible\n        trim: core_trim && !core_trim.call(\"\\uFEFF\\xA0\") ?\n            function( text ) {\n                return text == null ?\n                    \"\" :\n                    core_trim.call( text );\n            } :\n\n            // Otherwise use our own trimming functionality\n            function( text ) {\n                return text == null ?\n                    \"\" :\n                    ( text + \"\" ).replace( rtrim, \"\" );\n            },\n\n        // results is for internal usage only\n        makeArray: function( arr, results ) {\n            var ret = results || [];\n\n            if ( arr != null ) {\n                if ( isArraylike( Object(arr) ) ) {\n                    jQuery.merge( ret,\n                        typeof arr === \"string\" ?\n                            [ arr ] : arr\n                    );\n                } else {\n                    core_push.call( ret, arr );\n                }\n            }\n\n            return ret;\n        },\n\n        inArray: function( elem, arr, i ) {\n            var len;\n\n            if ( arr ) {\n                if ( core_indexOf ) {\n                    return core_indexOf.call( arr, elem, i );\n                }\n\n                len = arr.length;\n                i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;\n\n                for ( ; i < len; i++ ) {\n                    // Skip accessing in sparse arrays\n                    if ( i in arr && arr[ i ] === elem ) {\n                        return i;\n                    }\n                }\n            }\n\n            return -1;\n        },\n\n        merge: function( first, second ) {\n            var l = second.length,\n                i = first.length,\n                j = 0;\n\n            if ( typeof l === \"number\" ) {\n                for ( ; j < l; j++ ) {\n                    first[ i++ ] = second[ j ];\n                }\n            } else {\n                while ( second[j] !== undefined ) {\n                    first[ i++ ] = second[ j++ ];\n                }\n            }\n\n            first.length = i;\n\n            return first;\n        },\n\n        grep: function( elems, callback, inv ) {\n            var retVal,\n                ret = [],\n                i = 0,\n                length = elems.length;\n            inv = !!inv;\n\n            // Go through the array, only saving the items\n            // that pass the validator function\n            for ( ; i < length; i++ ) {\n                retVal = !!callback( elems[ i ], i );\n                if ( inv !== retVal ) {\n                    ret.push( elems[ i ] );\n                }\n            }\n\n            return ret;\n        },\n\n        // arg is for internal usage only\n        map: function( elems, callback, arg ) {\n            var value,\n                i = 0,\n                length = elems.length,\n                isArray = isArraylike( elems ),\n                ret = [];\n\n            // Go through the array, translating each of the items to their\n            if ( isArray ) {\n                for ( ; i < length; i++ ) {\n                    value = callback( elems[ i ], i, arg );\n\n                    if ( value != null ) {\n                        ret[ ret.length ] = value;\n                    }\n                }\n\n                // Go through every key on the object,\n            } else {\n                for ( i in elems ) {\n                    value = callback( elems[ i ], i, arg );\n\n                    if ( value != null ) {\n                        ret[ ret.length ] = value;\n                    }\n                }\n            }\n\n            // Flatten any nested arrays\n            return core_concat.apply( [], ret );\n        },\n\n        // A global GUID counter for objects\n        guid: 1,\n\n        // Bind a function to a context, optionally partially applying any\n        // arguments.\n        proxy: function( fn, context ) {\n            var args, proxy, tmp;\n\n            if ( typeof context === \"string\" ) {\n                tmp = fn[ context ];\n                context = fn;\n                fn = tmp;\n            }\n\n            // Quick check to determine if target is callable, in the spec\n            // this throws a TypeError, but we will just return undefined.\n            if ( !jQuery.isFunction( fn ) ) {\n                return undefined;\n            }\n\n            // Simulated bind\n            args = core_slice.call( arguments, 2 );\n            proxy = function() {\n                return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );\n            };\n\n            // Set the guid of unique handler to the same of original handler, so it can be removed\n            proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n            return proxy;\n        },\n\n        // Multifunctional method to get and set values of a collection\n        // The value/s can optionally be executed if it's a function\n        access: function( elems, fn, key, value, chainable, emptyGet, raw ) {\n            var i = 0,\n                length = elems.length,\n                bulk = key == null;\n\n            // Sets many values\n            if ( jQuery.type( key ) === \"object\" ) {\n                chainable = true;\n                for ( i in key ) {\n                    jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );\n                }\n\n                // Sets one value\n            } else if ( value !== undefined ) {\n                chainable = true;\n\n                if ( !jQuery.isFunction( value ) ) {\n                    raw = true;\n                }\n\n                if ( bulk ) {\n                    // Bulk operations run against the entire set\n                    if ( raw ) {\n                        fn.call( elems, value );\n                        fn = null;\n\n                        // ...except when executing function values\n                    } else {\n                        bulk = fn;\n                        fn = function( elem, key, value ) {\n                            return bulk.call( jQuery( elem ), value );\n                        };\n                    }\n                }\n\n                if ( fn ) {\n                    for ( ; i < length; i++ ) {\n                        fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );\n                    }\n                }\n            }\n\n            return chainable ?\n                elems :\n\n                // Gets\n                bulk ?\n                    fn.call( elems ) :\n                    length ? fn( elems[0], key ) : emptyGet;\n        },\n\n        now: function() {\n            return ( new Date() ).getTime();\n        }\n    });\n\n    jQuery.ready.promise = function( obj ) {\n        if ( !readyList ) {\n\n            readyList = jQuery.Deferred();\n\n            // Catch cases where $(document).ready() is called after the browser event has already occurred.\n            // we once tried to use readyState \"interactive\" here, but it caused issues like the one\n            // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n            if ( document.readyState === \"complete\" ) {\n                // Handle it asynchronously to allow scripts the opportunity to delay ready\n                setTimeout( jQuery.ready );\n\n                // Standards-based browsers support DOMContentLoaded\n            } else if ( document.addEventListener ) {\n                // Use the handy event callback\n                document.addEventListener( \"DOMContentLoaded\", completed, false );\n\n                // A fallback to window.onload, that will always work\n                window.addEventListener( \"load\", completed, false );\n\n                // If IE event model is used\n            } else {\n                // Ensure firing before onload, maybe late but safe also for iframes\n                document.attachEvent( \"onreadystatechange\", completed );\n\n                // A fallback to window.onload, that will always work\n                window.attachEvent( \"onload\", completed );\n\n                // If IE and not a frame\n                // continually check to see if the document is ready\n                var top = false;\n\n                try {\n                    top = window.frameElement == null && document.documentElement;\n                } catch(e) {}\n\n                if ( top && top.doScroll ) {\n                    (function doScrollCheck() {\n                        if ( !jQuery.isReady ) {\n\n                            try {\n                                // Use the trick by Diego Perini\n                                // http://javascript.nwbox.com/IEContentLoaded/\n                                top.doScroll(\"left\");\n                            } catch(e) {\n                                return setTimeout( doScrollCheck, 50 );\n                            }\n\n                            // detach all dom ready events\n                            detach();\n\n                            // and execute any waiting functions\n                            jQuery.ready();\n                        }\n                    })();\n                }\n            }\n        }\n        return readyList.promise( obj );\n    };\n\n// Populate the class2type map\n    jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"), function(i, name) {\n        class2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n    });\n\n    function isArraylike( obj ) {\n        var length = obj.length,\n            type = jQuery.type( obj );\n\n        if ( jQuery.isWindow( obj ) ) {\n            return false;\n        }\n\n        if ( obj.nodeType === 1 && length ) {\n            return true;\n        }\n\n        return type === \"array\" || type !== \"function\" &&\n            ( length === 0 ||\n                typeof length === \"number\" && length > 0 && ( length - 1 ) in obj );\n    }\n\n// All jQuery objects should point back to these\n    rootjQuery = jQuery(document);\n// String to Object options format cache\n    var optionsCache = {};\n\n// Convert String-formatted options into Object-formatted ones and store in cache\n    function createOptions( options ) {\n        var object = optionsCache[ options ] = {};\n        jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {\n            object[ flag ] = true;\n        });\n        return object;\n    }\n\n    /*\n     * Create a callback list using the following parameters:\n     *\n     *\toptions: an optional list of space-separated options that will change how\n     *\t\t\tthe callback list behaves or a more traditional option object\n     *\n     * By default a callback list will act like an event callback list and can be\n     * \"fired\" multiple times.\n     *\n     * Possible options:\n     *\n     *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n     *\n     *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n     *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n     *\t\t\t\t\tvalues (like a Deferred)\n     *\n     *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n     *\n     *\tstopOnFalse:\tinterrupt callings when a callback returns false\n     *\n     */\n    jQuery.Callbacks = function( options ) {\n\n        // Convert options from String-formatted to Object-formatted if needed\n        // (we check in cache first)\n        options = typeof options === \"string\" ?\n            ( optionsCache[ options ] || createOptions( options ) ) :\n            jQuery.extend( {}, options );\n\n        var // Flag to know if list is currently firing\n            firing,\n        // Last fire value (for non-forgettable lists)\n            memory,\n        // Flag to know if list was already fired\n            fired,\n        // End of the loop when firing\n            firingLength,\n        // Index of currently firing callback (modified by remove if needed)\n            firingIndex,\n        // First callback to fire (used internally by add and fireWith)\n            firingStart,\n        // Actual callback list\n            list = [],\n        // Stack of fire calls for repeatable lists\n            stack = !options.once && [],\n        // Fire callbacks\n            fire = function( data ) {\n                memory = options.memory && data;\n                fired = true;\n                firingIndex = firingStart || 0;\n                firingStart = 0;\n                firingLength = list.length;\n                firing = true;\n                for ( ; list && firingIndex < firingLength; firingIndex++ ) {\n                    if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {\n                        memory = false; // To prevent further calls using add\n                        break;\n                    }\n                }\n                firing = false;\n                if ( list ) {\n                    if ( stack ) {\n                        if ( stack.length ) {\n                            fire( stack.shift() );\n                        }\n                    } else if ( memory ) {\n                        list = [];\n                    } else {\n                        self.disable();\n                    }\n                }\n            },\n        // Actual Callbacks object\n            self = {\n                // Add a callback or a collection of callbacks to the list\n                add: function() {\n                    if ( list ) {\n                        // First, we save the current length\n                        var start = list.length;\n                        (function add( args ) {\n                            jQuery.each( args, function( _, arg ) {\n                                var type = jQuery.type( arg );\n                                if ( type === \"function\" ) {\n                                    if ( !options.unique || !self.has( arg ) ) {\n                                        list.push( arg );\n                                    }\n                                } else if ( arg && arg.length && type !== \"string\" ) {\n                                    // Inspect recursively\n                                    add( arg );\n                                }\n                            });\n                        })( arguments );\n                        // Do we need to add the callbacks to the\n                        // current firing batch?\n                        if ( firing ) {\n                            firingLength = list.length;\n                            // With memory, if we're not firing then\n                            // we should call right away\n                        } else if ( memory ) {\n                            firingStart = start;\n                            fire( memory );\n                        }\n                    }\n                    return this;\n                },\n                // Remove a callback from the list\n                remove: function() {\n                    if ( list ) {\n                        jQuery.each( arguments, function( _, arg ) {\n                            var index;\n                            while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n                                list.splice( index, 1 );\n                                // Handle firing indexes\n                                if ( firing ) {\n                                    if ( index <= firingLength ) {\n                                        firingLength--;\n                                    }\n                                    if ( index <= firingIndex ) {\n                                        firingIndex--;\n                                    }\n                                }\n                            }\n                        });\n                    }\n                    return this;\n                },\n                // Check if a given callback is in the list.\n                // If no argument is given, return whether or not list has callbacks attached.\n                has: function( fn ) {\n                    return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );\n                },\n                // Remove all callbacks from the list\n                empty: function() {\n                    list = [];\n                    return this;\n                },\n                // Have the list do nothing anymore\n                disable: function() {\n                    list = stack = memory = undefined;\n                    return this;\n                },\n                // Is it disabled?\n                disabled: function() {\n                    return !list;\n                },\n                // Lock the list in its current state\n                lock: function() {\n                    stack = undefined;\n                    if ( !memory ) {\n                        self.disable();\n                    }\n                    return this;\n                },\n                // Is it locked?\n                locked: function() {\n                    return !stack;\n                },\n                // Call all callbacks with the given context and arguments\n                fireWith: function( context, args ) {\n                    args = args || [];\n                    args = [ context, args.slice ? args.slice() : args ];\n                    if ( list && ( !fired || stack ) ) {\n                        if ( firing ) {\n                            stack.push( args );\n                        } else {\n                            fire( args );\n                        }\n                    }\n                    return this;\n                },\n                // Call all the callbacks with the given arguments\n                fire: function() {\n                    self.fireWith( this, arguments );\n                    return this;\n                },\n                // To know if the callbacks have already been called at least once\n                fired: function() {\n                    return !!fired;\n                }\n            };\n\n        return self;\n    };\n    jQuery.extend({\n\n        Deferred: function( func ) {\n            var tuples = [\n                    // action, add listener, listener list, final state\n                    [ \"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), \"resolved\" ],\n                    [ \"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), \"rejected\" ],\n                    [ \"notify\", \"progress\", jQuery.Callbacks(\"memory\") ]\n                ],\n                state = \"pending\",\n                promise = {\n                    state: function() {\n                        return state;\n                    },\n                    always: function() {\n                        deferred.done( arguments ).fail( arguments );\n                        return this;\n                    },\n                    then: function( /* fnDone, fnFail, fnProgress */ ) {\n                        var fns = arguments;\n                        return jQuery.Deferred(function( newDefer ) {\n                            jQuery.each( tuples, function( i, tuple ) {\n                                var action = tuple[ 0 ],\n                                    fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n                                // deferred[ done | fail | progress ] for forwarding actions to newDefer\n                                deferred[ tuple[1] ](function() {\n                                    var returned = fn && fn.apply( this, arguments );\n                                    if ( returned && jQuery.isFunction( returned.promise ) ) {\n                                        returned.promise()\n                                            .done( newDefer.resolve )\n                                            .fail( newDefer.reject )\n                                            .progress( newDefer.notify );\n                                    } else {\n                                        newDefer[ action + \"With\" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );\n                                    }\n                                });\n                            });\n                            fns = null;\n                        }).promise();\n                    },\n                    // Get a promise for this deferred\n                    // If obj is provided, the promise aspect is added to the object\n                    promise: function( obj ) {\n                        return obj != null ? jQuery.extend( obj, promise ) : promise;\n                    }\n                },\n                deferred = {};\n\n            // Keep pipe for back-compat\n            promise.pipe = promise.then;\n\n            // Add list-specific methods\n            jQuery.each( tuples, function( i, tuple ) {\n                var list = tuple[ 2 ],\n                    stateString = tuple[ 3 ];\n\n                // promise[ done | fail | progress ] = list.add\n                promise[ tuple[1] ] = list.add;\n\n                // Handle state\n                if ( stateString ) {\n                    list.add(function() {\n                        // state = [ resolved | rejected ]\n                        state = stateString;\n\n                        // [ reject_list | resolve_list ].disable; progress_list.lock\n                    }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n                }\n\n                // deferred[ resolve | reject | notify ]\n                deferred[ tuple[0] ] = function() {\n                    deferred[ tuple[0] + \"With\" ]( this === deferred ? promise : this, arguments );\n                    return this;\n                };\n                deferred[ tuple[0] + \"With\" ] = list.fireWith;\n            });\n\n            // Make the deferred a promise\n            promise.promise( deferred );\n\n            // Call given func if any\n            if ( func ) {\n                func.call( deferred, deferred );\n            }\n\n            // All done!\n            return deferred;\n        },\n\n        // Deferred helper\n        when: function( subordinate /* , ..., subordinateN */ ) {\n            var i = 0,\n                resolveValues = core_slice.call( arguments ),\n                length = resolveValues.length,\n\n            // the count of uncompleted subordinates\n                remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n            // the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n            // Update function for both resolve and progress values\n                updateFunc = function( i, contexts, values ) {\n                    return function( value ) {\n                        contexts[ i ] = this;\n                        values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;\n                        if( values === progressValues ) {\n                            deferred.notifyWith( contexts, values );\n                        } else if ( !( --remaining ) ) {\n                            deferred.resolveWith( contexts, values );\n                        }\n                    };\n                },\n\n                progressValues, progressContexts, resolveContexts;\n\n            // add listeners to Deferred subordinates; treat others as resolved\n            if ( length > 1 ) {\n                progressValues = new Array( length );\n                progressContexts = new Array( length );\n                resolveContexts = new Array( length );\n                for ( ; i < length; i++ ) {\n                    if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n                        resolveValues[ i ].promise()\n                            .done( updateFunc( i, resolveContexts, resolveValues ) )\n                            .fail( deferred.reject )\n                            .progress( updateFunc( i, progressContexts, progressValues ) );\n                    } else {\n                        --remaining;\n                    }\n                }\n            }\n\n            // if we're not waiting on anything, resolve the master\n            if ( !remaining ) {\n                deferred.resolveWith( resolveContexts, resolveValues );\n            }\n\n            return deferred.promise();\n        }\n    });\n    jQuery.support = (function() {\n\n        var support, all, a,\n            input, select, fragment,\n            opt, eventName, isSupported, i,\n            div = document.createElement(\"div\");\n\n        // Setup\n        div.setAttribute( \"className\", \"t\" );\n        div.innerHTML = \"  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>\";\n\n        // Support tests won't run in some limited or non-browser environments\n        all = div.getElementsByTagName(\"*\");\n        a = div.getElementsByTagName(\"a\")[ 0 ];\n        if ( !all || !a || !all.length ) {\n            return {};\n        }\n\n        // First batch of tests\n        select = document.createElement(\"select\");\n        opt = select.appendChild( document.createElement(\"option\") );\n        input = div.getElementsByTagName(\"input\")[ 0 ];\n\n        a.style.cssText = \"top:1px;float:left;opacity:.5\";\n        support = {\n            // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)\n            getSetAttribute: div.className !== \"t\",\n\n            // IE strips leading whitespace when .innerHTML is used\n            leadingWhitespace: div.firstChild.nodeType === 3,\n\n            // Make sure that tbody elements aren't automatically inserted\n            // IE will insert them into empty tables\n            tbody: !div.getElementsByTagName(\"tbody\").length,\n\n            // Make sure that link elements get serialized correctly by innerHTML\n            // This requires a wrapper element in IE\n            htmlSerialize: !!div.getElementsByTagName(\"link\").length,\n\n            // Get the style information from getAttribute\n            // (IE uses .cssText instead)\n            style: /top/.test( a.getAttribute(\"style\") ),\n\n            // Make sure that URLs aren't manipulated\n            // (IE normalizes it by default)\n            hrefNormalized: a.getAttribute(\"href\") === \"/a\",\n\n            // Make sure that element opacity exists\n            // (IE uses filter instead)\n            // Use a regex to work around a WebKit issue. See #5145\n            opacity: /^0.5/.test( a.style.opacity ),\n\n            // Verify style float existence\n            // (IE uses styleFloat instead of cssFloat)\n            cssFloat: !!a.style.cssFloat,\n\n            // Check the default checkbox/radio value (\"\" on WebKit; \"on\" elsewhere)\n            checkOn: !!input.value,\n\n            // Make sure that a selected-by-default option has a working selected property.\n            // (WebKit defaults to false instead of true, IE too, if it's in an optgroup)\n            optSelected: opt.selected,\n\n            // Tests for enctype support on a form (#6743)\n            enctype: !!document.createElement(\"form\").enctype,\n\n            // Makes sure cloning an html5 element does not cause problems\n            // Where outerHTML is undefined, this still works\n            html5Clone: document.createElement(\"nav\").cloneNode( true ).outerHTML !== \"<:nav></:nav>\",\n\n            // jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode\n            boxModel: document.compatMode === \"CSS1Compat\",\n\n            // Will be defined later\n            deleteExpando: true,\n            noCloneEvent: true,\n            inlineBlockNeedsLayout: false,\n            shrinkWrapBlocks: false,\n            reliableMarginRight: true,\n            boxSizingReliable: true,\n            pixelPosition: false\n        };\n\n        // Make sure checked status is properly cloned\n        input.checked = true;\n        support.noCloneChecked = input.cloneNode( true ).checked;\n\n        // Make sure that the options inside disabled selects aren't marked as disabled\n        // (WebKit marks them as disabled)\n        select.disabled = true;\n        support.optDisabled = !opt.disabled;\n\n        // Support: IE<9\n        try {\n            delete div.test;\n        } catch( e ) {\n            support.deleteExpando = false;\n        }\n\n        // Check if we can trust getAttribute(\"value\")\n        input = document.createElement(\"input\");\n        input.setAttribute( \"value\", \"\" );\n        support.input = input.getAttribute( \"value\" ) === \"\";\n\n        // Check if an input maintains its value after becoming a radio\n        input.value = \"t\";\n        input.setAttribute( \"type\", \"radio\" );\n        support.radioValue = input.value === \"t\";\n\n        // #11217 - WebKit loses check when the name is after the checked attribute\n        input.setAttribute( \"checked\", \"t\" );\n        input.setAttribute( \"name\", \"t\" );\n\n        fragment = document.createDocumentFragment();\n        fragment.appendChild( input );\n\n        // Check if a disconnected checkbox will retain its checked\n        // value of true after appended to the DOM (IE6/7)\n        support.appendChecked = input.checked;\n\n        // WebKit doesn't clone checked state correctly in fragments\n        support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n        // Support: IE<9\n        // Opera does not clone events (and typeof div.attachEvent === undefined).\n        // IE9-10 clones events bound via attachEvent, but they don't trigger with .click()\n        if ( div.attachEvent ) {\n            div.attachEvent( \"onclick\", function() {\n                support.noCloneEvent = false;\n            });\n\n            div.cloneNode( true ).click();\n        }\n\n        // Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)\n        // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php\n        for ( i in { submit: true, change: true, focusin: true }) {\n            div.setAttribute( eventName = \"on\" + i, \"t\" );\n\n            support[ i + \"Bubbles\" ] = eventName in window || div.attributes[ eventName ].expando === false;\n        }\n\n        div.style.backgroundClip = \"content-box\";\n        div.cloneNode( true ).style.backgroundClip = \"\";\n        support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n        // Run tests that need a body at doc ready\n        jQuery(function() {\n            var container, marginDiv, tds,\n                divReset = \"padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;\",\n                body = document.getElementsByTagName(\"body\")[0];\n\n            if ( !body ) {\n                // Return for frameset docs that don't have a body\n                return;\n            }\n\n            container = document.createElement(\"div\");\n            container.style.cssText = \"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\";\n\n            body.appendChild( container ).appendChild( div );\n\n            // Support: IE8\n            // Check if table cells still have offsetWidth/Height when they are set\n            // to display:none and there are still other visible table cells in a\n            // table row; if so, offsetWidth/Height are not reliable for use when\n            // determining if an element has been hidden directly using\n            // display:none (it is still safe to use offsets if a parent element is\n            // hidden; don safety goggles and see bug #4512 for more information).\n            div.innerHTML = \"<table><tr><td></td><td>t</td></tr></table>\";\n            tds = div.getElementsByTagName(\"td\");\n            tds[ 0 ].style.cssText = \"padding:0;margin:0;border:0;display:none\";\n            isSupported = ( tds[ 0 ].offsetHeight === 0 );\n\n            tds[ 0 ].style.display = \"\";\n            tds[ 1 ].style.display = \"none\";\n\n            // Support: IE8\n            // Check if empty table cells still have offsetWidth/Height\n            support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );\n\n            // Check box-sizing and margin behavior\n            div.innerHTML = \"\";\n            div.style.cssText = \"box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;\";\n            support.boxSizing = ( div.offsetWidth === 4 );\n            support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );\n\n            // Use window.getComputedStyle because jsdom on node.js will break without it.\n            if ( window.getComputedStyle ) {\n                support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== \"1%\";\n                support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: \"4px\" } ).width === \"4px\";\n\n                // Check if div with explicit width and no margin-right incorrectly\n                // gets computed margin-right based on width of container. (#3333)\n                // Fails in WebKit before Feb 2011 nightlies\n                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n                marginDiv = div.appendChild( document.createElement(\"div\") );\n                marginDiv.style.cssText = div.style.cssText = divReset;\n                marginDiv.style.marginRight = marginDiv.style.width = \"0\";\n                div.style.width = \"1px\";\n\n                support.reliableMarginRight =\n                    !parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );\n            }\n\n            if ( typeof div.style.zoom !== core_strundefined ) {\n                // Support: IE<8\n                // Check if natively block-level elements act like inline-block\n                // elements when setting their display to 'inline' and giving\n                // them layout\n                div.innerHTML = \"\";\n                div.style.cssText = divReset + \"width:1px;padding:1px;display:inline;zoom:1\";\n                support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );\n\n                // Support: IE6\n                // Check if elements with layout shrink-wrap their children\n                div.style.display = \"block\";\n                div.innerHTML = \"<div></div>\";\n                div.firstChild.style.width = \"5px\";\n                support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );\n\n                if ( support.inlineBlockNeedsLayout ) {\n                    // Prevent IE 6 from affecting layout for positioned elements #11048\n                    // Prevent IE from shrinking the body in IE 7 mode #12869\n                    // Support: IE<8\n                    body.style.zoom = 1;\n                }\n            }\n\n            body.removeChild( container );\n\n            // Null elements to avoid leaks in IE\n            container = div = tds = marginDiv = null;\n        });\n\n        // Null elements to avoid leaks in IE\n        all = select = fragment = opt = a = input = null;\n\n        return support;\n    })();\n\n    var rbrace = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,\n        rmultiDash = /([A-Z])/g;\n\n    function internalData( elem, name, data, pvt /* Internal Use Only */ ){\n        if ( !jQuery.acceptData( elem ) ) {\n            return;\n        }\n\n        var thisCache, ret,\n            internalKey = jQuery.expando,\n            getByName = typeof name === \"string\",\n\n        // We have to handle DOM nodes and JS objects differently because IE6-7\n        // can't GC object references properly across the DOM-JS boundary\n            isNode = elem.nodeType,\n\n        // Only DOM nodes need the global jQuery cache; JS object data is\n        // attached directly to the object so GC can occur automatically\n            cache = isNode ? jQuery.cache : elem,\n\n        // Only defining an ID for JS objects if its cache already exists allows\n        // the code to shortcut on the same path as a DOM node with no cache\n            id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;\n\n        // Avoid doing any more work than we need to when trying to get data on an\n        // object that has no data at all\n        if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {\n            return;\n        }\n\n        if ( !id ) {\n            // Only DOM nodes need a new unique ID for each element since their data\n            // ends up in the global cache\n            if ( isNode ) {\n                elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;\n            } else {\n                id = internalKey;\n            }\n        }\n\n        if ( !cache[ id ] ) {\n            cache[ id ] = {};\n\n            // Avoids exposing jQuery metadata on plain JS objects when the object\n            // is serialized using JSON.stringify\n            if ( !isNode ) {\n                cache[ id ].toJSON = jQuery.noop;\n            }\n        }\n\n        // An object can be passed to jQuery.data instead of a key/value pair; this gets\n        // shallow copied over onto the existing cache\n        if ( typeof name === \"object\" || typeof name === \"function\" ) {\n            if ( pvt ) {\n                cache[ id ] = jQuery.extend( cache[ id ], name );\n            } else {\n                cache[ id ].data = jQuery.extend( cache[ id ].data, name );\n            }\n        }\n\n        thisCache = cache[ id ];\n\n        // jQuery data() is stored in a separate object inside the object's internal data\n        // cache in order to avoid key collisions between internal data and user-defined\n        // data.\n        if ( !pvt ) {\n            if ( !thisCache.data ) {\n                thisCache.data = {};\n            }\n\n            thisCache = thisCache.data;\n        }\n\n        if ( data !== undefined ) {\n            thisCache[ jQuery.camelCase( name ) ] = data;\n        }\n\n        // Check for both converted-to-camel and non-converted data property names\n        // If a data property was specified\n        if ( getByName ) {\n\n            // First Try to find as-is property data\n            ret = thisCache[ name ];\n\n            // Test for null|undefined property data\n            if ( ret == null ) {\n\n                // Try to find the camelCased property\n                ret = thisCache[ jQuery.camelCase( name ) ];\n            }\n        } else {\n            ret = thisCache;\n        }\n\n        return ret;\n    }\n\n    function internalRemoveData( elem, name, pvt ) {\n        if ( !jQuery.acceptData( elem ) ) {\n            return;\n        }\n\n        var i, l, thisCache,\n            isNode = elem.nodeType,\n\n        // See jQuery.data for more information\n            cache = isNode ? jQuery.cache : elem,\n            id = isNode ? elem[ jQuery.expando ] : jQuery.expando;\n\n        // If there is already no cache entry for this object, there is no\n        // purpose in continuing\n        if ( !cache[ id ] ) {\n            return;\n        }\n\n        if ( name ) {\n\n            thisCache = pvt ? cache[ id ] : cache[ id ].data;\n\n            if ( thisCache ) {\n\n                // Support array or space separated string names for data keys\n                if ( !jQuery.isArray( name ) ) {\n\n                    // try the string as a key before any manipulation\n                    if ( name in thisCache ) {\n                        name = [ name ];\n                    } else {\n\n                        // split the camel cased version by spaces unless a key with the spaces exists\n                        name = jQuery.camelCase( name );\n                        if ( name in thisCache ) {\n                            name = [ name ];\n                        } else {\n                            name = name.split(\" \");\n                        }\n                    }\n                } else {\n                    // If \"name\" is an array of keys...\n                    // When data is initially created, via (\"key\", \"val\") signature,\n                    // keys will be converted to camelCase.\n                    // Since there is no way to tell _how_ a key was added, remove\n                    // both plain key and camelCase key. #12786\n                    // This will only penalize the array argument path.\n                    name = name.concat( jQuery.map( name, jQuery.camelCase ) );\n                }\n\n                for ( i = 0, l = name.length; i < l; i++ ) {\n                    delete thisCache[ name[i] ];\n                }\n\n                // If there is no data left in the cache, we want to continue\n                // and let the cache object itself get destroyed\n                if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {\n                    return;\n                }\n            }\n        }\n\n        // See jQuery.data for more information\n        if ( !pvt ) {\n            delete cache[ id ].data;\n\n            // Don't destroy the parent cache unless the internal data object\n            // had been the only thing left in it\n            if ( !isEmptyDataObject( cache[ id ] ) ) {\n                return;\n            }\n        }\n\n        // Destroy the cache\n        if ( isNode ) {\n            jQuery.cleanData( [ elem ], true );\n\n            // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)\n        } else if ( jQuery.support.deleteExpando || cache != cache.window ) {\n            delete cache[ id ];\n\n            // When all else fails, null\n        } else {\n            cache[ id ] = null;\n        }\n    }\n\n    jQuery.extend({\n        cache: {},\n\n        // Unique for each copy of jQuery on the page\n        // Non-digits removed to match rinlinejQuery\n        expando: \"jQuery\" + ( core_version + Math.random() ).replace( /\\D/g, \"\" ),\n\n        // The following elements throw uncatchable exceptions if you\n        // attempt to add expando properties to them.\n        noData: {\n            \"embed\": true,\n            // Ban all objects except for Flash (which handle expandos)\n            \"object\": \"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\",\n            \"applet\": true\n        },\n\n        hasData: function( elem ) {\n            elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];\n            return !!elem && !isEmptyDataObject( elem );\n        },\n\n        data: function( elem, name, data ) {\n            return internalData( elem, name, data );\n        },\n\n        removeData: function( elem, name ) {\n            return internalRemoveData( elem, name );\n        },\n\n        // For internal use only.\n        _data: function( elem, name, data ) {\n            return internalData( elem, name, data, true );\n        },\n\n        _removeData: function( elem, name ) {\n            return internalRemoveData( elem, name, true );\n        },\n\n        // A method for determining if a DOM node can handle the data expando\n        acceptData: function( elem ) {\n            // Do not set data on non-element because it will not be cleared (#8335).\n            if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {\n                return false;\n            }\n\n            var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];\n\n            // nodes accept data unless otherwise specified; rejection can be conditional\n            return !noData || noData !== true && elem.getAttribute(\"classid\") === noData;\n        }\n    });\n\n    jQuery.fn.extend({\n        data: function( key, value ) {\n            var attrs, name,\n                elem = this[0],\n                i = 0,\n                data = null;\n\n            // Gets all values\n            if ( key === undefined ) {\n                if ( this.length ) {\n                    data = jQuery.data( elem );\n\n                    if ( elem.nodeType === 1 && !jQuery._data( elem, \"parsedAttrs\" ) ) {\n                        attrs = elem.attributes;\n                        for ( ; i < attrs.length; i++ ) {\n                            name = attrs[i].name;\n\n                            if ( !name.indexOf( \"data-\" ) ) {\n                                name = jQuery.camelCase( name.slice(5) );\n\n                                dataAttr( elem, name, data[ name ] );\n                            }\n                        }\n                        jQuery._data( elem, \"parsedAttrs\", true );\n                    }\n                }\n\n                return data;\n            }\n\n            // Sets multiple values\n            if ( typeof key === \"object\" ) {\n                return this.each(function() {\n                    jQuery.data( this, key );\n                });\n            }\n\n            return jQuery.access( this, function( value ) {\n\n                if ( value === undefined ) {\n                    // Try to fetch any internally stored data first\n                    return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;\n                }\n\n                this.each(function() {\n                    jQuery.data( this, key, value );\n                });\n            }, null, value, arguments.length > 1, null, true );\n        },\n\n        removeData: function( key ) {\n            return this.each(function() {\n                jQuery.removeData( this, key );\n            });\n        }\n    });\n\n    function dataAttr( elem, key, data ) {\n        // If nothing was found internally, try to fetch any\n        // data from the HTML5 data-* attribute\n        if ( data === undefined && elem.nodeType === 1 ) {\n\n            var name = \"data-\" + key.replace( rmultiDash, \"-$1\" ).toLowerCase();\n\n            data = elem.getAttribute( name );\n\n            if ( typeof data === \"string\" ) {\n                try {\n                    data = data === \"true\" ? true :\n                        data === \"false\" ? false :\n                            data === \"null\" ? null :\n                                // Only convert to a number if it doesn't change the string\n                                +data + \"\" === data ? +data :\n                                    rbrace.test( data ) ? jQuery.parseJSON( data ) :\n                                        data;\n                } catch( e ) {}\n\n                // Make sure we set the data so it isn't changed later\n                jQuery.data( elem, key, data );\n\n            } else {\n                data = undefined;\n            }\n        }\n\n        return data;\n    }\n\n// checks a cache object for emptiness\n    function isEmptyDataObject( obj ) {\n        var name;\n        for ( name in obj ) {\n\n            // if the public data object is empty, the private is still empty\n            if ( name === \"data\" && jQuery.isEmptyObject( obj[name] ) ) {\n                continue;\n            }\n            if ( name !== \"toJSON\" ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n    jQuery.extend({\n        queue: function( elem, type, data ) {\n            var queue;\n\n            if ( elem ) {\n                type = ( type || \"fx\" ) + \"queue\";\n                queue = jQuery._data( elem, type );\n\n                // Speed up dequeue by getting out quickly if this is just a lookup\n                if ( data ) {\n                    if ( !queue || jQuery.isArray(data) ) {\n                        queue = jQuery._data( elem, type, jQuery.makeArray(data) );\n                    } else {\n                        queue.push( data );\n                    }\n                }\n                return queue || [];\n            }\n        },\n\n        dequeue: function( elem, type ) {\n            type = type || \"fx\";\n\n            var queue = jQuery.queue( elem, type ),\n                startLength = queue.length,\n                fn = queue.shift(),\n                hooks = jQuery._queueHooks( elem, type ),\n                next = function() {\n                    jQuery.dequeue( elem, type );\n                };\n\n            // If the fx queue is dequeued, always remove the progress sentinel\n            if ( fn === \"inprogress\" ) {\n                fn = queue.shift();\n                startLength--;\n            }\n\n            hooks.cur = fn;\n            if ( fn ) {\n\n                // Add a progress sentinel to prevent the fx queue from being\n                // automatically dequeued\n                if ( type === \"fx\" ) {\n                    queue.unshift( \"inprogress\" );\n                }\n\n                // clear up the last queue stop function\n                delete hooks.stop;\n                fn.call( elem, next, hooks );\n            }\n\n            if ( !startLength && hooks ) {\n                hooks.empty.fire();\n            }\n        },\n\n        // not intended for public consumption - generates a queueHooks object, or returns the current one\n        _queueHooks: function( elem, type ) {\n            var key = type + \"queueHooks\";\n            return jQuery._data( elem, key ) || jQuery._data( elem, key, {\n                empty: jQuery.Callbacks(\"once memory\").add(function() {\n                    jQuery._removeData( elem, type + \"queue\" );\n                    jQuery._removeData( elem, key );\n                })\n            });\n        }\n    });\n\n    jQuery.fn.extend({\n        queue: function( type, data ) {\n            var setter = 2;\n\n            if ( typeof type !== \"string\" ) {\n                data = type;\n                type = \"fx\";\n                setter--;\n            }\n\n            if ( arguments.length < setter ) {\n                return jQuery.queue( this[0], type );\n            }\n\n            return data === undefined ?\n                this :\n                this.each(function() {\n                    var queue = jQuery.queue( this, type, data );\n\n                    // ensure a hooks for this queue\n                    jQuery._queueHooks( this, type );\n\n                    if ( type === \"fx\" && queue[0] !== \"inprogress\" ) {\n                        jQuery.dequeue( this, type );\n                    }\n                });\n        },\n        dequeue: function( type ) {\n            return this.each(function() {\n                jQuery.dequeue( this, type );\n            });\n        },\n        // Based off of the plugin by Clint Helfers, with permission.\n        // http://blindsignals.com/index.php/2009/07/jquery-delay/\n        delay: function( time, type ) {\n            time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n            type = type || \"fx\";\n\n            return this.queue( type, function( next, hooks ) {\n                var timeout = setTimeout( next, time );\n                hooks.stop = function() {\n                    clearTimeout( timeout );\n                };\n            });\n        },\n        clearQueue: function( type ) {\n            return this.queue( type || \"fx\", [] );\n        },\n        // Get a promise resolved when queues of a certain type\n        // are emptied (fx is the type by default)\n        promise: function( type, obj ) {\n            var tmp,\n                count = 1,\n                defer = jQuery.Deferred(),\n                elements = this,\n                i = this.length,\n                resolve = function() {\n                    if ( !( --count ) ) {\n                        defer.resolveWith( elements, [ elements ] );\n                    }\n                };\n\n            if ( typeof type !== \"string\" ) {\n                obj = type;\n                type = undefined;\n            }\n            type = type || \"fx\";\n\n            while( i-- ) {\n                tmp = jQuery._data( elements[ i ], type + \"queueHooks\" );\n                if ( tmp && tmp.empty ) {\n                    count++;\n                    tmp.empty.add( resolve );\n                }\n            }\n            resolve();\n            return defer.promise( obj );\n        }\n    });\n    var nodeHook, boolHook,\n        rclass = /[\\t\\r\\n]/g,\n        rreturn = /\\r/g,\n        rfocusable = /^(?:input|select|textarea|button|object)$/i,\n        rclickable = /^(?:a|area)$/i,\n        rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,\n        ruseDefault = /^(?:checked|selected)$/i,\n        getSetAttribute = jQuery.support.getSetAttribute,\n        getSetInput = jQuery.support.input;\n\n    jQuery.fn.extend({\n        attr: function( name, value ) {\n            return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );\n        },\n\n        removeAttr: function( name ) {\n            return this.each(function() {\n                jQuery.removeAttr( this, name );\n            });\n        },\n\n        prop: function( name, value ) {\n            return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );\n        },\n\n        removeProp: function( name ) {\n            name = jQuery.propFix[ name ] || name;\n            return this.each(function() {\n                // try/catch handles cases where IE balks (such as removing a property on window)\n                try {\n                    this[ name ] = undefined;\n                    delete this[ name ];\n                } catch( e ) {}\n            });\n        },\n\n        addClass: function( value ) {\n            var classes, elem, cur, clazz, j,\n                i = 0,\n                len = this.length,\n                proceed = typeof value === \"string\" && value;\n\n            if ( jQuery.isFunction( value ) ) {\n                return this.each(function( j ) {\n                    jQuery( this ).addClass( value.call( this, j, this.className ) );\n                });\n            }\n\n            if ( proceed ) {\n                // The disjunction here is for better compressibility (see removeClass)\n                classes = ( value || \"\" ).match( core_rnotwhite ) || [];\n\n                for ( ; i < len; i++ ) {\n                    elem = this[ i ];\n                    cur = elem.nodeType === 1 && ( elem.className ?\n                        ( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\n                        \" \"\n                        );\n\n                    if ( cur ) {\n                        j = 0;\n                        while ( (clazz = classes[j++]) ) {\n                            if ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n                                cur += clazz + \" \";\n                            }\n                        }\n                        elem.className = jQuery.trim( cur );\n\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        removeClass: function( value ) {\n            var classes, elem, cur, clazz, j,\n                i = 0,\n                len = this.length,\n                proceed = arguments.length === 0 || typeof value === \"string\" && value;\n\n            if ( jQuery.isFunction( value ) ) {\n                return this.each(function( j ) {\n                    jQuery( this ).removeClass( value.call( this, j, this.className ) );\n                });\n            }\n            if ( proceed ) {\n                classes = ( value || \"\" ).match( core_rnotwhite ) || [];\n\n                for ( ; i < len; i++ ) {\n                    elem = this[ i ];\n                    // This expression is here for better compressibility (see addClass)\n                    cur = elem.nodeType === 1 && ( elem.className ?\n                        ( \" \" + elem.className + \" \" ).replace( rclass, \" \" ) :\n                        \"\"\n                        );\n\n                    if ( cur ) {\n                        j = 0;\n                        while ( (clazz = classes[j++]) ) {\n                            // Remove *all* instances\n                            while ( cur.indexOf( \" \" + clazz + \" \" ) >= 0 ) {\n                                cur = cur.replace( \" \" + clazz + \" \", \" \" );\n                            }\n                        }\n                        elem.className = value ? jQuery.trim( cur ) : \"\";\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        toggleClass: function( value, stateVal ) {\n            var type = typeof value,\n                isBool = typeof stateVal === \"boolean\";\n\n            if ( jQuery.isFunction( value ) ) {\n                return this.each(function( i ) {\n                    jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );\n                });\n            }\n\n            return this.each(function() {\n                if ( type === \"string\" ) {\n                    // toggle individual class names\n                    var className,\n                        i = 0,\n                        self = jQuery( this ),\n                        state = stateVal,\n                        classNames = value.match( core_rnotwhite ) || [];\n\n                    while ( (className = classNames[ i++ ]) ) {\n                        // check each className given, space separated list\n                        state = isBool ? state : !self.hasClass( className );\n                        self[ state ? \"addClass\" : \"removeClass\" ]( className );\n                    }\n\n                    // Toggle whole class name\n                } else if ( type === core_strundefined || type === \"boolean\" ) {\n                    if ( this.className ) {\n                        // store className if set\n                        jQuery._data( this, \"__className__\", this.className );\n                    }\n\n                    // If the element has a class name or if we're passed \"false\",\n                    // then remove the whole classname (if there was one, the above saved it).\n                    // Otherwise bring back whatever was previously saved (if anything),\n                    // falling back to the empty string if nothing was stored.\n                    this.className = this.className || value === false ? \"\" : jQuery._data( this, \"__className__\" ) || \"\";\n                }\n            });\n        },\n\n        hasClass: function( selector ) {\n            var className = \" \" + selector + \" \",\n                i = 0,\n                l = this.length;\n            for ( ; i < l; i++ ) {\n                if ( this[i].nodeType === 1 && (\" \" + this[i].className + \" \").replace(rclass, \" \").indexOf( className ) >= 0 ) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        val: function( value ) {\n            var ret, hooks, isFunction,\n                elem = this[0];\n\n            if ( !arguments.length ) {\n                if ( elem ) {\n                    hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n                    if ( hooks && \"get\" in hooks && (ret = hooks.get( elem, \"value\" )) !== undefined ) {\n                        return ret;\n                    }\n\n                    ret = elem.value;\n\n                    return typeof ret === \"string\" ?\n                        // handle most common string cases\n                        ret.replace(rreturn, \"\") :\n                        // handle cases where value is null/undef or number\n                        ret == null ? \"\" : ret;\n                }\n\n                return;\n            }\n\n            isFunction = jQuery.isFunction( value );\n\n            return this.each(function( i ) {\n                var val,\n                    self = jQuery(this);\n\n                if ( this.nodeType !== 1 ) {\n                    return;\n                }\n\n                if ( isFunction ) {\n                    val = value.call( this, i, self.val() );\n                } else {\n                    val = value;\n                }\n\n                // Treat null/undefined as \"\"; convert numbers to string\n                if ( val == null ) {\n                    val = \"\";\n                } else if ( typeof val === \"number\" ) {\n                    val += \"\";\n                } else if ( jQuery.isArray( val ) ) {\n                    val = jQuery.map(val, function ( value ) {\n                        return value == null ? \"\" : value + \"\";\n                    });\n                }\n\n                hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n                // If set returns undefined, fall back to normal setting\n                if ( !hooks || !(\"set\" in hooks) || hooks.set( this, val, \"value\" ) === undefined ) {\n                    this.value = val;\n                }\n            });\n        }\n    });\n\n    jQuery.extend({\n        valHooks: {\n            option: {\n                get: function( elem ) {\n                    // attributes.value is undefined in Blackberry 4.7 but\n                    // uses .value. See #6932\n                    var val = elem.attributes.value;\n                    return !val || val.specified ? elem.value : elem.text;\n                }\n            },\n            select: {\n                get: function( elem ) {\n                    var value, option,\n                        options = elem.options,\n                        index = elem.selectedIndex,\n                        one = elem.type === \"select-one\" || index < 0,\n                        values = one ? null : [],\n                        max = one ? index + 1 : options.length,\n                        i = index < 0 ?\n                            max :\n                            one ? index : 0;\n\n                    // Loop through all the selected options\n                    for ( ; i < max; i++ ) {\n                        option = options[ i ];\n\n                        // oldIE doesn't update selected after form reset (#2551)\n                        if ( ( option.selected || i === index ) &&\n                            // Don't return options that are disabled or in a disabled optgroup\n                            ( jQuery.support.optDisabled ? !option.disabled : option.getAttribute(\"disabled\") === null ) &&\n                            ( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n                            // Get the specific value for the option\n                            value = jQuery( option ).val();\n\n                            // We don't need an array for one selects\n                            if ( one ) {\n                                return value;\n                            }\n\n                            // Multi-Selects return an array\n                            values.push( value );\n                        }\n                    }\n\n                    return values;\n                },\n\n                set: function( elem, value ) {\n                    var values = jQuery.makeArray( value );\n\n                    jQuery(elem).find(\"option\").each(function() {\n                        this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;\n                    });\n\n                    if ( !values.length ) {\n                        elem.selectedIndex = -1;\n                    }\n                    return values;\n                }\n            }\n        },\n\n        attr: function( elem, name, value ) {\n            var hooks, notxml, ret,\n                nType = elem.nodeType;\n\n            // don't get/set attributes on text, comment and attribute nodes\n            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {\n                return;\n            }\n\n            // Fallback to prop when attributes are not supported\n            if ( typeof elem.getAttribute === core_strundefined ) {\n                return jQuery.prop( elem, name, value );\n            }\n\n            notxml = nType !== 1 || !jQuery.isXMLDoc( elem );\n\n            // All attributes are lowercase\n            // Grab necessary hook if one is defined\n            if ( notxml ) {\n                name = name.toLowerCase();\n                hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );\n            }\n\n            if ( value !== undefined ) {\n\n                if ( value === null ) {\n                    jQuery.removeAttr( elem, name );\n\n                } else if ( hooks && notxml && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {\n                    return ret;\n\n                } else {\n                    elem.setAttribute( name, value + \"\" );\n                    return value;\n                }\n\n            } else if ( hooks && notxml && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ) {\n                return ret;\n\n            } else {\n\n                // In IE9+, Flash objects don't have .getAttribute (#12945)\n                // Support: IE9+\n                if ( typeof elem.getAttribute !== core_strundefined ) {\n                    ret =  elem.getAttribute( name );\n                }\n\n                // Non-existent attributes return null, we normalize to undefined\n                return ret == null ?\n                    undefined :\n                    ret;\n            }\n        },\n\n        removeAttr: function( elem, value ) {\n            var name, propName,\n                i = 0,\n                attrNames = value && value.match( core_rnotwhite );\n\n            if ( attrNames && elem.nodeType === 1 ) {\n                while ( (name = attrNames[i++]) ) {\n                    propName = jQuery.propFix[ name ] || name;\n\n                    // Boolean attributes get special treatment (#10870)\n                    if ( rboolean.test( name ) ) {\n                        // Set corresponding property to false for boolean attributes\n                        // Also clear defaultChecked/defaultSelected (if appropriate) for IE<8\n                        if ( !getSetAttribute && ruseDefault.test( name ) ) {\n                            elem[ jQuery.camelCase( \"default-\" + name ) ] =\n                                elem[ propName ] = false;\n                        } else {\n                            elem[ propName ] = false;\n                        }\n\n                        // See #9699 for explanation of this approach (setting first, then removal)\n                    } else {\n                        jQuery.attr( elem, name, \"\" );\n                    }\n\n                    elem.removeAttribute( getSetAttribute ? name : propName );\n                }\n            }\n        },\n\n        attrHooks: {\n            type: {\n                set: function( elem, value ) {\n                    if ( !jQuery.support.radioValue && value === \"radio\" && jQuery.nodeName(elem, \"input\") ) {\n                        // Setting the type on a radio button after the value resets the value in IE6-9\n                        // Reset value to default in case type is set after value during creation\n                        var val = elem.value;\n                        elem.setAttribute( \"type\", value );\n                        if ( val ) {\n                            elem.value = val;\n                        }\n                        return value;\n                    }\n                }\n            }\n        },\n\n        propFix: {\n            tabindex: \"tabIndex\",\n            readonly: \"readOnly\",\n            \"for\": \"htmlFor\",\n            \"class\": \"className\",\n            maxlength: \"maxLength\",\n            cellspacing: \"cellSpacing\",\n            cellpadding: \"cellPadding\",\n            rowspan: \"rowSpan\",\n            colspan: \"colSpan\",\n            usemap: \"useMap\",\n            frameborder: \"frameBorder\",\n            contenteditable: \"contentEditable\"\n        },\n\n        prop: function( elem, name, value ) {\n            var ret, hooks, notxml,\n                nType = elem.nodeType;\n\n            // don't get/set properties on text, comment and attribute nodes\n            if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {\n                return;\n            }\n\n            notxml = nType !== 1 || !jQuery.isXMLDoc( elem );\n\n            if ( notxml ) {\n                // Fix name and attach hooks\n                name = jQuery.propFix[ name ] || name;\n                hooks = jQuery.propHooks[ name ];\n            }\n\n            if ( value !== undefined ) {\n                if ( hooks && \"set\" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {\n                    return ret;\n\n                } else {\n                    return ( elem[ name ] = value );\n                }\n\n            } else {\n                if ( hooks && \"get\" in hooks && (ret = hooks.get( elem, name )) !== null ) {\n                    return ret;\n\n                } else {\n                    return elem[ name ];\n                }\n            }\n        },\n\n        propHooks: {\n            tabIndex: {\n                get: function( elem ) {\n                    // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set\n                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n                    var attributeNode = elem.getAttributeNode(\"tabindex\");\n\n                    return attributeNode && attributeNode.specified ?\n                        parseInt( attributeNode.value, 10 ) :\n                        rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?\n                            0 :\n                            undefined;\n                }\n            }\n        }\n    });\n\n// Hook for boolean attributes\n    boolHook = {\n        get: function( elem, name ) {\n            var\n            // Use .prop to determine if this attribute is understood as boolean\n                prop = jQuery.prop( elem, name ),\n\n            // Fetch it accordingly\n                attr = typeof prop === \"boolean\" && elem.getAttribute( name ),\n                detail = typeof prop === \"boolean\" ?\n\n                    getSetInput && getSetAttribute ?\n                        attr != null :\n                        // oldIE fabricates an empty string for missing boolean attributes\n                        // and conflates checked/selected into attroperties\n                        ruseDefault.test( name ) ?\n                            elem[ jQuery.camelCase( \"default-\" + name ) ] :\n                            !!attr :\n\n                    // fetch an attribute node for properties not recognized as boolean\n                    elem.getAttributeNode( name );\n\n            return detail && detail.value !== false ?\n                name.toLowerCase() :\n                undefined;\n        },\n        set: function( elem, value, name ) {\n            if ( value === false ) {\n                // Remove boolean attributes when set to false\n                jQuery.removeAttr( elem, name );\n            } else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {\n                // IE<8 needs the *property* name\n                elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );\n\n                // Use defaultChecked and defaultSelected for oldIE\n            } else {\n                elem[ jQuery.camelCase( \"default-\" + name ) ] = elem[ name ] = true;\n            }\n\n            return name;\n        }\n    };\n\n// fix oldIE value attroperty\n    if ( !getSetInput || !getSetAttribute ) {\n        jQuery.attrHooks.value = {\n            get: function( elem, name ) {\n                var ret = elem.getAttributeNode( name );\n                return jQuery.nodeName( elem, \"input\" ) ?\n\n                    // Ignore the value *property* by using defaultValue\n                    elem.defaultValue :\n\n                    ret && ret.specified ? ret.value : undefined;\n            },\n            set: function( elem, value, name ) {\n                if ( jQuery.nodeName( elem, \"input\" ) ) {\n                    // Does not return so that setAttribute is also used\n                    elem.defaultValue = value;\n                } else {\n                    // Use nodeHook if defined (#1954); otherwise setAttribute is fine\n                    return nodeHook && nodeHook.set( elem, value, name );\n                }\n            }\n        };\n    }\n\n// IE6/7 do not support getting/setting some attributes with get/setAttribute\n    if ( !getSetAttribute ) {\n\n        // Use this for any attribute in IE6/7\n        // This fixes almost every IE6/7 issue\n        nodeHook = jQuery.valHooks.button = {\n            get: function( elem, name ) {\n                var ret = elem.getAttributeNode( name );\n                return ret && ( name === \"id\" || name === \"name\" || name === \"coords\" ? ret.value !== \"\" : ret.specified ) ?\n                    ret.value :\n                    undefined;\n            },\n            set: function( elem, value, name ) {\n                // Set the existing or create a new attribute node\n                var ret = elem.getAttributeNode( name );\n                if ( !ret ) {\n                    elem.setAttributeNode(\n                        (ret = elem.ownerDocument.createAttribute( name ))\n                    );\n                }\n\n                ret.value = value += \"\";\n\n                // Break association with cloned elements by also using setAttribute (#9646)\n                return name === \"value\" || value === elem.getAttribute( name ) ?\n                    value :\n                    undefined;\n            }\n        };\n\n        // Set contenteditable to false on removals(#10429)\n        // Setting to empty string throws an error as an invalid value\n        jQuery.attrHooks.contenteditable = {\n            get: nodeHook.get,\n            set: function( elem, value, name ) {\n                nodeHook.set( elem, value === \"\" ? false : value, name );\n            }\n        };\n\n        // Set width and height to auto instead of 0 on empty string( Bug #8150 )\n        // This is for removals\n        jQuery.each([ \"width\", \"height\" ], function( i, name ) {\n            jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {\n                set: function( elem, value ) {\n                    if ( value === \"\" ) {\n                        elem.setAttribute( name, \"auto\" );\n                        return value;\n                    }\n                }\n            });\n        });\n    }\n\n\n// Some attributes require a special call on IE\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n    if ( !jQuery.support.hrefNormalized ) {\n        jQuery.each([ \"href\", \"src\", \"width\", \"height\" ], function( i, name ) {\n            jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {\n                get: function( elem ) {\n                    var ret = elem.getAttribute( name, 2 );\n                    return ret == null ? undefined : ret;\n                }\n            });\n        });\n\n        // href/src property should get the full normalized URL (#10299/#12915)\n        jQuery.each([ \"href\", \"src\" ], function( i, name ) {\n            jQuery.propHooks[ name ] = {\n                get: function( elem ) {\n                    return elem.getAttribute( name, 4 );\n                }\n            };\n        });\n    }\n\n    if ( !jQuery.support.style ) {\n        jQuery.attrHooks.style = {\n            get: function( elem ) {\n                // Return undefined in the case of empty string\n                // Note: IE uppercases css property names, but if we were to .toLowerCase()\n                // .cssText, that would destroy case senstitivity in URL's, like in \"background\"\n                return elem.style.cssText || undefined;\n            },\n            set: function( elem, value ) {\n                return ( elem.style.cssText = value + \"\" );\n            }\n        };\n    }\n\n// Safari mis-reports the default selected property of an option\n// Accessing the parent's selectedIndex property fixes it\n    if ( !jQuery.support.optSelected ) {\n        jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {\n            get: function( elem ) {\n                var parent = elem.parentNode;\n\n                if ( parent ) {\n                    parent.selectedIndex;\n\n                    // Make sure that it also works with optgroups, see #5701\n                    if ( parent.parentNode ) {\n                        parent.parentNode.selectedIndex;\n                    }\n                }\n                return null;\n            }\n        });\n    }\n\n// IE6/7 call enctype encoding\n    if ( !jQuery.support.enctype ) {\n        jQuery.propFix.enctype = \"encoding\";\n    }\n\n// Radios and checkboxes getter/setter\n    if ( !jQuery.support.checkOn ) {\n        jQuery.each([ \"radio\", \"checkbox\" ], function() {\n            jQuery.valHooks[ this ] = {\n                get: function( elem ) {\n                    // Handle the case where in Webkit \"\" is returned instead of \"on\" if a value isn't specified\n                    return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n                }\n            };\n        });\n    }\n    jQuery.each([ \"radio\", \"checkbox\" ], function() {\n        jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {\n            set: function( elem, value ) {\n                if ( jQuery.isArray( value ) ) {\n                    return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );\n                }\n            }\n        });\n    });\n    var rformElems = /^(?:input|select|textarea)$/i,\n        rkeyEvent = /^key/,\n        rmouseEvent = /^(?:mouse|contextmenu)|click/,\n        rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n        rtypenamespace = /^([^.]*)(?:\\.(.+)|)$/;\n\n    function returnTrue() {\n        return true;\n    }\n\n    function returnFalse() {\n        return false;\n    }\n\n    /*\n     * Helper functions for managing events -- not part of the public interface.\n     * Props to Dean Edwards' addEvent library for many of the ideas.\n     */\n    jQuery.event = {\n\n        global: {},\n\n        add: function( elem, types, handler, data, selector ) {\n            var tmp, events, t, handleObjIn,\n                special, eventHandle, handleObj,\n                handlers, type, namespaces, origType,\n                elemData = jQuery._data( elem );\n\n            // Don't attach events to noData or text/comment nodes (but allow plain objects)\n            if ( !elemData ) {\n                return;\n            }\n\n            // Caller can pass in an object of custom data in lieu of the handler\n            if ( handler.handler ) {\n                handleObjIn = handler;\n                handler = handleObjIn.handler;\n                selector = handleObjIn.selector;\n            }\n\n            // Make sure that the handler has a unique ID, used to find/remove it later\n            if ( !handler.guid ) {\n                handler.guid = jQuery.guid++;\n            }\n\n            // Init the element's event structure and main handler, if this is the first\n            if ( !(events = elemData.events) ) {\n                events = elemData.events = {};\n            }\n            if ( !(eventHandle = elemData.handle) ) {\n                eventHandle = elemData.handle = function( e ) {\n                    // Discard the second event of a jQuery.event.trigger() and\n                    // when an event is called after a page has unloaded\n                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?\n                        jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :\n                        undefined;\n                };\n                // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events\n                eventHandle.elem = elem;\n            }\n\n            // Handle multiple events separated by a space\n            // jQuery(...).bind(\"mouseover mouseout\", fn);\n            types = ( types || \"\" ).match( core_rnotwhite ) || [\"\"];\n            t = types.length;\n            while ( t-- ) {\n                tmp = rtypenamespace.exec( types[t] ) || [];\n                type = origType = tmp[1];\n                namespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\n\n                // If event changes its type, use the special event handlers for the changed type\n                special = jQuery.event.special[ type ] || {};\n\n                // If selector defined, determine special event api type, otherwise given type\n                type = ( selector ? special.delegateType : special.bindType ) || type;\n\n                // Update special based on newly reset type\n                special = jQuery.event.special[ type ] || {};\n\n                // handleObj is passed to all event handlers\n                handleObj = jQuery.extend({\n                    type: type,\n                    origType: origType,\n                    data: data,\n                    handler: handler,\n                    guid: handler.guid,\n                    selector: selector,\n                    needsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n                    namespace: namespaces.join(\".\")\n                }, handleObjIn );\n\n                // Init the event handler queue if we're the first\n                if ( !(handlers = events[ type ]) ) {\n                    handlers = events[ type ] = [];\n                    handlers.delegateCount = 0;\n\n                    // Only use addEventListener/attachEvent if the special events handler returns false\n                    if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n                        // Bind the global event handler to the element\n                        if ( elem.addEventListener ) {\n                            elem.addEventListener( type, eventHandle, false );\n\n                        } else if ( elem.attachEvent ) {\n                            elem.attachEvent( \"on\" + type, eventHandle );\n                        }\n                    }\n                }\n\n                if ( special.add ) {\n                    special.add.call( elem, handleObj );\n\n                    if ( !handleObj.handler.guid ) {\n                        handleObj.handler.guid = handler.guid;\n                    }\n                }\n\n                // Add to the element's handler list, delegates in front\n                if ( selector ) {\n                    handlers.splice( handlers.delegateCount++, 0, handleObj );\n                } else {\n                    handlers.push( handleObj );\n                }\n\n                // Keep track of which events have ever been used, for event optimization\n                jQuery.event.global[ type ] = true;\n            }\n\n            // Nullify elem to prevent memory leaks in IE\n            elem = null;\n        },\n\n        // Detach an event or set of events from an element\n        remove: function( elem, types, handler, selector, mappedTypes ) {\n            var j, handleObj, tmp,\n                origCount, t, events,\n                special, handlers, type,\n                namespaces, origType,\n                elemData = jQuery.hasData( elem ) && jQuery._data( elem );\n\n            if ( !elemData || !(events = elemData.events) ) {\n                return;\n            }\n\n            // Once for each type.namespace in types; type may be omitted\n            types = ( types || \"\" ).match( core_rnotwhite ) || [\"\"];\n            t = types.length;\n            while ( t-- ) {\n                tmp = rtypenamespace.exec( types[t] ) || [];\n                type = origType = tmp[1];\n                namespaces = ( tmp[2] || \"\" ).split( \".\" ).sort();\n\n                // Unbind all events (on this namespace, if provided) for the element\n                if ( !type ) {\n                    for ( type in events ) {\n                        jQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n                    }\n                    continue;\n                }\n\n                special = jQuery.event.special[ type ] || {};\n                type = ( selector ? special.delegateType : special.bindType ) || type;\n                handlers = events[ type ] || [];\n                tmp = tmp[2] && new RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" );\n\n                // Remove matching events\n                origCount = j = handlers.length;\n                while ( j-- ) {\n                    handleObj = handlers[ j ];\n\n                    if ( ( mappedTypes || origType === handleObj.origType ) &&\n                        ( !handler || handler.guid === handleObj.guid ) &&\n                        ( !tmp || tmp.test( handleObj.namespace ) ) &&\n                        ( !selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector ) ) {\n                        handlers.splice( j, 1 );\n\n                        if ( handleObj.selector ) {\n                            handlers.delegateCount--;\n                        }\n                        if ( special.remove ) {\n                            special.remove.call( elem, handleObj );\n                        }\n                    }\n                }\n\n                // Remove generic event handler if we removed something and no more handlers exist\n                // (avoids potential for endless recursion during removal of special event handlers)\n                if ( origCount && !handlers.length ) {\n                    if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n                        jQuery.removeEvent( elem, type, elemData.handle );\n                    }\n\n                    delete events[ type ];\n                }\n            }\n\n            // Remove the expando if it's no longer used\n            if ( jQuery.isEmptyObject( events ) ) {\n                delete elemData.handle;\n\n                // removeData also checks for emptiness and clears the expando if empty\n                // so use it instead of delete\n                jQuery._removeData( elem, \"events\" );\n            }\n        },\n\n        trigger: function( event, data, elem, onlyHandlers ) {\n            var handle, ontype, cur,\n                bubbleType, special, tmp, i,\n                eventPath = [ elem || document ],\n                type = core_hasOwn.call( event, \"type\" ) ? event.type : event,\n                namespaces = core_hasOwn.call( event, \"namespace\" ) ? event.namespace.split(\".\") : [];\n\n            cur = tmp = elem = elem || document;\n\n            // Don't do events on text and comment nodes\n            if ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n                return;\n            }\n\n            // focus/blur morphs to focusin/out; ensure we're not firing them right now\n            if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n                return;\n            }\n\n            if ( type.indexOf(\".\") >= 0 ) {\n                // Namespaced trigger; create a regexp to match event type in handle()\n                namespaces = type.split(\".\");\n                type = namespaces.shift();\n                namespaces.sort();\n            }\n            ontype = type.indexOf(\":\") < 0 && \"on\" + type;\n\n            // Caller can pass in a jQuery.Event object, Object, or just an event type string\n            event = event[ jQuery.expando ] ?\n                event :\n                new jQuery.Event( type, typeof event === \"object\" && event );\n\n            event.isTrigger = true;\n            event.namespace = namespaces.join(\".\");\n            event.namespace_re = event.namespace ?\n                new RegExp( \"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\" ) :\n                null;\n\n            // Clean up the event in case it is being reused\n            event.result = undefined;\n            if ( !event.target ) {\n                event.target = elem;\n            }\n\n            // Clone any incoming data and prepend the event, creating the handler arg list\n            data = data == null ?\n                [ event ] :\n                jQuery.makeArray( data, [ event ] );\n\n            // Allow special events to draw outside the lines\n            special = jQuery.event.special[ type ] || {};\n            if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n                return;\n            }\n\n            // Determine event propagation path in advance, per W3C events spec (#9951)\n            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n            if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n                bubbleType = special.delegateType || type;\n                if ( !rfocusMorph.test( bubbleType + type ) ) {\n                    cur = cur.parentNode;\n                }\n                for ( ; cur; cur = cur.parentNode ) {\n                    eventPath.push( cur );\n                    tmp = cur;\n                }\n\n                // Only add window if we got to document (e.g., not plain obj or detached DOM)\n                if ( tmp === (elem.ownerDocument || document) ) {\n                    eventPath.push( tmp.defaultView || tmp.parentWindow || window );\n                }\n            }\n\n            // Fire handlers on the event path\n            i = 0;\n            while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {\n\n                event.type = i > 1 ?\n                    bubbleType :\n                    special.bindType || type;\n\n                // jQuery handler\n                handle = ( jQuery._data( cur, \"events\" ) || {} )[ event.type ] && jQuery._data( cur, \"handle\" );\n                if ( handle ) {\n                    handle.apply( cur, data );\n                }\n\n                // Native handler\n                handle = ontype && cur[ ontype ];\n                if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {\n                    event.preventDefault();\n                }\n            }\n            event.type = type;\n\n            // If nobody prevented the default action, do it now\n            if ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n                if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&\n                    !(type === \"click\" && jQuery.nodeName( elem, \"a\" )) && jQuery.acceptData( elem ) ) {\n\n                    // Call a native DOM method on the target with the same name name as the event.\n                    // Can't use an .isFunction() check here because IE6/7 fails that test.\n                    // Don't do default actions on window, that's where global variables be (#6170)\n                    if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {\n\n                        // Don't re-trigger an onFOO event when we call its FOO() method\n                        tmp = elem[ ontype ];\n\n                        if ( tmp ) {\n                            elem[ ontype ] = null;\n                        }\n\n                        // Prevent re-triggering of the same event, since we already bubbled it above\n                        jQuery.event.triggered = type;\n                        try {\n                            elem[ type ]();\n                        } catch ( e ) {\n                            // IE<9 dies on focus/blur to hidden element (#1486,#12518)\n                            // only reproducible on winXP IE8 native, not IE9 in IE8 mode\n                        }\n                        jQuery.event.triggered = undefined;\n\n                        if ( tmp ) {\n                            elem[ ontype ] = tmp;\n                        }\n                    }\n                }\n            }\n\n            return event.result;\n        },\n\n        dispatch: function( event ) {\n\n            // Make a writable jQuery.Event from the native event object\n            event = jQuery.event.fix( event );\n\n            var i, ret, handleObj, matched, j,\n                handlerQueue = [],\n                args = core_slice.call( arguments ),\n                handlers = ( jQuery._data( this, \"events\" ) || {} )[ event.type ] || [],\n                special = jQuery.event.special[ event.type ] || {};\n\n            // Use the fix-ed jQuery.Event rather than the (read-only) native event\n            args[0] = event;\n            event.delegateTarget = this;\n\n            // Call the preDispatch hook for the mapped type, and let it bail if desired\n            if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n                return;\n            }\n\n            // Determine handlers\n            handlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n            // Run delegates first; they may want to stop propagation beneath us\n            i = 0;\n            while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {\n                event.currentTarget = matched.elem;\n\n                j = 0;\n                while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {\n\n                    // Triggered event must either 1) have no namespace, or\n                    // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).\n                    if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {\n\n                        event.handleObj = handleObj;\n                        event.data = handleObj.data;\n\n                        ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )\n                            .apply( matched.elem, args );\n\n                        if ( ret !== undefined ) {\n                            if ( (event.result = ret) === false ) {\n                                event.preventDefault();\n                                event.stopPropagation();\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Call the postDispatch hook for the mapped type\n            if ( special.postDispatch ) {\n                special.postDispatch.call( this, event );\n            }\n\n            return event.result;\n        },\n\n        handlers: function( event, handlers ) {\n            var sel, handleObj, matches, i,\n                handlerQueue = [],\n                delegateCount = handlers.delegateCount,\n                cur = event.target;\n\n            // Find delegate handlers\n            // Black-hole SVG <use> instance trees (#13180)\n            // Avoid non-left-click bubbling in Firefox (#3861)\n            if ( delegateCount && cur.nodeType && (!event.button || event.type !== \"click\") ) {\n\n                for ( ; cur != this; cur = cur.parentNode || this ) {\n\n                    // Don't check non-elements (#13208)\n                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n                    if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== \"click\") ) {\n                        matches = [];\n                        for ( i = 0; i < delegateCount; i++ ) {\n                            handleObj = handlers[ i ];\n\n                            // Don't conflict with Object.prototype properties (#13203)\n                            sel = handleObj.selector + \" \";\n\n                            if ( matches[ sel ] === undefined ) {\n                                matches[ sel ] = handleObj.needsContext ?\n                                    jQuery( sel, this ).index( cur ) >= 0 :\n                                    jQuery.find( sel, this, null, [ cur ] ).length;\n                            }\n                            if ( matches[ sel ] ) {\n                                matches.push( handleObj );\n                            }\n                        }\n                        if ( matches.length ) {\n                            handlerQueue.push({ elem: cur, handlers: matches });\n                        }\n                    }\n                }\n            }\n\n            // Add the remaining (directly-bound) handlers\n            if ( delegateCount < handlers.length ) {\n                handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });\n            }\n\n            return handlerQueue;\n        },\n\n        fix: function( event ) {\n            if ( event[ jQuery.expando ] ) {\n                return event;\n            }\n\n            // Create a writable copy of the event object and normalize some properties\n            var i, prop, copy,\n                type = event.type,\n                originalEvent = event,\n                fixHook = this.fixHooks[ type ];\n\n            if ( !fixHook ) {\n                this.fixHooks[ type ] = fixHook =\n                    rmouseEvent.test( type ) ? this.mouseHooks :\n                        rkeyEvent.test( type ) ? this.keyHooks :\n                        {};\n            }\n            copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n            event = new jQuery.Event( originalEvent );\n\n            i = copy.length;\n            while ( i-- ) {\n                prop = copy[ i ];\n                event[ prop ] = originalEvent[ prop ];\n            }\n\n            // Support: IE<9\n            // Fix target property (#1925)\n            if ( !event.target ) {\n                event.target = originalEvent.srcElement || document;\n            }\n\n            // Support: Chrome 23+, Safari?\n            // Target should not be a text node (#504, #13143)\n            if ( event.target.nodeType === 3 ) {\n                event.target = event.target.parentNode;\n            }\n\n            // Support: IE<9\n            // For mouse/key events, metaKey==false if it's undefined (#3368, #11328)\n            event.metaKey = !!event.metaKey;\n\n            return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n        },\n\n        // Includes some event props shared by KeyEvent and MouseEvent\n        props: \"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),\n\n        fixHooks: {},\n\n        keyHooks: {\n            props: \"char charCode key keyCode\".split(\" \"),\n            filter: function( event, original ) {\n\n                // Add which for key events\n                if ( event.which == null ) {\n                    event.which = original.charCode != null ? original.charCode : original.keyCode;\n                }\n\n                return event;\n            }\n        },\n\n        mouseHooks: {\n            props: \"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),\n            filter: function( event, original ) {\n                var body, eventDoc, doc,\n                    button = original.button,\n                    fromElement = original.fromElement;\n\n                // Calculate pageX/Y if missing and clientX/Y available\n                if ( event.pageX == null && original.clientX != null ) {\n                    eventDoc = event.target.ownerDocument || document;\n                    doc = eventDoc.documentElement;\n                    body = eventDoc.body;\n\n                    event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );\n                    event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );\n                }\n\n                // Add relatedTarget, if necessary\n                if ( !event.relatedTarget && fromElement ) {\n                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;\n                }\n\n                // Add which for click: 1 === left; 2 === middle; 3 === right\n                // Note: button is not normalized, so don't use it\n                if ( !event.which && button !== undefined ) {\n                    event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n                }\n\n                return event;\n            }\n        },\n\n        special: {\n            load: {\n                // Prevent triggered image.load events from bubbling to window.load\n                noBubble: true\n            },\n            click: {\n                // For checkbox, fire native event so checked state will be right\n                trigger: function() {\n                    if ( jQuery.nodeName( this, \"input\" ) && this.type === \"checkbox\" && this.click ) {\n                        this.click();\n                        return false;\n                    }\n                }\n            },\n            focus: {\n                // Fire native event if possible so blur/focus sequence is correct\n                trigger: function() {\n                    if ( this !== document.activeElement && this.focus ) {\n                        try {\n                            this.focus();\n                            return false;\n                        } catch ( e ) {\n                            // Support: IE<9\n                            // If we error on focus to hidden element (#1486, #12518),\n                            // let .trigger() run the handlers\n                        }\n                    }\n                },\n                delegateType: \"focusin\"\n            },\n            blur: {\n                trigger: function() {\n                    if ( this === document.activeElement && this.blur ) {\n                        this.blur();\n                        return false;\n                    }\n                },\n                delegateType: \"focusout\"\n            },\n\n            beforeunload: {\n                postDispatch: function( event ) {\n\n                    // Even when returnValue equals to undefined Firefox will still show alert\n                    if ( event.result !== undefined ) {\n                        event.originalEvent.returnValue = event.result;\n                    }\n                }\n            }\n        },\n\n        simulate: function( type, elem, event, bubble ) {\n            // Piggyback on a donor event to simulate a different one.\n            // Fake originalEvent to avoid donor's stopPropagation, but if the\n            // simulated event prevents default then we do the same on the donor.\n            var e = jQuery.extend(\n                new jQuery.Event(),\n                event,\n                { type: type,\n                    isSimulated: true,\n                    originalEvent: {}\n                }\n            );\n            if ( bubble ) {\n                jQuery.event.trigger( e, null, elem );\n            } else {\n                jQuery.event.dispatch.call( elem, e );\n            }\n            if ( e.isDefaultPrevented() ) {\n                event.preventDefault();\n            }\n        }\n    };\n\n    jQuery.removeEvent = document.removeEventListener ?\n        function( elem, type, handle ) {\n            if ( elem.removeEventListener ) {\n                elem.removeEventListener( type, handle, false );\n            }\n        } :\n        function( elem, type, handle ) {\n            var name = \"on\" + type;\n\n            if ( elem.detachEvent ) {\n\n                // #8545, #7054, preventing memory leaks for custom events in IE6-8\n                // detachEvent needed property on element, by name of that event, to properly expose it to GC\n                if ( typeof elem[ name ] === core_strundefined ) {\n                    elem[ name ] = null;\n                }\n\n                elem.detachEvent( name, handle );\n            }\n        };\n\n    jQuery.Event = function( src, props ) {\n        // Allow instantiation without the 'new' keyword\n        if ( !(this instanceof jQuery.Event) ) {\n            return new jQuery.Event( src, props );\n        }\n\n        // Event object\n        if ( src && src.type ) {\n            this.originalEvent = src;\n            this.type = src.type;\n\n            // Events bubbling up the document may have been marked as prevented\n            // by a handler lower down the tree; reflect the correct value.\n            this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||\n                src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;\n\n            // Event type\n        } else {\n            this.type = src;\n        }\n\n        // Put explicitly provided properties onto the event object\n        if ( props ) {\n            jQuery.extend( this, props );\n        }\n\n        // Create a timestamp if incoming event doesn't have one\n        this.timeStamp = src && src.timeStamp || jQuery.now();\n\n        // Mark it as fixed\n        this[ jQuery.expando ] = true;\n    };\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n    jQuery.Event.prototype = {\n        isDefaultPrevented: returnFalse,\n        isPropagationStopped: returnFalse,\n        isImmediatePropagationStopped: returnFalse,\n\n        preventDefault: function() {\n            var e = this.originalEvent;\n\n            this.isDefaultPrevented = returnTrue;\n            if ( !e ) {\n                return;\n            }\n\n            // If preventDefault exists, run it on the original event\n            if ( e.preventDefault ) {\n                e.preventDefault();\n\n                // Support: IE\n                // Otherwise set the returnValue property of the original event to false\n            } else {\n                e.returnValue = false;\n            }\n        },\n        stopPropagation: function() {\n            var e = this.originalEvent;\n\n            this.isPropagationStopped = returnTrue;\n            if ( !e ) {\n                return;\n            }\n            // If stopPropagation exists, run it on the original event\n            if ( e.stopPropagation ) {\n                e.stopPropagation();\n            }\n\n            // Support: IE\n            // Set the cancelBubble property of the original event to true\n            e.cancelBubble = true;\n        },\n        stopImmediatePropagation: function() {\n            this.isImmediatePropagationStopped = returnTrue;\n            this.stopPropagation();\n        }\n    };\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n    jQuery.each({\n        mouseenter: \"mouseover\",\n        mouseleave: \"mouseout\"\n    }, function( orig, fix ) {\n        jQuery.event.special[ orig ] = {\n            delegateType: fix,\n            bindType: fix,\n\n            handle: function( event ) {\n                var ret,\n                    target = this,\n                    related = event.relatedTarget,\n                    handleObj = event.handleObj;\n\n                // For mousenter/leave call the handler if related is outside the target.\n                // NB: No relatedTarget if the mouse left/entered the browser window\n                if ( !related || (related !== target && !jQuery.contains( target, related )) ) {\n                    event.type = handleObj.origType;\n                    ret = handleObj.handler.apply( this, arguments );\n                    event.type = fix;\n                }\n                return ret;\n            }\n        };\n    });\n\n// IE submit delegation\n    if ( !jQuery.support.submitBubbles ) {\n\n        jQuery.event.special.submit = {\n            setup: function() {\n                // Only need this for delegated form submit events\n                if ( jQuery.nodeName( this, \"form\" ) ) {\n                    return false;\n                }\n\n                // Lazy-add a submit handler when a descendant form may potentially be submitted\n                jQuery.event.add( this, \"click._submit keypress._submit\", function( e ) {\n                    // Node name check avoids a VML-related crash in IE (#9807)\n                    var elem = e.target,\n                        form = jQuery.nodeName( elem, \"input\" ) || jQuery.nodeName( elem, \"button\" ) ? elem.form : undefined;\n                    if ( form && !jQuery._data( form, \"submitBubbles\" ) ) {\n                        jQuery.event.add( form, \"submit._submit\", function( event ) {\n                            event._submit_bubble = true;\n                        });\n                        jQuery._data( form, \"submitBubbles\", true );\n                    }\n                });\n                // return undefined since we don't need an event listener\n            },\n\n            postDispatch: function( event ) {\n                // If form was submitted by the user, bubble the event up the tree\n                if ( event._submit_bubble ) {\n                    delete event._submit_bubble;\n                    if ( this.parentNode && !event.isTrigger ) {\n                        jQuery.event.simulate( \"submit\", this.parentNode, event, true );\n                    }\n                }\n            },\n\n            teardown: function() {\n                // Only need this for delegated form submit events\n                if ( jQuery.nodeName( this, \"form\" ) ) {\n                    return false;\n                }\n\n                // Remove delegated handlers; cleanData eventually reaps submit handlers attached above\n                jQuery.event.remove( this, \"._submit\" );\n            }\n        };\n    }\n\n// IE change delegation and checkbox/radio fix\n    if ( !jQuery.support.changeBubbles ) {\n\n        jQuery.event.special.change = {\n\n            setup: function() {\n\n                if ( rformElems.test( this.nodeName ) ) {\n                    // IE doesn't fire change on a check/radio until blur; trigger it on click\n                    // after a propertychange. Eat the blur-change in special.change.handle.\n                    // This still fires onchange a second time for check/radio after blur.\n                    if ( this.type === \"checkbox\" || this.type === \"radio\" ) {\n                        jQuery.event.add( this, \"propertychange._change\", function( event ) {\n                            if ( event.originalEvent.propertyName === \"checked\" ) {\n                                this._just_changed = true;\n                            }\n                        });\n                        jQuery.event.add( this, \"click._change\", function( event ) {\n                            if ( this._just_changed && !event.isTrigger ) {\n                                this._just_changed = false;\n                            }\n                            // Allow triggered, simulated change events (#11500)\n                            jQuery.event.simulate( \"change\", this, event, true );\n                        });\n                    }\n                    return false;\n                }\n                // Delegated event; lazy-add a change handler on descendant inputs\n                jQuery.event.add( this, \"beforeactivate._change\", function( e ) {\n                    var elem = e.target;\n\n                    if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, \"changeBubbles\" ) ) {\n                        jQuery.event.add( elem, \"change._change\", function( event ) {\n                            if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {\n                                jQuery.event.simulate( \"change\", this.parentNode, event, true );\n                            }\n                        });\n                        jQuery._data( elem, \"changeBubbles\", true );\n                    }\n                });\n            },\n\n            handle: function( event ) {\n                var elem = event.target;\n\n                // Swallow native change events from checkbox/radio, we already triggered them above\n                if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== \"radio\" && elem.type !== \"checkbox\") ) {\n                    return event.handleObj.handler.apply( this, arguments );\n                }\n            },\n\n            teardown: function() {\n                jQuery.event.remove( this, \"._change\" );\n\n                return !rformElems.test( this.nodeName );\n            }\n        };\n    }\n\n// Create \"bubbling\" focus and blur events\n    if ( !jQuery.support.focusinBubbles ) {\n        jQuery.each({ focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n            // Attach a single capturing handler while someone wants focusin/focusout\n            var attaches = 0,\n                handler = function( event ) {\n                    jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );\n                };\n\n            jQuery.event.special[ fix ] = {\n                setup: function() {\n                    if ( attaches++ === 0 ) {\n                        document.addEventListener( orig, handler, true );\n                    }\n                },\n                teardown: function() {\n                    if ( --attaches === 0 ) {\n                        document.removeEventListener( orig, handler, true );\n                    }\n                }\n            };\n        });\n    }\n\n    jQuery.fn.extend({\n\n        on: function( types, selector, data, fn, /*INTERNAL*/ one ) {\n            var type, origFn;\n\n            // Types can be a map of types/handlers\n            if ( typeof types === \"object\" ) {\n                // ( types-Object, selector, data )\n                if ( typeof selector !== \"string\" ) {\n                    // ( types-Object, data )\n                    data = data || selector;\n                    selector = undefined;\n                }\n                for ( type in types ) {\n                    this.on( type, selector, data, types[ type ], one );\n                }\n                return this;\n            }\n\n            if ( data == null && fn == null ) {\n                // ( types, fn )\n                fn = selector;\n                data = selector = undefined;\n            } else if ( fn == null ) {\n                if ( typeof selector === \"string\" ) {\n                    // ( types, selector, fn )\n                    fn = data;\n                    data = undefined;\n                } else {\n                    // ( types, data, fn )\n                    fn = data;\n                    data = selector;\n                    selector = undefined;\n                }\n            }\n            if ( fn === false ) {\n                fn = returnFalse;\n            } else if ( !fn ) {\n                return this;\n            }\n\n            if ( one === 1 ) {\n                origFn = fn;\n                fn = function( event ) {\n                    // Can use an empty set, since event contains the info\n                    jQuery().off( event );\n                    return origFn.apply( this, arguments );\n                };\n                // Use same guid so caller can remove using origFn\n                fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n            }\n            return this.each( function() {\n                jQuery.event.add( this, types, fn, data, selector );\n            });\n        },\n        one: function( types, selector, data, fn ) {\n            return this.on( types, selector, data, fn, 1 );\n        },\n        off: function( types, selector, fn ) {\n            var handleObj, type;\n            if ( types && types.preventDefault && types.handleObj ) {\n                // ( event )  dispatched jQuery.Event\n                handleObj = types.handleObj;\n                jQuery( types.delegateTarget ).off(\n                    handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType,\n                    handleObj.selector,\n                    handleObj.handler\n                );\n                return this;\n            }\n            if ( typeof types === \"object\" ) {\n                // ( types-object [, selector] )\n                for ( type in types ) {\n                    this.off( type, selector, types[ type ] );\n                }\n                return this;\n            }\n            if ( selector === false || typeof selector === \"function\" ) {\n                // ( types [, fn] )\n                fn = selector;\n                selector = undefined;\n            }\n            if ( fn === false ) {\n                fn = returnFalse;\n            }\n            return this.each(function() {\n                jQuery.event.remove( this, types, fn, selector );\n            });\n        },\n\n        bind: function( types, data, fn ) {\n            return this.on( types, null, data, fn );\n        },\n        unbind: function( types, fn ) {\n            return this.off( types, null, fn );\n        },\n\n        delegate: function( selector, types, data, fn ) {\n            return this.on( types, selector, data, fn );\n        },\n        undelegate: function( selector, types, fn ) {\n            // ( namespace ) or ( selector, types [, fn] )\n            return arguments.length === 1 ? this.off( selector, \"**\" ) : this.off( types, selector || \"**\", fn );\n        },\n\n        trigger: function( type, data ) {\n            return this.each(function() {\n                jQuery.event.trigger( type, data, this );\n            });\n        },\n        triggerHandler: function( type, data ) {\n            var elem = this[0];\n            if ( elem ) {\n                return jQuery.event.trigger( type, data, elem, true );\n            }\n        }\n    });\n    /*!\n     * Sizzle CSS Selector Engine\n     * Copyright 2012 jQuery Foundation and other contributors\n     * Released under the MIT license\n     * http://sizzlejs.com/\n     */\n    (function( window, undefined ) {\n\n        var i,\n            cachedruns,\n            Expr,\n            getText,\n            isXML,\n            compile,\n            hasDuplicate,\n            outermostContext,\n\n        // Local document vars\n            setDocument,\n            document,\n            docElem,\n            documentIsXML,\n            rbuggyQSA,\n            rbuggyMatches,\n            matches,\n            contains,\n            sortOrder,\n\n        // Instance-specific data\n            expando = \"sizzle\" + -(new Date()),\n            preferredDoc = window.document,\n            support = {},\n            dirruns = 0,\n            done = 0,\n            classCache = createCache(),\n            tokenCache = createCache(),\n            compilerCache = createCache(),\n\n        // General-purpose constants\n            strundefined = typeof undefined,\n            MAX_NEGATIVE = 1 << 31,\n\n        // Array methods\n            arr = [],\n            pop = arr.pop,\n            push = arr.push,\n            slice = arr.slice,\n        // Use a stripped-down indexOf if we can't use a native one\n            indexOf = arr.indexOf || function( elem ) {\n                var i = 0,\n                    len = this.length;\n                for ( ; i < len; i++ ) {\n                    if ( this[i] === elem ) {\n                        return i;\n                    }\n                }\n                return -1;\n            },\n\n\n        // Regular expressions\n\n        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace\n            whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n        // http://www.w3.org/TR/css3-syntax/#characters\n            characterEncoding = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n        // Loosely modeled on CSS identifier characters\n        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors\n        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n            identifier = characterEncoding.replace( \"w\", \"w#\" ),\n\n        // Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors\n            operators = \"([*^$|!~]?=)\",\n            attributes = \"\\\\[\" + whitespace + \"*(\" + characterEncoding + \")\" + whitespace +\n                \"*(?:\" + operators + whitespace + \"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\" + identifier + \")|)|)\" + whitespace + \"*\\\\]\",\n\n        // Prefer arguments quoted,\n        //   then not containing pseudos/brackets,\n        //   then attribute selectors/non-parenthetical expressions,\n        //   then anything else\n        // These preferences are here to reduce the number of selectors\n        //   needing tokenize in the PSEUDO preFilter\n            pseudos = \":(\" + characterEncoding + \")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes.replace( 3, 8 ) + \")*)|.*)\\\\)|)\",\n\n        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n            rtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n            rcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n            rcombinators = new RegExp( \"^\" + whitespace + \"*([\\\\x20\\\\t\\\\r\\\\n\\\\f>+~])\" + whitespace + \"*\" ),\n            rpseudo = new RegExp( pseudos ),\n            ridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n            matchExpr = {\n                \"ID\": new RegExp( \"^#(\" + characterEncoding + \")\" ),\n                \"CLASS\": new RegExp( \"^\\\\.(\" + characterEncoding + \")\" ),\n                \"NAME\": new RegExp( \"^\\\\[name=['\\\"]?(\" + characterEncoding + \")['\\\"]?\\\\]\" ),\n                \"TAG\": new RegExp( \"^(\" + characterEncoding.replace( \"w\", \"w*\" ) + \")\" ),\n                \"ATTR\": new RegExp( \"^\" + attributes ),\n                \"PSEUDO\": new RegExp( \"^\" + pseudos ),\n                \"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n                    \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n                    \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n                // For use in libraries implementing .is()\n                // We use this for POS matching in `select`\n                \"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n                    whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n            },\n\n            rsibling = /[\\x20\\t\\r\\n\\f]*[+~]/,\n\n            rnative = /^[^{]+\\{\\s*\\[native code/,\n\n        // Easily-parseable/retrievable ID or TAG or CLASS selectors\n            rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n            rinputs = /^(?:input|select|textarea|button)$/i,\n            rheader = /^h\\d$/i,\n\n            rescape = /'|\\\\/g,\n            rattributeQuotes = /\\=[\\x20\\t\\r\\n\\f]*([^'\"\\]]*)[\\x20\\t\\r\\n\\f]*\\]/g,\n\n        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n            runescape = /\\\\([\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|.)/g,\n            funescape = function( _, escaped ) {\n                var high = \"0x\" + escaped - 0x10000;\n                // NaN means non-codepoint\n                return high !== high ?\n                    escaped :\n                    // BMP codepoint\n                    high < 0 ?\n                        String.fromCharCode( high + 0x10000 ) :\n                        // Supplemental Plane codepoint (surrogate pair)\n                        String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n            };\n\n// Use a stripped-down slice if we can't use a native one\n        try {\n            slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;\n        } catch ( e ) {\n            slice = function( i ) {\n                var elem,\n                    results = [];\n                while ( (elem = this[i++]) ) {\n                    results.push( elem );\n                }\n                return results;\n            };\n        }\n\n        /**\n         * For feature detection\n         * @param {Function} fn The function to test for native support\n         */\n        function isNative( fn ) {\n            return rnative.test( fn + \"\" );\n        }\n\n        /**\n         * Create key-value caches of limited size\n         * @returns {Function(string, Object)} Returns the Object data after storing it on itself with\n         *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n         *\tdeleting the oldest entry\n         */\n        function createCache() {\n            var cache,\n                keys = [];\n\n            return (cache = function( key, value ) {\n                // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n                if ( keys.push( key += \" \" ) > Expr.cacheLength ) {\n                    // Only keep the most recent entries\n                    delete cache[ keys.shift() ];\n                }\n                return (cache[ key ] = value);\n            });\n        }\n\n        /**\n         * Mark a function for special use by Sizzle\n         * @param {Function} fn The function to mark\n         */\n        function markFunction( fn ) {\n            fn[ expando ] = true;\n            return fn;\n        }\n\n        /**\n         * Support testing using an element\n         * @param {Function} fn Passed the created div and expects a boolean result\n         */\n        function assert( fn ) {\n            var div = document.createElement(\"div\");\n\n            try {\n                return fn( div );\n            } catch (e) {\n                return false;\n            } finally {\n                // release memory in IE\n                div = null;\n            }\n        }\n\n        function Sizzle( selector, context, results, seed ) {\n            var match, elem, m, nodeType,\n            // QSA vars\n                i, groups, old, nid, newContext, newSelector;\n\n            if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n                setDocument( context );\n            }\n\n            context = context || document;\n            results = results || [];\n\n            if ( !selector || typeof selector !== \"string\" ) {\n                return results;\n            }\n\n            if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {\n                return [];\n            }\n\n            if ( !documentIsXML && !seed ) {\n\n                // Shortcuts\n                if ( (match = rquickExpr.exec( selector )) ) {\n                    // Speed-up: Sizzle(\"#ID\")\n                    if ( (m = match[1]) ) {\n                        if ( nodeType === 9 ) {\n                            elem = context.getElementById( m );\n                            // Check parentNode to catch when Blackberry 4.6 returns\n                            // nodes that are no longer in the document #6963\n                            if ( elem && elem.parentNode ) {\n                                // Handle the case where IE, Opera, and Webkit return items\n                                // by name instead of ID\n                                if ( elem.id === m ) {\n                                    results.push( elem );\n                                    return results;\n                                }\n                            } else {\n                                return results;\n                            }\n                        } else {\n                            // Context is not a document\n                            if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&\n                                contains( context, elem ) && elem.id === m ) {\n                                results.push( elem );\n                                return results;\n                            }\n                        }\n\n                        // Speed-up: Sizzle(\"TAG\")\n                    } else if ( match[2] ) {\n                        push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );\n                        return results;\n\n                        // Speed-up: Sizzle(\".CLASS\")\n                    } else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {\n                        push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );\n                        return results;\n                    }\n                }\n\n                // QSA path\n                if ( support.qsa && !rbuggyQSA.test(selector) ) {\n                    old = true;\n                    nid = expando;\n                    newContext = context;\n                    newSelector = nodeType === 9 && selector;\n\n                    // qSA works strangely on Element-rooted queries\n                    // We can work around this by specifying an extra ID on the root\n                    // and working up from there (Thanks to Andrew Dupont for the technique)\n                    // IE 8 doesn't work on object elements\n                    if ( nodeType === 1 && context.nodeName.toLowerCase() !== \"object\" ) {\n                        groups = tokenize( selector );\n\n                        if ( (old = context.getAttribute(\"id\")) ) {\n                            nid = old.replace( rescape, \"\\\\$&\" );\n                        } else {\n                            context.setAttribute( \"id\", nid );\n                        }\n                        nid = \"[id='\" + nid + \"'] \";\n\n                        i = groups.length;\n                        while ( i-- ) {\n                            groups[i] = nid + toSelector( groups[i] );\n                        }\n                        newContext = rsibling.test( selector ) && context.parentNode || context;\n                        newSelector = groups.join(\",\");\n                    }\n\n                    if ( newSelector ) {\n                        try {\n                            push.apply( results, slice.call( newContext.querySelectorAll(\n                                newSelector\n                            ), 0 ) );\n                            return results;\n                        } catch(qsaError) {\n                        } finally {\n                            if ( !old ) {\n                                context.removeAttribute(\"id\");\n                            }\n                        }\n                    }\n                }\n            }\n\n            // All others\n            return select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n        }\n\n        /**\n         * Detect xml\n         * @param {Element|Object} elem An element or a document\n         */\n        isXML = Sizzle.isXML = function( elem ) {\n            // documentElement is verified for cases where it doesn't yet exist\n            // (such as loading iframes in IE - #4833)\n            var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n            return documentElement ? documentElement.nodeName !== \"HTML\" : false;\n        };\n\n        /**\n         * Sets document-related variables once based on the current document\n         * @param {Element|Object} [doc] An element or document object to use to set the document\n         * @returns {Object} Returns the current document\n         */\n        setDocument = Sizzle.setDocument = function( node ) {\n            var doc = node ? node.ownerDocument || node : preferredDoc;\n\n            // If no document and documentElement is available, return\n            if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n                return document;\n            }\n\n            // Set our document\n            document = doc;\n            docElem = doc.documentElement;\n\n            // Support tests\n            documentIsXML = isXML( doc );\n\n            // Check if getElementsByTagName(\"*\") returns only elements\n            support.tagNameNoComments = assert(function( div ) {\n                div.appendChild( doc.createComment(\"\") );\n                return !div.getElementsByTagName(\"*\").length;\n            });\n\n            // Check if attributes should be retrieved by attribute nodes\n            support.attributes = assert(function( div ) {\n                div.innerHTML = \"<select></select>\";\n                var type = typeof div.lastChild.getAttribute(\"multiple\");\n                // IE8 returns a string for some attributes even when not present\n                return type !== \"boolean\" && type !== \"string\";\n            });\n\n            // Check if getElementsByClassName can be trusted\n            support.getByClassName = assert(function( div ) {\n                // Opera can't find a second classname (in 9.6)\n                div.innerHTML = \"<div class='hidden e'></div><div class='hidden'></div>\";\n                if ( !div.getElementsByClassName || !div.getElementsByClassName(\"e\").length ) {\n                    return false;\n                }\n\n                // Safari 3.2 caches class attributes and doesn't catch changes\n                div.lastChild.className = \"e\";\n                return div.getElementsByClassName(\"e\").length === 2;\n            });\n\n            // Check if getElementById returns elements by name\n            // Check if getElementsByName privileges form controls or returns elements by ID\n            support.getByName = assert(function( div ) {\n                // Inject content\n                div.id = expando + 0;\n                div.innerHTML = \"<a name='\" + expando + \"'></a><div name='\" + expando + \"'></div>\";\n                docElem.insertBefore( div, docElem.firstChild );\n\n                // Test\n                var pass = doc.getElementsByName &&\n                    // buggy browsers will return fewer than the correct 2\n                    doc.getElementsByName( expando ).length === 2 +\n                        // buggy browsers will return more than the correct 0\n                        doc.getElementsByName( expando + 0 ).length;\n                support.getIdNotName = !doc.getElementById( expando );\n\n                // Cleanup\n                docElem.removeChild( div );\n\n                return pass;\n            });\n\n            // IE6/7 return modified attributes\n            Expr.attrHandle = assert(function( div ) {\n                div.innerHTML = \"<a href='#'></a>\";\n                return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&\n                    div.firstChild.getAttribute(\"href\") === \"#\";\n            }) ?\n            {} :\n            {\n                \"href\": function( elem ) {\n                    return elem.getAttribute( \"href\", 2 );\n                },\n                \"type\": function( elem ) {\n                    return elem.getAttribute(\"type\");\n                }\n            };\n\n            // ID find and filter\n            if ( support.getIdNotName ) {\n                Expr.find[\"ID\"] = function( id, context ) {\n                    if ( typeof context.getElementById !== strundefined && !documentIsXML ) {\n                        var m = context.getElementById( id );\n                        // Check parentNode to catch when Blackberry 4.6 returns\n                        // nodes that are no longer in the document #6963\n                        return m && m.parentNode ? [m] : [];\n                    }\n                };\n                Expr.filter[\"ID\"] = function( id ) {\n                    var attrId = id.replace( runescape, funescape );\n                    return function( elem ) {\n                        return elem.getAttribute(\"id\") === attrId;\n                    };\n                };\n            } else {\n                Expr.find[\"ID\"] = function( id, context ) {\n                    if ( typeof context.getElementById !== strundefined && !documentIsXML ) {\n                        var m = context.getElementById( id );\n\n                        return m ?\n                            m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode(\"id\").value === id ?\n                                [m] :\n                                undefined :\n                            [];\n                    }\n                };\n                Expr.filter[\"ID\"] =  function( id ) {\n                    var attrId = id.replace( runescape, funescape );\n                    return function( elem ) {\n                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode(\"id\");\n                        return node && node.value === attrId;\n                    };\n                };\n            }\n\n            // Tag\n            Expr.find[\"TAG\"] = support.tagNameNoComments ?\n                function( tag, context ) {\n                    if ( typeof context.getElementsByTagName !== strundefined ) {\n                        return context.getElementsByTagName( tag );\n                    }\n                } :\n                function( tag, context ) {\n                    var elem,\n                        tmp = [],\n                        i = 0,\n                        results = context.getElementsByTagName( tag );\n\n                    // Filter out possible comments\n                    if ( tag === \"*\" ) {\n                        while ( (elem = results[i++]) ) {\n                            if ( elem.nodeType === 1 ) {\n                                tmp.push( elem );\n                            }\n                        }\n\n                        return tmp;\n                    }\n                    return results;\n                };\n\n            // Name\n            Expr.find[\"NAME\"] = support.getByName && function( tag, context ) {\n                if ( typeof context.getElementsByName !== strundefined ) {\n                    return context.getElementsByName( name );\n                }\n            };\n\n            // Class\n            Expr.find[\"CLASS\"] = support.getByClassName && function( className, context ) {\n                if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {\n                    return context.getElementsByClassName( className );\n                }\n            };\n\n            // QSA and matchesSelector support\n\n            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n            rbuggyMatches = [];\n\n            // qSa(:focus) reports false when true (Chrome 21),\n            // no need to also add to buggyMatches since matches checks buggyQSA\n            // A support test would require too much code (would include document ready)\n            rbuggyQSA = [ \":focus\" ];\n\n            if ( (support.qsa = isNative(doc.querySelectorAll)) ) {\n                // Build QSA regex\n                // Regex strategy adopted from Diego Perini\n                assert(function( div ) {\n                    // Select is set to empty string on purpose\n                    // This is to test IE's treatment of not explictly\n                    // setting a boolean content attribute,\n                    // since its presence should be enough\n                    // http://bugs.jquery.com/ticket/12359\n                    div.innerHTML = \"<select><option selected=''></option></select>\";\n\n                    // IE8 - Some boolean attributes are not treated correctly\n                    if ( !div.querySelectorAll(\"[selected]\").length ) {\n                        rbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\" );\n                    }\n\n                    // Webkit/Opera - :checked should return selected option elements\n                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n                    // IE8 throws error here and will not see later tests\n                    if ( !div.querySelectorAll(\":checked\").length ) {\n                        rbuggyQSA.push(\":checked\");\n                    }\n                });\n\n                assert(function( div ) {\n\n                    // Opera 10-12/IE8 - ^= $= *= and empty values\n                    // Should not select anything\n                    div.innerHTML = \"<input type='hidden' i=''/>\";\n                    if ( div.querySelectorAll(\"[i^='']\").length ) {\n                        rbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:\\\"\\\"|'')\" );\n                    }\n\n                    // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n                    // IE8 throws error here and will not see later tests\n                    if ( !div.querySelectorAll(\":enabled\").length ) {\n                        rbuggyQSA.push( \":enabled\", \":disabled\" );\n                    }\n\n                    // Opera 10-11 does not throw on post-comma invalid pseudos\n                    div.querySelectorAll(\"*,:x\");\n                    rbuggyQSA.push(\",.*:\");\n                });\n            }\n\n            if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||\n                docElem.mozMatchesSelector ||\n                docElem.webkitMatchesSelector ||\n                docElem.oMatchesSelector ||\n                docElem.msMatchesSelector) )) ) {\n\n                assert(function( div ) {\n                    // Check to see if it's possible to do matchesSelector\n                    // on a disconnected node (IE 9)\n                    support.disconnectedMatch = matches.call( div, \"div\" );\n\n                    // This should fail with an exception\n                    // Gecko does not error, returns false instead\n                    matches.call( div, \"[s!='']:x\" );\n                    rbuggyMatches.push( \"!=\", pseudos );\n                });\n            }\n\n            rbuggyQSA = new RegExp( rbuggyQSA.join(\"|\") );\n            rbuggyMatches = new RegExp( rbuggyMatches.join(\"|\") );\n\n            // Element contains another\n            // Purposefully does not implement inclusive descendent\n            // As in, an element does not contain itself\n            contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?\n                function( a, b ) {\n                    var adown = a.nodeType === 9 ? a.documentElement : a,\n                        bup = b && b.parentNode;\n                    return a === bup || !!( bup && bup.nodeType === 1 && (\n                        adown.contains ?\n                            adown.contains( bup ) :\n                            a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n                        ));\n                } :\n                function( a, b ) {\n                    if ( b ) {\n                        while ( (b = b.parentNode) ) {\n                            if ( b === a ) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                };\n\n            // Document order sorting\n            sortOrder = docElem.compareDocumentPosition ?\n                function( a, b ) {\n                    var compare;\n\n                    if ( a === b ) {\n                        hasDuplicate = true;\n                        return 0;\n                    }\n\n                    if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {\n                        if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {\n                            if ( a === doc || contains( preferredDoc, a ) ) {\n                                return -1;\n                            }\n                            if ( b === doc || contains( preferredDoc, b ) ) {\n                                return 1;\n                            }\n                            return 0;\n                        }\n                        return compare & 4 ? -1 : 1;\n                    }\n\n                    return a.compareDocumentPosition ? -1 : 1;\n                } :\n                function( a, b ) {\n                    var cur,\n                        i = 0,\n                        aup = a.parentNode,\n                        bup = b.parentNode,\n                        ap = [ a ],\n                        bp = [ b ];\n\n                    // Exit early if the nodes are identical\n                    if ( a === b ) {\n                        hasDuplicate = true;\n                        return 0;\n\n                        // Parentless nodes are either documents or disconnected\n                    } else if ( !aup || !bup ) {\n                        return a === doc ? -1 :\n                            b === doc ? 1 :\n                                aup ? -1 :\n                                    bup ? 1 :\n                                        0;\n\n                        // If the nodes are siblings, we can do a quick check\n                    } else if ( aup === bup ) {\n                        return siblingCheck( a, b );\n                    }\n\n                    // Otherwise we need full lists of their ancestors for comparison\n                    cur = a;\n                    while ( (cur = cur.parentNode) ) {\n                        ap.unshift( cur );\n                    }\n                    cur = b;\n                    while ( (cur = cur.parentNode) ) {\n                        bp.unshift( cur );\n                    }\n\n                    // Walk down the tree looking for a discrepancy\n                    while ( ap[i] === bp[i] ) {\n                        i++;\n                    }\n\n                    return i ?\n                        // Do a sibling check if the nodes have a common ancestor\n                        siblingCheck( ap[i], bp[i] ) :\n\n                        // Otherwise nodes in our document sort first\n                        ap[i] === preferredDoc ? -1 :\n                            bp[i] === preferredDoc ? 1 :\n                                0;\n                };\n\n            // Always assume the presence of duplicates if sort doesn't\n            // pass them to our comparison function (as in Google Chrome).\n            hasDuplicate = false;\n            [0, 0].sort( sortOrder );\n            support.detectDuplicates = hasDuplicate;\n\n            return document;\n        };\n\n        Sizzle.matches = function( expr, elements ) {\n            return Sizzle( expr, null, null, elements );\n        };\n\n        Sizzle.matchesSelector = function( elem, expr ) {\n            // Set document vars if needed\n            if ( ( elem.ownerDocument || elem ) !== document ) {\n                setDocument( elem );\n            }\n\n            // Make sure that attribute selectors are quoted\n            expr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n            // rbuggyQSA always contains :focus, so no need for an existence check\n            if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {\n                try {\n                    var ret = matches.call( elem, expr );\n\n                    // IE 9's matchesSelector returns false on disconnected nodes\n                    if ( ret || support.disconnectedMatch ||\n                        // As well, disconnected nodes are said to be in a document\n                        // fragment in IE 9\n                        elem.document && elem.document.nodeType !== 11 ) {\n                        return ret;\n                    }\n                } catch(e) {}\n            }\n\n            return Sizzle( expr, document, null, [elem] ).length > 0;\n        };\n\n        Sizzle.contains = function( context, elem ) {\n            // Set document vars if needed\n            if ( ( context.ownerDocument || context ) !== document ) {\n                setDocument( context );\n            }\n            return contains( context, elem );\n        };\n\n        Sizzle.attr = function( elem, name ) {\n            var val;\n\n            // Set document vars if needed\n            if ( ( elem.ownerDocument || elem ) !== document ) {\n                setDocument( elem );\n            }\n\n            if ( !documentIsXML ) {\n                name = name.toLowerCase();\n            }\n            if ( (val = Expr.attrHandle[ name ]) ) {\n                return val( elem );\n            }\n            if ( documentIsXML || support.attributes ) {\n                return elem.getAttribute( name );\n            }\n            return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?\n                name :\n                val && val.specified ? val.value : null;\n        };\n\n        Sizzle.error = function( msg ) {\n            throw new Error( \"Syntax error, unrecognized expression: \" + msg );\n        };\n\n// Document sorting and removing duplicates\n        Sizzle.uniqueSort = function( results ) {\n            var elem,\n                duplicates = [],\n                i = 1,\n                j = 0;\n\n            // Unless we *know* we can detect duplicates, assume their presence\n            hasDuplicate = !support.detectDuplicates;\n            results.sort( sortOrder );\n\n            if ( hasDuplicate ) {\n                for ( ; (elem = results[i]); i++ ) {\n                    if ( elem === results[ i - 1 ] ) {\n                        j = duplicates.push( i );\n                    }\n                }\n                while ( j-- ) {\n                    results.splice( duplicates[ j ], 1 );\n                }\n            }\n\n            return results;\n        };\n\n        function siblingCheck( a, b ) {\n            var cur = b && a,\n                diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );\n\n            // Use IE sourceIndex if available on both nodes\n            if ( diff ) {\n                return diff;\n            }\n\n            // Check if b follows a\n            if ( cur ) {\n                while ( (cur = cur.nextSibling) ) {\n                    if ( cur === b ) {\n                        return -1;\n                    }\n                }\n            }\n\n            return a ? 1 : -1;\n        }\n\n// Returns a function to use in pseudos for input types\n        function createInputPseudo( type ) {\n            return function( elem ) {\n                var name = elem.nodeName.toLowerCase();\n                return name === \"input\" && elem.type === type;\n            };\n        }\n\n// Returns a function to use in pseudos for buttons\n        function createButtonPseudo( type ) {\n            return function( elem ) {\n                var name = elem.nodeName.toLowerCase();\n                return (name === \"input\" || name === \"button\") && elem.type === type;\n            };\n        }\n\n// Returns a function to use in pseudos for positionals\n        function createPositionalPseudo( fn ) {\n            return markFunction(function( argument ) {\n                argument = +argument;\n                return markFunction(function( seed, matches ) {\n                    var j,\n                        matchIndexes = fn( [], seed.length, argument ),\n                        i = matchIndexes.length;\n\n                    // Match elements found at the specified indexes\n                    while ( i-- ) {\n                        if ( seed[ (j = matchIndexes[i]) ] ) {\n                            seed[j] = !(matches[j] = seed[j]);\n                        }\n                    }\n                });\n            });\n        }\n\n        /**\n         * Utility function for retrieving the text value of an array of DOM nodes\n         * @param {Array|Element} elem\n         */\n        getText = Sizzle.getText = function( elem ) {\n            var node,\n                ret = \"\",\n                i = 0,\n                nodeType = elem.nodeType;\n\n            if ( !nodeType ) {\n                // If no nodeType, this is expected to be an array\n                for ( ; (node = elem[i]); i++ ) {\n                    // Do not traverse comment nodes\n                    ret += getText( node );\n                }\n            } else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n                // Use textContent for elements\n                // innerText usage removed for consistency of new lines (see #11153)\n                if ( typeof elem.textContent === \"string\" ) {\n                    return elem.textContent;\n                } else {\n                    // Traverse its children\n                    for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n                        ret += getText( elem );\n                    }\n                }\n            } else if ( nodeType === 3 || nodeType === 4 ) {\n                return elem.nodeValue;\n            }\n            // Do not include comment or processing instruction nodes\n\n            return ret;\n        };\n\n        Expr = Sizzle.selectors = {\n\n            // Can be adjusted by the user\n            cacheLength: 50,\n\n            createPseudo: markFunction,\n\n            match: matchExpr,\n\n            find: {},\n\n            relative: {\n                \">\": { dir: \"parentNode\", first: true },\n                \" \": { dir: \"parentNode\" },\n                \"+\": { dir: \"previousSibling\", first: true },\n                \"~\": { dir: \"previousSibling\" }\n            },\n\n            preFilter: {\n                \"ATTR\": function( match ) {\n                    match[1] = match[1].replace( runescape, funescape );\n\n                    // Move the given value to match[3] whether quoted or unquoted\n                    match[3] = ( match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n                    if ( match[2] === \"~=\" ) {\n                        match[3] = \" \" + match[3] + \" \";\n                    }\n\n                    return match.slice( 0, 4 );\n                },\n\n                \"CHILD\": function( match ) {\n                    /* matches from matchExpr[\"CHILD\"]\n                     1 type (only|nth|...)\n                     2 what (child|of-type)\n                     3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n                     4 xn-component of xn+y argument ([+-]?\\d*n|)\n                     5 sign of xn-component\n                     6 x of xn-component\n                     7 sign of y-component\n                     8 y of y-component\n                     */\n                    match[1] = match[1].toLowerCase();\n\n                    if ( match[1].slice( 0, 3 ) === \"nth\" ) {\n                        // nth-* requires argument\n                        if ( !match[3] ) {\n                            Sizzle.error( match[0] );\n                        }\n\n                        // numeric x and y parameters for Expr.filter.CHILD\n                        // remember that false/true cast respectively to 0/1\n                        match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n                        match[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n                        // other types prohibit arguments\n                    } else if ( match[3] ) {\n                        Sizzle.error( match[0] );\n                    }\n\n                    return match;\n                },\n\n                \"PSEUDO\": function( match ) {\n                    var excess,\n                        unquoted = !match[5] && match[2];\n\n                    if ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n                        return null;\n                    }\n\n                    // Accept quoted arguments as-is\n                    if ( match[4] ) {\n                        match[2] = match[4];\n\n                        // Strip excess characters from unquoted arguments\n                    } else if ( unquoted && rpseudo.test( unquoted ) &&\n                        // Get excess from tokenize (recursively)\n                        (excess = tokenize( unquoted, true )) &&\n                        // advance to the next closing parenthesis\n                        (excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n                        // excess is a negative index\n                        match[0] = match[0].slice( 0, excess );\n                        match[2] = unquoted.slice( 0, excess );\n                    }\n\n                    // Return only captures needed by the pseudo filter method (type and argument)\n                    return match.slice( 0, 3 );\n                }\n            },\n\n            filter: {\n\n                \"TAG\": function( nodeName ) {\n                    if ( nodeName === \"*\" ) {\n                        return function() { return true; };\n                    }\n\n                    nodeName = nodeName.replace( runescape, funescape ).toLowerCase();\n                    return function( elem ) {\n                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n                    };\n                },\n\n                \"CLASS\": function( className ) {\n                    var pattern = classCache[ className + \" \" ];\n\n                    return pattern ||\n                        (pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n                            classCache( className, function( elem ) {\n                                return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute(\"class\")) || \"\" );\n                            });\n                },\n\n                \"ATTR\": function( name, operator, check ) {\n                    return function( elem ) {\n                        var result = Sizzle.attr( elem, name );\n\n                        if ( result == null ) {\n                            return operator === \"!=\";\n                        }\n                        if ( !operator ) {\n                            return true;\n                        }\n\n                        result += \"\";\n\n                        return operator === \"=\" ? result === check :\n                            operator === \"!=\" ? result !== check :\n                                operator === \"^=\" ? check && result.indexOf( check ) === 0 :\n                                    operator === \"*=\" ? check && result.indexOf( check ) > -1 :\n                                        operator === \"$=\" ? check && result.slice( -check.length ) === check :\n                                            operator === \"~=\" ? ( \" \" + result + \" \" ).indexOf( check ) > -1 :\n                                                operator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n                                                    false;\n                    };\n                },\n\n                \"CHILD\": function( type, what, argument, first, last ) {\n                    var simple = type.slice( 0, 3 ) !== \"nth\",\n                        forward = type.slice( -4 ) !== \"last\",\n                        ofType = what === \"of-type\";\n\n                    return first === 1 && last === 0 ?\n\n                        // Shortcut for :nth-*(n)\n                        function( elem ) {\n                            return !!elem.parentNode;\n                        } :\n\n                        function( elem, context, xml ) {\n                            var cache, outerCache, node, diff, nodeIndex, start,\n                                dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                                parent = elem.parentNode,\n                                name = ofType && elem.nodeName.toLowerCase(),\n                                useCache = !xml && !ofType;\n\n                            if ( parent ) {\n\n                                // :(first|last|only)-(child|of-type)\n                                if ( simple ) {\n                                    while ( dir ) {\n                                        node = elem;\n                                        while ( (node = node[ dir ]) ) {\n                                            if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {\n                                                return false;\n                                            }\n                                        }\n                                        // Reverse direction for :only-* (if we haven't yet done so)\n                                        start = dir = type === \"only\" && !start && \"nextSibling\";\n                                    }\n                                    return true;\n                                }\n\n                                start = [ forward ? parent.firstChild : parent.lastChild ];\n\n                                // non-xml :nth-child(...) stores cache data on `parent`\n                                if ( forward && useCache ) {\n                                    // Seek `elem` from a previously-cached index\n                                    outerCache = parent[ expando ] || (parent[ expando ] = {});\n                                    cache = outerCache[ type ] || [];\n                                    nodeIndex = cache[0] === dirruns && cache[1];\n                                    diff = cache[0] === dirruns && cache[2];\n                                    node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n                                    while ( (node = ++nodeIndex && node && node[ dir ] ||\n\n                                        // Fallback to seeking `elem` from the start\n                                        (diff = nodeIndex = 0) || start.pop()) ) {\n\n                                        // When found, cache indexes on `parent` and break\n                                        if ( node.nodeType === 1 && ++diff && node === elem ) {\n                                            outerCache[ type ] = [ dirruns, nodeIndex, diff ];\n                                            break;\n                                        }\n                                    }\n\n                                    // Use previously-cached element index if available\n                                } else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {\n                                    diff = cache[1];\n\n                                    // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)\n                                } else {\n                                    // Use the same loop as above to seek `elem` from the start\n                                    while ( (node = ++nodeIndex && node && node[ dir ] ||\n                                        (diff = nodeIndex = 0) || start.pop()) ) {\n\n                                        if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {\n                                            // Cache the index of each encountered element\n                                            if ( useCache ) {\n                                                (node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];\n                                            }\n\n                                            if ( node === elem ) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n\n                                // Incorporate the offset, then check against cycle size\n                                diff -= last;\n                                return diff === first || ( diff % first === 0 && diff / first >= 0 );\n                            }\n                        };\n                },\n\n                \"PSEUDO\": function( pseudo, argument ) {\n                    // pseudo-class names are case-insensitive\n                    // http://www.w3.org/TR/selectors/#pseudo-classes\n                    // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n                    // Remember that setFilters inherits from pseudos\n                    var args,\n                        fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n                            Sizzle.error( \"unsupported pseudo: \" + pseudo );\n\n                    // The user may use createPseudo to indicate that\n                    // arguments are needed to create the filter function\n                    // just as Sizzle does\n                    if ( fn[ expando ] ) {\n                        return fn( argument );\n                    }\n\n                    // But maintain support for old signatures\n                    if ( fn.length > 1 ) {\n                        args = [ pseudo, pseudo, \"\", argument ];\n                        return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n                            markFunction(function( seed, matches ) {\n                                var idx,\n                                    matched = fn( seed, argument ),\n                                    i = matched.length;\n                                while ( i-- ) {\n                                    idx = indexOf.call( seed, matched[i] );\n                                    seed[ idx ] = !( matches[ idx ] = matched[i] );\n                                }\n                            }) :\n                            function( elem ) {\n                                return fn( elem, 0, args );\n                            };\n                    }\n\n                    return fn;\n                }\n            },\n\n            pseudos: {\n                // Potentially complex pseudos\n                \"not\": markFunction(function( selector ) {\n                    // Trim the selector passed to compile\n                    // to avoid treating leading and trailing\n                    // spaces as combinators\n                    var input = [],\n                        results = [],\n                        matcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n                    return matcher[ expando ] ?\n                        markFunction(function( seed, matches, context, xml ) {\n                            var elem,\n                                unmatched = matcher( seed, null, xml, [] ),\n                                i = seed.length;\n\n                            // Match elements unmatched by `matcher`\n                            while ( i-- ) {\n                                if ( (elem = unmatched[i]) ) {\n                                    seed[i] = !(matches[i] = elem);\n                                }\n                            }\n                        }) :\n                        function( elem, context, xml ) {\n                            input[0] = elem;\n                            matcher( input, null, xml, results );\n                            return !results.pop();\n                        };\n                }),\n\n                \"has\": markFunction(function( selector ) {\n                    return function( elem ) {\n                        return Sizzle( selector, elem ).length > 0;\n                    };\n                }),\n\n                \"contains\": markFunction(function( text ) {\n                    return function( elem ) {\n                        return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n                    };\n                }),\n\n                // \"Whether an element is represented by a :lang() selector\n                // is based solely on the element's language value\n                // being equal to the identifier C,\n                // or beginning with the identifier C immediately followed by \"-\".\n                // The matching of C against the element's language value is performed case-insensitively.\n                // The identifier C does not have to be a valid language name.\"\n                // http://www.w3.org/TR/selectors/#lang-pseudo\n                \"lang\": markFunction( function( lang ) {\n                    // lang value must be a valid identifider\n                    if ( !ridentifier.test(lang || \"\") ) {\n                        Sizzle.error( \"unsupported lang: \" + lang );\n                    }\n                    lang = lang.replace( runescape, funescape ).toLowerCase();\n                    return function( elem ) {\n                        var elemLang;\n                        do {\n                            if ( (elemLang = documentIsXML ?\n                                elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\") :\n                                elem.lang) ) {\n\n                                elemLang = elemLang.toLowerCase();\n                                return elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n                            }\n                        } while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n                        return false;\n                    };\n                }),\n\n                // Miscellaneous\n                \"target\": function( elem ) {\n                    var hash = window.location && window.location.hash;\n                    return hash && hash.slice( 1 ) === elem.id;\n                },\n\n                \"root\": function( elem ) {\n                    return elem === docElem;\n                },\n\n                \"focus\": function( elem ) {\n                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n                },\n\n                // Boolean properties\n                \"enabled\": function( elem ) {\n                    return elem.disabled === false;\n                },\n\n                \"disabled\": function( elem ) {\n                    return elem.disabled === true;\n                },\n\n                \"checked\": function( elem ) {\n                    // In CSS3, :checked should return both checked and selected elements\n                    // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n                    var nodeName = elem.nodeName.toLowerCase();\n                    return (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n                },\n\n                \"selected\": function( elem ) {\n                    // Accessing this property makes selected-by-default\n                    // options in Safari work properly\n                    if ( elem.parentNode ) {\n                        elem.parentNode.selectedIndex;\n                    }\n\n                    return elem.selected === true;\n                },\n\n                // Contents\n                \"empty\": function( elem ) {\n                    // http://www.w3.org/TR/selectors/#empty-pseudo\n                    // :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),\n                    //   not comment, processing instructions, or others\n                    // Thanks to Diego Perini for the nodeName shortcut\n                    //   Greater than \"@\" means alpha characters (specifically not starting with \"#\" or \"?\")\n                    for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n                        if ( elem.nodeName > \"@\" || elem.nodeType === 3 || elem.nodeType === 4 ) {\n                            return false;\n                        }\n                    }\n                    return true;\n                },\n\n                \"parent\": function( elem ) {\n                    return !Expr.pseudos[\"empty\"]( elem );\n                },\n\n                // Element/input types\n                \"header\": function( elem ) {\n                    return rheader.test( elem.nodeName );\n                },\n\n                \"input\": function( elem ) {\n                    return rinputs.test( elem.nodeName );\n                },\n\n                \"button\": function( elem ) {\n                    var name = elem.nodeName.toLowerCase();\n                    return name === \"input\" && elem.type === \"button\" || name === \"button\";\n                },\n\n                \"text\": function( elem ) {\n                    var attr;\n                    // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)\n                    // use getAttribute instead to test this case\n                    return elem.nodeName.toLowerCase() === \"input\" &&\n                        elem.type === \"text\" &&\n                        ( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === elem.type );\n                },\n\n                // Position-in-collection\n                \"first\": createPositionalPseudo(function() {\n                    return [ 0 ];\n                }),\n\n                \"last\": createPositionalPseudo(function( matchIndexes, length ) {\n                    return [ length - 1 ];\n                }),\n\n                \"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n                    return [ argument < 0 ? argument + length : argument ];\n                }),\n\n                \"even\": createPositionalPseudo(function( matchIndexes, length ) {\n                    var i = 0;\n                    for ( ; i < length; i += 2 ) {\n                        matchIndexes.push( i );\n                    }\n                    return matchIndexes;\n                }),\n\n                \"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n                    var i = 1;\n                    for ( ; i < length; i += 2 ) {\n                        matchIndexes.push( i );\n                    }\n                    return matchIndexes;\n                }),\n\n                \"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n                    var i = argument < 0 ? argument + length : argument;\n                    for ( ; --i >= 0; ) {\n                        matchIndexes.push( i );\n                    }\n                    return matchIndexes;\n                }),\n\n                \"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n                    var i = argument < 0 ? argument + length : argument;\n                    for ( ; ++i < length; ) {\n                        matchIndexes.push( i );\n                    }\n                    return matchIndexes;\n                })\n            }\n        };\n\n// Add button/input type pseudos\n        for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n            Expr.pseudos[ i ] = createInputPseudo( i );\n        }\n        for ( i in { submit: true, reset: true } ) {\n            Expr.pseudos[ i ] = createButtonPseudo( i );\n        }\n\n        function tokenize( selector, parseOnly ) {\n            var matched, match, tokens, type,\n                soFar, groups, preFilters,\n                cached = tokenCache[ selector + \" \" ];\n\n            if ( cached ) {\n                return parseOnly ? 0 : cached.slice( 0 );\n            }\n\n            soFar = selector;\n            groups = [];\n            preFilters = Expr.preFilter;\n\n            while ( soFar ) {\n\n                // Comma and first run\n                if ( !matched || (match = rcomma.exec( soFar )) ) {\n                    if ( match ) {\n                        // Don't consume trailing commas as valid\n                        soFar = soFar.slice( match[0].length ) || soFar;\n                    }\n                    groups.push( tokens = [] );\n                }\n\n                matched = false;\n\n                // Combinators\n                if ( (match = rcombinators.exec( soFar )) ) {\n                    matched = match.shift();\n                    tokens.push( {\n                        value: matched,\n                        // Cast descendant combinators to space\n                        type: match[0].replace( rtrim, \" \" )\n                    } );\n                    soFar = soFar.slice( matched.length );\n                }\n\n                // Filters\n                for ( type in Expr.filter ) {\n                    if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n                        (match = preFilters[ type ]( match ))) ) {\n                        matched = match.shift();\n                        tokens.push( {\n                            value: matched,\n                            type: type,\n                            matches: match\n                        } );\n                        soFar = soFar.slice( matched.length );\n                    }\n                }\n\n                if ( !matched ) {\n                    break;\n                }\n            }\n\n            // Return the length of the invalid excess\n            // if we're just parsing\n            // Otherwise, throw an error or return tokens\n            return parseOnly ?\n                soFar.length :\n                soFar ?\n                    Sizzle.error( selector ) :\n                    // Cache the tokens\n                    tokenCache( selector, groups ).slice( 0 );\n        }\n\n        function toSelector( tokens ) {\n            var i = 0,\n                len = tokens.length,\n                selector = \"\";\n            for ( ; i < len; i++ ) {\n                selector += tokens[i].value;\n            }\n            return selector;\n        }\n\n        function addCombinator( matcher, combinator, base ) {\n            var dir = combinator.dir,\n                checkNonElements = base && dir === \"parentNode\",\n                doneName = done++;\n\n            return combinator.first ?\n                // Check against closest ancestor/preceding element\n                function( elem, context, xml ) {\n                    while ( (elem = elem[ dir ]) ) {\n                        if ( elem.nodeType === 1 || checkNonElements ) {\n                            return matcher( elem, context, xml );\n                        }\n                    }\n                } :\n\n                // Check against all ancestor/preceding elements\n                function( elem, context, xml ) {\n                    var data, cache, outerCache,\n                        dirkey = dirruns + \" \" + doneName;\n\n                    // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching\n                    if ( xml ) {\n                        while ( (elem = elem[ dir ]) ) {\n                            if ( elem.nodeType === 1 || checkNonElements ) {\n                                if ( matcher( elem, context, xml ) ) {\n                                    return true;\n                                }\n                            }\n                        }\n                    } else {\n                        while ( (elem = elem[ dir ]) ) {\n                            if ( elem.nodeType === 1 || checkNonElements ) {\n                                outerCache = elem[ expando ] || (elem[ expando ] = {});\n                                if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {\n                                    if ( (data = cache[1]) === true || data === cachedruns ) {\n                                        return data === true;\n                                    }\n                                } else {\n                                    cache = outerCache[ dir ] = [ dirkey ];\n                                    cache[1] = matcher( elem, context, xml ) || cachedruns;\n                                    if ( cache[1] === true ) {\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                };\n        }\n\n        function elementMatcher( matchers ) {\n            return matchers.length > 1 ?\n                function( elem, context, xml ) {\n                    var i = matchers.length;\n                    while ( i-- ) {\n                        if ( !matchers[i]( elem, context, xml ) ) {\n                            return false;\n                        }\n                    }\n                    return true;\n                } :\n                matchers[0];\n        }\n\n        function condense( unmatched, map, filter, context, xml ) {\n            var elem,\n                newUnmatched = [],\n                i = 0,\n                len = unmatched.length,\n                mapped = map != null;\n\n            for ( ; i < len; i++ ) {\n                if ( (elem = unmatched[i]) ) {\n                    if ( !filter || filter( elem, context, xml ) ) {\n                        newUnmatched.push( elem );\n                        if ( mapped ) {\n                            map.push( i );\n                        }\n                    }\n                }\n            }\n\n            return newUnmatched;\n        }\n\n        function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n            if ( postFilter && !postFilter[ expando ] ) {\n                postFilter = setMatcher( postFilter );\n            }\n            if ( postFinder && !postFinder[ expando ] ) {\n                postFinder = setMatcher( postFinder, postSelector );\n            }\n            return markFunction(function( seed, results, context, xml ) {\n                var temp, i, elem,\n                    preMap = [],\n                    postMap = [],\n                    preexisting = results.length,\n\n                // Get initial elements from seed or context\n                    elems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n                // Prefilter to get matcher input, preserving a map for seed-results synchronization\n                    matcherIn = preFilter && ( seed || !selector ) ?\n                        condense( elems, preMap, preFilter, context, xml ) :\n                        elems,\n\n                    matcherOut = matcher ?\n                        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n                        postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n                            // ...intermediate processing is necessary\n                            [] :\n\n                            // ...otherwise use results directly\n                            results :\n                        matcherIn;\n\n                // Find primary matches\n                if ( matcher ) {\n                    matcher( matcherIn, matcherOut, context, xml );\n                }\n\n                // Apply postFilter\n                if ( postFilter ) {\n                    temp = condense( matcherOut, postMap );\n                    postFilter( temp, [], context, xml );\n\n                    // Un-match failing elements by moving them back to matcherIn\n                    i = temp.length;\n                    while ( i-- ) {\n                        if ( (elem = temp[i]) ) {\n                            matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n                        }\n                    }\n                }\n\n                if ( seed ) {\n                    if ( postFinder || preFilter ) {\n                        if ( postFinder ) {\n                            // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                            temp = [];\n                            i = matcherOut.length;\n                            while ( i-- ) {\n                                if ( (elem = matcherOut[i]) ) {\n                                    // Restore matcherIn since elem is not yet a final match\n                                    temp.push( (matcherIn[i] = elem) );\n                                }\n                            }\n                            postFinder( null, (matcherOut = []), temp, xml );\n                        }\n\n                        // Move matched elements from seed to results to keep them synchronized\n                        i = matcherOut.length;\n                        while ( i-- ) {\n                            if ( (elem = matcherOut[i]) &&\n                                (temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {\n\n                                seed[temp] = !(results[temp] = elem);\n                            }\n                        }\n                    }\n\n                    // Add elements to results, through postFinder if defined\n                } else {\n                    matcherOut = condense(\n                        matcherOut === results ?\n                            matcherOut.splice( preexisting, matcherOut.length ) :\n                            matcherOut\n                    );\n                    if ( postFinder ) {\n                        postFinder( null, results, matcherOut, xml );\n                    } else {\n                        push.apply( results, matcherOut );\n                    }\n                }\n            });\n        }\n\n        function matcherFromTokens( tokens ) {\n            var checkContext, matcher, j,\n                len = tokens.length,\n                leadingRelative = Expr.relative[ tokens[0].type ],\n                implicitRelative = leadingRelative || Expr.relative[\" \"],\n                i = leadingRelative ? 1 : 0,\n\n            // The foundational matcher ensures that elements are reachable from top-level context(s)\n                matchContext = addCombinator( function( elem ) {\n                    return elem === checkContext;\n                }, implicitRelative, true ),\n                matchAnyContext = addCombinator( function( elem ) {\n                    return indexOf.call( checkContext, elem ) > -1;\n                }, implicitRelative, true ),\n                matchers = [ function( elem, context, xml ) {\n                    return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n                        (checkContext = context).nodeType ?\n                            matchContext( elem, context, xml ) :\n                            matchAnyContext( elem, context, xml ) );\n                } ];\n\n            for ( ; i < len; i++ ) {\n                if ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n                    matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n                } else {\n                    matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n                    // Return special upon seeing a positional matcher\n                    if ( matcher[ expando ] ) {\n                        // Find the next relative operator (if any) for proper handling\n                        j = ++i;\n                        for ( ; j < len; j++ ) {\n                            if ( Expr.relative[ tokens[j].type ] ) {\n                                break;\n                            }\n                        }\n                        return setMatcher(\n                            i > 1 && elementMatcher( matchers ),\n                            i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, \"$1\" ),\n                            matcher,\n                            i < j && matcherFromTokens( tokens.slice( i, j ) ),\n                            j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n                            j < len && toSelector( tokens )\n                        );\n                    }\n                    matchers.push( matcher );\n                }\n            }\n\n            return elementMatcher( matchers );\n        }\n\n        function matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n            // A counter to specify which element is currently being matched\n            var matcherCachedRuns = 0,\n                bySet = setMatchers.length > 0,\n                byElement = elementMatchers.length > 0,\n                superMatcher = function( seed, context, xml, results, expandContext ) {\n                    var elem, j, matcher,\n                        setMatched = [],\n                        matchedCount = 0,\n                        i = \"0\",\n                        unmatched = seed && [],\n                        outermost = expandContext != null,\n                        contextBackup = outermostContext,\n                    // We must always have either seed elements or context\n                        elems = seed || byElement && Expr.find[\"TAG\"]( \"*\", expandContext && context.parentNode || context ),\n                    // Use integer dirruns iff this is the outermost matcher\n                        dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);\n\n                    if ( outermost ) {\n                        outermostContext = context !== document && context;\n                        cachedruns = matcherCachedRuns;\n                    }\n\n                    // Add elements passing elementMatchers directly to results\n                    // Keep `i` a string if there are no elements so `matchedCount` will be \"00\" below\n                    for ( ; (elem = elems[i]) != null; i++ ) {\n                        if ( byElement && elem ) {\n                            j = 0;\n                            while ( (matcher = elementMatchers[j++]) ) {\n                                if ( matcher( elem, context, xml ) ) {\n                                    results.push( elem );\n                                    break;\n                                }\n                            }\n                            if ( outermost ) {\n                                dirruns = dirrunsUnique;\n                                cachedruns = ++matcherCachedRuns;\n                            }\n                        }\n\n                        // Track unmatched elements for set filters\n                        if ( bySet ) {\n                            // They will have gone through all possible matchers\n                            if ( (elem = !matcher && elem) ) {\n                                matchedCount--;\n                            }\n\n                            // Lengthen the array for every element, matched or not\n                            if ( seed ) {\n                                unmatched.push( elem );\n                            }\n                        }\n                    }\n\n                    // Apply set filters to unmatched elements\n                    matchedCount += i;\n                    if ( bySet && i !== matchedCount ) {\n                        j = 0;\n                        while ( (matcher = setMatchers[j++]) ) {\n                            matcher( unmatched, setMatched, context, xml );\n                        }\n\n                        if ( seed ) {\n                            // Reintegrate element matches to eliminate the need for sorting\n                            if ( matchedCount > 0 ) {\n                                while ( i-- ) {\n                                    if ( !(unmatched[i] || setMatched[i]) ) {\n                                        setMatched[i] = pop.call( results );\n                                    }\n                                }\n                            }\n\n                            // Discard index placeholder values to get only actual matches\n                            setMatched = condense( setMatched );\n                        }\n\n                        // Add matches to results\n                        push.apply( results, setMatched );\n\n                        // Seedless set matches succeeding multiple successful matchers stipulate sorting\n                        if ( outermost && !seed && setMatched.length > 0 &&\n                            ( matchedCount + setMatchers.length ) > 1 ) {\n\n                            Sizzle.uniqueSort( results );\n                        }\n                    }\n\n                    // Override manipulation of globals by nested matchers\n                    if ( outermost ) {\n                        dirruns = dirrunsUnique;\n                        outermostContext = contextBackup;\n                    }\n\n                    return unmatched;\n                };\n\n            return bySet ?\n                markFunction( superMatcher ) :\n                superMatcher;\n        }\n\n        compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {\n            var i,\n                setMatchers = [],\n                elementMatchers = [],\n                cached = compilerCache[ selector + \" \" ];\n\n            if ( !cached ) {\n                // Generate a function of recursive functions that can be used to check each element\n                if ( !group ) {\n                    group = tokenize( selector );\n                }\n                i = group.length;\n                while ( i-- ) {\n                    cached = matcherFromTokens( group[i] );\n                    if ( cached[ expando ] ) {\n                        setMatchers.push( cached );\n                    } else {\n                        elementMatchers.push( cached );\n                    }\n                }\n\n                // Cache the compiled function\n                cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n            }\n            return cached;\n        };\n\n        function multipleContexts( selector, contexts, results ) {\n            var i = 0,\n                len = contexts.length;\n            for ( ; i < len; i++ ) {\n                Sizzle( selector, contexts[i], results );\n            }\n            return results;\n        }\n\n        function select( selector, context, results, seed ) {\n            var i, tokens, token, type, find,\n                match = tokenize( selector );\n\n            if ( !seed ) {\n                // Try to minimize operations if there is only one group\n                if ( match.length === 1 ) {\n\n                    // Take a shortcut and set the context if the root selector is an ID\n                    tokens = match[0] = match[0].slice( 0 );\n                    if ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n                        context.nodeType === 9 && !documentIsXML &&\n                        Expr.relative[ tokens[1].type ] ) {\n\n                        context = Expr.find[\"ID\"]( token.matches[0].replace( runescape, funescape ), context )[0];\n                        if ( !context ) {\n                            return results;\n                        }\n\n                        selector = selector.slice( tokens.shift().value.length );\n                    }\n\n                    // Fetch a seed set for right-to-left matching\n                    i = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n                    while ( i-- ) {\n                        token = tokens[i];\n\n                        // Abort if we hit a combinator\n                        if ( Expr.relative[ (type = token.type) ] ) {\n                            break;\n                        }\n                        if ( (find = Expr.find[ type ]) ) {\n                            // Search, expanding context for leading sibling combinators\n                            if ( (seed = find(\n                                token.matches[0].replace( runescape, funescape ),\n                                rsibling.test( tokens[0].type ) && context.parentNode || context\n                            )) ) {\n\n                                // If seed is empty or no tokens remain, we can return early\n                                tokens.splice( i, 1 );\n                                selector = seed.length && toSelector( tokens );\n                                if ( !selector ) {\n                                    push.apply( results, slice.call( seed, 0 ) );\n                                    return results;\n                                }\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Compile and execute a filtering function\n            // Provide `match` to avoid retokenization if we modified the selector above\n            compile( selector, match )(\n                seed,\n                context,\n                documentIsXML,\n                results,\n                rsibling.test( selector )\n            );\n            return results;\n        }\n\n// Deprecated\n        Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Easy API for creating new setFilters\n        function setFilters() {}\n        Expr.filters = setFilters.prototype = Expr.pseudos;\n        Expr.setFilters = new setFilters();\n\n// Initialize with the default document\n        setDocument();\n\n// Override sizzle attribute retrieval\n        Sizzle.attr = jQuery.attr;\n        jQuery.find = Sizzle;\n        jQuery.expr = Sizzle.selectors;\n        jQuery.expr[\":\"] = jQuery.expr.pseudos;\n        jQuery.unique = Sizzle.uniqueSort;\n        jQuery.text = Sizzle.getText;\n        jQuery.isXMLDoc = Sizzle.isXML;\n        jQuery.contains = Sizzle.contains;\n\n\n    })( window );\n    var runtil = /Until$/,\n        rparentsprev = /^(?:parents|prev(?:Until|All))/,\n        isSimple = /^.[^:#\\[\\.,]*$/,\n        rneedsContext = jQuery.expr.match.needsContext,\n    // methods guaranteed to produce a unique set when starting from a unique set\n        guaranteedUnique = {\n            children: true,\n            contents: true,\n            next: true,\n            prev: true\n        };\n\n    jQuery.fn.extend({\n        find: function( selector ) {\n            var i, ret, self,\n                len = this.length;\n\n            if ( typeof selector !== \"string\" ) {\n                self = this;\n                return this.pushStack( jQuery( selector ).filter(function() {\n                    for ( i = 0; i < len; i++ ) {\n                        if ( jQuery.contains( self[ i ], this ) ) {\n                            return true;\n                        }\n                    }\n                }) );\n            }\n\n            ret = [];\n            for ( i = 0; i < len; i++ ) {\n                jQuery.find( selector, this[ i ], ret );\n            }\n\n            // Needed because $( selector, context ) becomes $( context ).find( selector )\n            ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n            ret.selector = ( this.selector ? this.selector + \" \" : \"\" ) + selector;\n            return ret;\n        },\n\n        has: function( target ) {\n            var i,\n                targets = jQuery( target, this ),\n                len = targets.length;\n\n            return this.filter(function() {\n                for ( i = 0; i < len; i++ ) {\n                    if ( jQuery.contains( this, targets[i] ) ) {\n                        return true;\n                    }\n                }\n            });\n        },\n\n        not: function( selector ) {\n            return this.pushStack( winnow(this, selector, false) );\n        },\n\n        filter: function( selector ) {\n            return this.pushStack( winnow(this, selector, true) );\n        },\n\n        is: function( selector ) {\n            return !!selector && (\n                typeof selector === \"string\" ?\n                    // If this is a positional/relative selector, check membership in the returned set\n                    // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n                    rneedsContext.test( selector ) ?\n                        jQuery( selector, this.context ).index( this[0] ) >= 0 :\n                        jQuery.filter( selector, this ).length > 0 :\n                    this.filter( selector ).length > 0 );\n        },\n\n        closest: function( selectors, context ) {\n            var cur,\n                i = 0,\n                l = this.length,\n                ret = [],\n                pos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\n                    jQuery( selectors, context || this.context ) :\n                    0;\n\n            for ( ; i < l; i++ ) {\n                cur = this[i];\n\n                while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {\n                    if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {\n                        ret.push( cur );\n                        break;\n                    }\n                    cur = cur.parentNode;\n                }\n            }\n\n            return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );\n        },\n\n        // Determine the position of an element within\n        // the matched set of elements\n        index: function( elem ) {\n\n            // No argument, return index in parent\n            if ( !elem ) {\n                return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;\n            }\n\n            // index in selector\n            if ( typeof elem === \"string\" ) {\n                return jQuery.inArray( this[0], jQuery( elem ) );\n            }\n\n            // Locate the position of the desired element\n            return jQuery.inArray(\n                // If it receives a jQuery object, the first element is used\n                elem.jquery ? elem[0] : elem, this );\n        },\n\n        add: function( selector, context ) {\n            var set = typeof selector === \"string\" ?\n                    jQuery( selector, context ) :\n                    jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),\n                all = jQuery.merge( this.get(), set );\n\n            return this.pushStack( jQuery.unique(all) );\n        },\n\n        addBack: function( selector ) {\n            return this.add( selector == null ?\n                this.prevObject : this.prevObject.filter(selector)\n            );\n        }\n    });\n\n    jQuery.fn.andSelf = jQuery.fn.addBack;\n\n    function sibling( cur, dir ) {\n        do {\n            cur = cur[ dir ];\n        } while ( cur && cur.nodeType !== 1 );\n\n        return cur;\n    }\n\n    jQuery.each({\n        parent: function( elem ) {\n            var parent = elem.parentNode;\n            return parent && parent.nodeType !== 11 ? parent : null;\n        },\n        parents: function( elem ) {\n            return jQuery.dir( elem, \"parentNode\" );\n        },\n        parentsUntil: function( elem, i, until ) {\n            return jQuery.dir( elem, \"parentNode\", until );\n        },\n        next: function( elem ) {\n            return sibling( elem, \"nextSibling\" );\n        },\n        prev: function( elem ) {\n            return sibling( elem, \"previousSibling\" );\n        },\n        nextAll: function( elem ) {\n            return jQuery.dir( elem, \"nextSibling\" );\n        },\n        prevAll: function( elem ) {\n            return jQuery.dir( elem, \"previousSibling\" );\n        },\n        nextUntil: function( elem, i, until ) {\n            return jQuery.dir( elem, \"nextSibling\", until );\n        },\n        prevUntil: function( elem, i, until ) {\n            return jQuery.dir( elem, \"previousSibling\", until );\n        },\n        siblings: function( elem ) {\n            return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );\n        },\n        children: function( elem ) {\n            return jQuery.sibling( elem.firstChild );\n        },\n        contents: function( elem ) {\n            return jQuery.nodeName( elem, \"iframe\" ) ?\n                elem.contentDocument || elem.contentWindow.document :\n                jQuery.merge( [], elem.childNodes );\n        }\n    }, function( name, fn ) {\n        jQuery.fn[ name ] = function( until, selector ) {\n            var ret = jQuery.map( this, fn, until );\n\n            if ( !runtil.test( name ) ) {\n                selector = until;\n            }\n\n            if ( selector && typeof selector === \"string\" ) {\n                ret = jQuery.filter( selector, ret );\n            }\n\n            ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;\n\n            if ( this.length > 1 && rparentsprev.test( name ) ) {\n                ret = ret.reverse();\n            }\n\n            return this.pushStack( ret );\n        };\n    });\n\n    jQuery.extend({\n        filter: function( expr, elems, not ) {\n            if ( not ) {\n                expr = \":not(\" + expr + \")\";\n            }\n\n            return elems.length === 1 ?\n                jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :\n                jQuery.find.matches(expr, elems);\n        },\n\n        dir: function( elem, dir, until ) {\n            var matched = [],\n                cur = elem[ dir ];\n\n            while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {\n                if ( cur.nodeType === 1 ) {\n                    matched.push( cur );\n                }\n                cur = cur[dir];\n            }\n            return matched;\n        },\n\n        sibling: function( n, elem ) {\n            var r = [];\n\n            for ( ; n; n = n.nextSibling ) {\n                if ( n.nodeType === 1 && n !== elem ) {\n                    r.push( n );\n                }\n            }\n\n            return r;\n        }\n    });\n\n// Implement the identical functionality for filter and not\n    function winnow( elements, qualifier, keep ) {\n\n        // Can't pass null or undefined to indexOf in Firefox 4\n        // Set to 0 to skip string check\n        qualifier = qualifier || 0;\n\n        if ( jQuery.isFunction( qualifier ) ) {\n            return jQuery.grep(elements, function( elem, i ) {\n                var retVal = !!qualifier.call( elem, i, elem );\n                return retVal === keep;\n            });\n\n        } else if ( qualifier.nodeType ) {\n            return jQuery.grep(elements, function( elem ) {\n                return ( elem === qualifier ) === keep;\n            });\n\n        } else if ( typeof qualifier === \"string\" ) {\n            var filtered = jQuery.grep(elements, function( elem ) {\n                return elem.nodeType === 1;\n            });\n\n            if ( isSimple.test( qualifier ) ) {\n                return jQuery.filter(qualifier, filtered, !keep);\n            } else {\n                qualifier = jQuery.filter( qualifier, filtered );\n            }\n        }\n\n        return jQuery.grep(elements, function( elem ) {\n            return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;\n        });\n    }\n    function createSafeFragment( document ) {\n        var list = nodeNames.split( \"|\" ),\n            safeFrag = document.createDocumentFragment();\n\n        if ( safeFrag.createElement ) {\n            while ( list.length ) {\n                safeFrag.createElement(\n                    list.pop()\n                );\n            }\n        }\n        return safeFrag;\n    }\n\n    var nodeNames = \"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|\" +\n            \"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",\n        rinlinejQuery = / jQuery\\d+=\"(?:null|\\d+)\"/g,\n        rnoshimcache = new RegExp(\"<(?:\" + nodeNames + \")[\\\\s/>]\", \"i\"),\n        rleadingWhitespace = /^\\s+/,\n        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,\n        rtagName = /<([\\w:]+)/,\n        rtbody = /<tbody/i,\n        rhtml = /<|&#?\\w+;/,\n        rnoInnerhtml = /<(?:script|style|link)/i,\n        manipulation_rcheckableType = /^(?:checkbox|radio)$/i,\n    // checked=\"checked\" or checked\n        rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n        rscriptType = /^$|\\/(?:java|ecma)script/i,\n        rscriptTypeMasked = /^true\\/(.*)/,\n        rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,\n\n    // We have to close these tags to support XHTML (#13200)\n        wrapMap = {\n            option: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n            legend: [ 1, \"<fieldset>\", \"</fieldset>\" ],\n            area: [ 1, \"<map>\", \"</map>\" ],\n            param: [ 1, \"<object>\", \"</object>\" ],\n            thead: [ 1, \"<table>\", \"</table>\" ],\n            tr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n            col: [ 2, \"<table><tbody></tbody><colgroup>\", \"</colgroup></table>\" ],\n            td: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n            // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,\n            // unless wrapped in a div with non-breaking characters in front of it.\n            _default: jQuery.support.htmlSerialize ? [ 0, \"\", \"\" ] : [ 1, \"X<div>\", \"</div>\"  ]\n        },\n        safeFragment = createSafeFragment( document ),\n        fragmentDiv = safeFragment.appendChild( document.createElement(\"div\") );\n\n    wrapMap.optgroup = wrapMap.option;\n    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n    wrapMap.th = wrapMap.td;\n\n    jQuery.fn.extend({\n        text: function( value ) {\n            return jQuery.access( this, function( value ) {\n                return value === undefined ?\n                    jQuery.text( this ) :\n                    this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );\n            }, null, value, arguments.length );\n        },\n\n        wrapAll: function( html ) {\n            if ( jQuery.isFunction( html ) ) {\n                return this.each(function(i) {\n                    jQuery(this).wrapAll( html.call(this, i) );\n                });\n            }\n\n            if ( this[0] ) {\n                // The elements to wrap the target around\n                var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);\n\n                if ( this[0].parentNode ) {\n                    wrap.insertBefore( this[0] );\n                }\n\n                wrap.map(function() {\n                    var elem = this;\n\n                    while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {\n                        elem = elem.firstChild;\n                    }\n\n                    return elem;\n                }).append( this );\n            }\n\n            return this;\n        },\n\n        wrapInner: function( html ) {\n            if ( jQuery.isFunction( html ) ) {\n                return this.each(function(i) {\n                    jQuery(this).wrapInner( html.call(this, i) );\n                });\n            }\n\n            return this.each(function() {\n                var self = jQuery( this ),\n                    contents = self.contents();\n\n                if ( contents.length ) {\n                    contents.wrapAll( html );\n\n                } else {\n                    self.append( html );\n                }\n            });\n        },\n\n        wrap: function( html ) {\n            var isFunction = jQuery.isFunction( html );\n\n            return this.each(function(i) {\n                jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );\n            });\n        },\n\n        unwrap: function() {\n            return this.parent().each(function() {\n                if ( !jQuery.nodeName( this, \"body\" ) ) {\n                    jQuery( this ).replaceWith( this.childNodes );\n                }\n            }).end();\n        },\n\n        append: function() {\n            return this.domManip(arguments, true, function( elem ) {\n                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n                    this.appendChild( elem );\n                }\n            });\n        },\n\n        prepend: function() {\n            return this.domManip(arguments, true, function( elem ) {\n                if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n                    this.insertBefore( elem, this.firstChild );\n                }\n            });\n        },\n\n        before: function() {\n            return this.domManip( arguments, false, function( elem ) {\n                if ( this.parentNode ) {\n                    this.parentNode.insertBefore( elem, this );\n                }\n            });\n        },\n\n        after: function() {\n            return this.domManip( arguments, false, function( elem ) {\n                if ( this.parentNode ) {\n                    this.parentNode.insertBefore( elem, this.nextSibling );\n                }\n            });\n        },\n\n        // keepData is for internal use only--do not document\n        remove: function( selector, keepData ) {\n            var elem,\n                i = 0;\n\n            for ( ; (elem = this[i]) != null; i++ ) {\n                if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {\n                    if ( !keepData && elem.nodeType === 1 ) {\n                        jQuery.cleanData( getAll( elem ) );\n                    }\n\n                    if ( elem.parentNode ) {\n                        if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {\n                            setGlobalEval( getAll( elem, \"script\" ) );\n                        }\n                        elem.parentNode.removeChild( elem );\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        empty: function() {\n            var elem,\n                i = 0;\n\n            for ( ; (elem = this[i]) != null; i++ ) {\n                // Remove element nodes and prevent memory leaks\n                if ( elem.nodeType === 1 ) {\n                    jQuery.cleanData( getAll( elem, false ) );\n                }\n\n                // Remove any remaining nodes\n                while ( elem.firstChild ) {\n                    elem.removeChild( elem.firstChild );\n                }\n\n                // If this is a select, ensure that it displays empty (#12336)\n                // Support: IE<9\n                if ( elem.options && jQuery.nodeName( elem, \"select\" ) ) {\n                    elem.options.length = 0;\n                }\n            }\n\n            return this;\n        },\n\n        clone: function( dataAndEvents, deepDataAndEvents ) {\n            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n            return this.map( function () {\n                return jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n            });\n        },\n\n        html: function( value ) {\n            return jQuery.access( this, function( value ) {\n                var elem = this[0] || {},\n                    i = 0,\n                    l = this.length;\n\n                if ( value === undefined ) {\n                    return elem.nodeType === 1 ?\n                        elem.innerHTML.replace( rinlinejQuery, \"\" ) :\n                        undefined;\n                }\n\n                // See if we can take a shortcut and just use innerHTML\n                if ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n                    ( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&\n                    ( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&\n                    !wrapMap[ ( rtagName.exec( value ) || [\"\", \"\"] )[1].toLowerCase() ] ) {\n\n                    value = value.replace( rxhtmlTag, \"<$1></$2>\" );\n\n                    try {\n                        for (; i < l; i++ ) {\n                            // Remove element nodes and prevent memory leaks\n                            elem = this[i] || {};\n                            if ( elem.nodeType === 1 ) {\n                                jQuery.cleanData( getAll( elem, false ) );\n                                elem.innerHTML = value;\n                            }\n                        }\n\n                        elem = 0;\n\n                        // If using innerHTML throws an exception, use the fallback method\n                    } catch(e) {}\n                }\n\n                if ( elem ) {\n                    this.empty().append( value );\n                }\n            }, null, value, arguments.length );\n        },\n\n        replaceWith: function( value ) {\n            var isFunc = jQuery.isFunction( value );\n\n            // Make sure that the elements are removed from the DOM before they are inserted\n            // this can help fix replacing a parent with child elements\n            if ( !isFunc && typeof value !== \"string\" ) {\n                value = jQuery( value ).not( this ).detach();\n            }\n\n            return this.domManip( [ value ], true, function( elem ) {\n                var next = this.nextSibling,\n                    parent = this.parentNode;\n\n                if ( parent ) {\n                    jQuery( this ).remove();\n                    parent.insertBefore( elem, next );\n                }\n            });\n        },\n\n        detach: function( selector ) {\n            return this.remove( selector, true );\n        },\n\n        domManip: function( args, table, callback ) {\n\n            // Flatten any nested arrays\n            args = core_concat.apply( [], args );\n\n            var first, node, hasScripts,\n                scripts, doc, fragment,\n                i = 0,\n                l = this.length,\n                set = this,\n                iNoClone = l - 1,\n                value = args[0],\n                isFunction = jQuery.isFunction( value );\n\n            // We can't cloneNode fragments that contain checked, in WebKit\n            if ( isFunction || !( l <= 1 || typeof value !== \"string\" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {\n                return this.each(function( index ) {\n                    var self = set.eq( index );\n                    if ( isFunction ) {\n                        args[0] = value.call( this, index, table ? self.html() : undefined );\n                    }\n                    self.domManip( args, table, callback );\n                });\n            }\n\n            if ( l ) {\n                fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );\n                first = fragment.firstChild;\n\n                if ( fragment.childNodes.length === 1 ) {\n                    fragment = first;\n                }\n\n                if ( first ) {\n                    table = table && jQuery.nodeName( first, \"tr\" );\n                    scripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n                    hasScripts = scripts.length;\n\n                    // Use the original fragment for the last item instead of the first because it can end up\n                    // being emptied incorrectly in certain situations (#8070).\n                    for ( ; i < l; i++ ) {\n                        node = fragment;\n\n                        if ( i !== iNoClone ) {\n                            node = jQuery.clone( node, true, true );\n\n                            // Keep references to cloned scripts for later restoration\n                            if ( hasScripts ) {\n                                jQuery.merge( scripts, getAll( node, \"script\" ) );\n                            }\n                        }\n\n                        callback.call(\n                            table && jQuery.nodeName( this[i], \"table\" ) ?\n                                findOrAppend( this[i], \"tbody\" ) :\n                                this[i],\n                            node,\n                            i\n                        );\n                    }\n\n                    if ( hasScripts ) {\n                        doc = scripts[ scripts.length - 1 ].ownerDocument;\n\n                        // Reenable scripts\n                        jQuery.map( scripts, restoreScript );\n\n                        // Evaluate executable scripts on first document insertion\n                        for ( i = 0; i < hasScripts; i++ ) {\n                            node = scripts[ i ];\n                            if ( rscriptType.test( node.type || \"\" ) &&\n                                !jQuery._data( node, \"globalEval\" ) && jQuery.contains( doc, node ) ) {\n\n                                if ( node.src ) {\n                                    // Hope ajax is available...\n                                    jQuery.ajax({\n                                        url: node.src,\n                                        type: \"GET\",\n                                        dataType: \"script\",\n                                        async: false,\n                                        global: false,\n                                        \"throws\": true\n                                    });\n                                } else {\n                                    jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || \"\" ).replace( rcleanScript, \"\" ) );\n                                }\n                            }\n                        }\n                    }\n\n                    // Fix #11809: Avoid leaking memory\n                    fragment = first = null;\n                }\n            }\n\n            return this;\n        }\n    });\n\n    function findOrAppend( elem, tag ) {\n        return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );\n    }\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\n    function disableScript( elem ) {\n        var attr = elem.getAttributeNode(\"type\");\n        elem.type = ( attr && attr.specified ) + \"/\" + elem.type;\n        return elem;\n    }\n    function restoreScript( elem ) {\n        var match = rscriptTypeMasked.exec( elem.type );\n        if ( match ) {\n            elem.type = match[1];\n        } else {\n            elem.removeAttribute(\"type\");\n        }\n        return elem;\n    }\n\n// Mark scripts as having already been evaluated\n    function setGlobalEval( elems, refElements ) {\n        var elem,\n            i = 0;\n        for ( ; (elem = elems[i]) != null; i++ ) {\n            jQuery._data( elem, \"globalEval\", !refElements || jQuery._data( refElements[i], \"globalEval\" ) );\n        }\n    }\n\n    function cloneCopyEvent( src, dest ) {\n\n        if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {\n            return;\n        }\n\n        var type, i, l,\n            oldData = jQuery._data( src ),\n            curData = jQuery._data( dest, oldData ),\n            events = oldData.events;\n\n        if ( events ) {\n            delete curData.handle;\n            curData.events = {};\n\n            for ( type in events ) {\n                for ( i = 0, l = events[ type ].length; i < l; i++ ) {\n                    jQuery.event.add( dest, type, events[ type ][ i ] );\n                }\n            }\n        }\n\n        // make the cloned public data object a copy from the original\n        if ( curData.data ) {\n            curData.data = jQuery.extend( {}, curData.data );\n        }\n    }\n\n    function fixCloneNodeIssues( src, dest ) {\n        var nodeName, e, data;\n\n        // We do not need to do anything for non-Elements\n        if ( dest.nodeType !== 1 ) {\n            return;\n        }\n\n        nodeName = dest.nodeName.toLowerCase();\n\n        // IE6-8 copies events bound via attachEvent when using cloneNode.\n        if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {\n            data = jQuery._data( dest );\n\n            for ( e in data.events ) {\n                jQuery.removeEvent( dest, e, data.handle );\n            }\n\n            // Event data gets referenced instead of copied if the expando gets copied too\n            dest.removeAttribute( jQuery.expando );\n        }\n\n        // IE blanks contents when cloning scripts, and tries to evaluate newly-set text\n        if ( nodeName === \"script\" && dest.text !== src.text ) {\n            disableScript( dest ).text = src.text;\n            restoreScript( dest );\n\n            // IE6-10 improperly clones children of object elements using classid.\n            // IE10 throws NoModificationAllowedError if parent is null, #12132.\n        } else if ( nodeName === \"object\" ) {\n            if ( dest.parentNode ) {\n                dest.outerHTML = src.outerHTML;\n            }\n\n            // This path appears unavoidable for IE9. When cloning an object\n            // element in IE9, the outerHTML strategy above is not sufficient.\n            // If the src has innerHTML and the destination does not,\n            // copy the src.innerHTML into the dest.innerHTML. #10324\n            if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {\n                dest.innerHTML = src.innerHTML;\n            }\n\n        } else if ( nodeName === \"input\" && manipulation_rcheckableType.test( src.type ) ) {\n            // IE6-8 fails to persist the checked state of a cloned checkbox\n            // or radio button. Worse, IE6-7 fail to give the cloned element\n            // a checked appearance if the defaultChecked value isn't also set\n\n            dest.defaultChecked = dest.checked = src.checked;\n\n            // IE6-7 get confused and end up setting the value of a cloned\n            // checkbox/radio button to an empty string instead of \"on\"\n            if ( dest.value !== src.value ) {\n                dest.value = src.value;\n            }\n\n            // IE6-8 fails to return the selected option to the default selected\n            // state when cloning options\n        } else if ( nodeName === \"option\" ) {\n            dest.defaultSelected = dest.selected = src.defaultSelected;\n\n            // IE6-8 fails to set the defaultValue to the correct value when\n            // cloning other types of input fields\n        } else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n            dest.defaultValue = src.defaultValue;\n        }\n    }\n\n    jQuery.each({\n        appendTo: \"append\",\n        prependTo: \"prepend\",\n        insertBefore: \"before\",\n        insertAfter: \"after\",\n        replaceAll: \"replaceWith\"\n    }, function( name, original ) {\n        jQuery.fn[ name ] = function( selector ) {\n            var elems,\n                i = 0,\n                ret = [],\n                insert = jQuery( selector ),\n                last = insert.length - 1;\n\n            for ( ; i <= last; i++ ) {\n                elems = i === last ? this : this.clone(true);\n                jQuery( insert[i] )[ original ]( elems );\n\n                // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()\n                core_push.apply( ret, elems.get() );\n            }\n\n            return this.pushStack( ret );\n        };\n    });\n\n    function getAll( context, tag ) {\n        var elems, elem,\n            i = 0,\n            found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || \"*\" ) :\n                typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || \"*\" ) :\n                    undefined;\n\n        if ( !found ) {\n            for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {\n                if ( !tag || jQuery.nodeName( elem, tag ) ) {\n                    found.push( elem );\n                } else {\n                    jQuery.merge( found, getAll( elem, tag ) );\n                }\n            }\n        }\n\n        return tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n            jQuery.merge( [ context ], found ) :\n            found;\n    }\n\n// Used in buildFragment, fixes the defaultChecked property\n    function fixDefaultChecked( elem ) {\n        if ( manipulation_rcheckableType.test( elem.type ) ) {\n            elem.defaultChecked = elem.checked;\n        }\n    }\n\n    jQuery.extend({\n        clone: function( elem, dataAndEvents, deepDataAndEvents ) {\n            var destElements, node, clone, i, srcElements,\n                inPage = jQuery.contains( elem.ownerDocument, elem );\n\n            if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( \"<\" + elem.nodeName + \">\" ) ) {\n                clone = elem.cloneNode( true );\n\n                // IE<=8 does not properly clone detached, unknown element nodes\n            } else {\n                fragmentDiv.innerHTML = elem.outerHTML;\n                fragmentDiv.removeChild( clone = fragmentDiv.firstChild );\n            }\n\n            if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&\n                (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {\n\n                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n                destElements = getAll( clone );\n                srcElements = getAll( elem );\n\n                // Fix all IE cloning issues\n                for ( i = 0; (node = srcElements[i]) != null; ++i ) {\n                    // Ensure that the destination node is not null; Fixes #9587\n                    if ( destElements[i] ) {\n                        fixCloneNodeIssues( node, destElements[i] );\n                    }\n                }\n            }\n\n            // Copy the events from the original to the clone\n            if ( dataAndEvents ) {\n                if ( deepDataAndEvents ) {\n                    srcElements = srcElements || getAll( elem );\n                    destElements = destElements || getAll( clone );\n\n                    for ( i = 0; (node = srcElements[i]) != null; i++ ) {\n                        cloneCopyEvent( node, destElements[i] );\n                    }\n                } else {\n                    cloneCopyEvent( elem, clone );\n                }\n            }\n\n            // Preserve script evaluation history\n            destElements = getAll( clone, \"script\" );\n            if ( destElements.length > 0 ) {\n                setGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n            }\n\n            destElements = srcElements = node = null;\n\n            // Return the cloned set\n            return clone;\n        },\n\n        buildFragment: function( elems, context, scripts, selection ) {\n            var j, elem, contains,\n                tmp, tag, tbody, wrap,\n                l = elems.length,\n\n            // Ensure a safe fragment\n                safe = createSafeFragment( context ),\n\n                nodes = [],\n                i = 0;\n\n            for ( ; i < l; i++ ) {\n                elem = elems[ i ];\n\n                if ( elem || elem === 0 ) {\n\n                    // Add nodes directly\n                    if ( jQuery.type( elem ) === \"object\" ) {\n                        jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n                        // Convert non-html into a text node\n                    } else if ( !rhtml.test( elem ) ) {\n                        nodes.push( context.createTextNode( elem ) );\n\n                        // Convert html into DOM nodes\n                    } else {\n                        tmp = tmp || safe.appendChild( context.createElement(\"div\") );\n\n                        // Deserialize a standard representation\n                        tag = ( rtagName.exec( elem ) || [\"\", \"\"] )[1].toLowerCase();\n                        wrap = wrapMap[ tag ] || wrapMap._default;\n\n                        tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, \"<$1></$2>\" ) + wrap[2];\n\n                        // Descend through wrappers to the right content\n                        j = wrap[0];\n                        while ( j-- ) {\n                            tmp = tmp.lastChild;\n                        }\n\n                        // Manually add leading whitespace removed by IE\n                        if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {\n                            nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );\n                        }\n\n                        // Remove IE's autoinserted <tbody> from table fragments\n                        if ( !jQuery.support.tbody ) {\n\n                            // String was a <table>, *may* have spurious <tbody>\n                            elem = tag === \"table\" && !rtbody.test( elem ) ?\n                                tmp.firstChild :\n\n                                // String was a bare <thead> or <tfoot>\n                                wrap[1] === \"<table>\" && !rtbody.test( elem ) ?\n                                    tmp :\n                                    0;\n\n                            j = elem && elem.childNodes.length;\n                            while ( j-- ) {\n                                if ( jQuery.nodeName( (tbody = elem.childNodes[j]), \"tbody\" ) && !tbody.childNodes.length ) {\n                                    elem.removeChild( tbody );\n                                }\n                            }\n                        }\n\n                        jQuery.merge( nodes, tmp.childNodes );\n\n                        // Fix #12392 for WebKit and IE > 9\n                        tmp.textContent = \"\";\n\n                        // Fix #12392 for oldIE\n                        while ( tmp.firstChild ) {\n                            tmp.removeChild( tmp.firstChild );\n                        }\n\n                        // Remember the top-level container for proper cleanup\n                        tmp = safe.lastChild;\n                    }\n                }\n            }\n\n            // Fix #11356: Clear elements from fragment\n            if ( tmp ) {\n                safe.removeChild( tmp );\n            }\n\n            // Reset defaultChecked for any radios and checkboxes\n            // about to be appended to the DOM in IE 6/7 (#8060)\n            if ( !jQuery.support.appendChecked ) {\n                jQuery.grep( getAll( nodes, \"input\" ), fixDefaultChecked );\n            }\n\n            i = 0;\n            while ( (elem = nodes[ i++ ]) ) {\n\n                // #4087 - If origin and destination elements are the same, and this is\n                // that element, do not do anything\n                if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {\n                    continue;\n                }\n\n                contains = jQuery.contains( elem.ownerDocument, elem );\n\n                // Append to fragment\n                tmp = getAll( safe.appendChild( elem ), \"script\" );\n\n                // Preserve script evaluation history\n                if ( contains ) {\n                    setGlobalEval( tmp );\n                }\n\n                // Capture executables\n                if ( scripts ) {\n                    j = 0;\n                    while ( (elem = tmp[ j++ ]) ) {\n                        if ( rscriptType.test( elem.type || \"\" ) ) {\n                            scripts.push( elem );\n                        }\n                    }\n                }\n            }\n\n            tmp = null;\n\n            return safe;\n        },\n\n        cleanData: function( elems, /* internal */ acceptData ) {\n            var elem, type, id, data,\n                i = 0,\n                internalKey = jQuery.expando,\n                cache = jQuery.cache,\n                deleteExpando = jQuery.support.deleteExpando,\n                special = jQuery.event.special;\n\n            for ( ; (elem = elems[i]) != null; i++ ) {\n\n                if ( acceptData || jQuery.acceptData( elem ) ) {\n\n                    id = elem[ internalKey ];\n                    data = id && cache[ id ];\n\n                    if ( data ) {\n                        if ( data.events ) {\n                            for ( type in data.events ) {\n                                if ( special[ type ] ) {\n                                    jQuery.event.remove( elem, type );\n\n                                    // This is a shortcut to avoid jQuery.event.remove's overhead\n                                } else {\n                                    jQuery.removeEvent( elem, type, data.handle );\n                                }\n                            }\n                        }\n\n                        // Remove cache only if it was not already removed by jQuery.event.remove\n                        if ( cache[ id ] ) {\n\n                            delete cache[ id ];\n\n                            // IE does not allow us to delete expando properties from nodes,\n                            // nor does it have a removeAttribute function on Document nodes;\n                            // we must handle all of these cases\n                            if ( deleteExpando ) {\n                                delete elem[ internalKey ];\n\n                            } else if ( typeof elem.removeAttribute !== core_strundefined ) {\n                                elem.removeAttribute( internalKey );\n\n                            } else {\n                                elem[ internalKey ] = null;\n                            }\n\n                            core_deletedIds.push( id );\n                        }\n                    }\n                }\n            }\n        }\n    });\n    var iframe, getStyles, curCSS,\n        ralpha = /alpha\\([^)]*\\)/i,\n        ropacity = /opacity\\s*=\\s*([^)]*)/,\n        rposition = /^(top|right|bottom|left)$/,\n    // swappable if display is none or starts with table except \"table\", \"table-cell\", or \"table-caption\"\n    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n        rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n        rmargin = /^margin/,\n        rnumsplit = new RegExp( \"^(\" + core_pnum + \")(.*)$\", \"i\" ),\n        rnumnonpx = new RegExp( \"^(\" + core_pnum + \")(?!px)[a-z%]+$\", \"i\" ),\n        rrelNum = new RegExp( \"^([+-])=(\" + core_pnum + \")\", \"i\" ),\n        elemdisplay = { BODY: \"block\" },\n\n        cssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n        cssNormalTransform = {\n            letterSpacing: 0,\n            fontWeight: 400\n        },\n\n        cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ],\n        cssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ];\n\n// return a css property mapped to a potentially vendor prefixed property\n    function vendorPropName( style, name ) {\n\n        // shortcut for names that are not vendor prefixed\n        if ( name in style ) {\n            return name;\n        }\n\n        // check for vendor prefixed names\n        var capName = name.charAt(0).toUpperCase() + name.slice(1),\n            origName = name,\n            i = cssPrefixes.length;\n\n        while ( i-- ) {\n            name = cssPrefixes[ i ] + capName;\n            if ( name in style ) {\n                return name;\n            }\n        }\n\n        return origName;\n    }\n\n    function isHidden( elem, el ) {\n        // isHidden might be called from jQuery#filter function;\n        // in that case, element will be second argument\n        elem = el || elem;\n        return jQuery.css( elem, \"display\" ) === \"none\" || !jQuery.contains( elem.ownerDocument, elem );\n    }\n\n    function showHide( elements, show ) {\n        var display, elem, hidden,\n            values = [],\n            index = 0,\n            length = elements.length;\n\n        for ( ; index < length; index++ ) {\n            elem = elements[ index ];\n            if ( !elem.style ) {\n                continue;\n            }\n\n            values[ index ] = jQuery._data( elem, \"olddisplay\" );\n            display = elem.style.display;\n            if ( show ) {\n                // Reset the inline display of this element to learn if it is\n                // being hidden by cascaded rules or not\n                if ( !values[ index ] && display === \"none\" ) {\n                    elem.style.display = \"\";\n                }\n\n                // Set elements which have been overridden with display: none\n                // in a stylesheet to whatever the default browser style is\n                // for such an element\n                if ( elem.style.display === \"\" && isHidden( elem ) ) {\n                    values[ index ] = jQuery._data( elem, \"olddisplay\", css_defaultDisplay(elem.nodeName) );\n                }\n            } else {\n\n                if ( !values[ index ] ) {\n                    hidden = isHidden( elem );\n\n                    if ( display && display !== \"none\" || !hidden ) {\n                        jQuery._data( elem, \"olddisplay\", hidden ? display : jQuery.css( elem, \"display\" ) );\n                    }\n                }\n            }\n        }\n\n        // Set the display of most of the elements in a second loop\n        // to avoid the constant reflow\n        for ( index = 0; index < length; index++ ) {\n            elem = elements[ index ];\n            if ( !elem.style ) {\n                continue;\n            }\n            if ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\n                elem.style.display = show ? values[ index ] || \"\" : \"none\";\n            }\n        }\n\n        return elements;\n    }\n\n    jQuery.fn.extend({\n        css: function( name, value ) {\n            return jQuery.access( this, function( elem, name, value ) {\n                var len, styles,\n                    map = {},\n                    i = 0;\n\n                if ( jQuery.isArray( name ) ) {\n                    styles = getStyles( elem );\n                    len = name.length;\n\n                    for ( ; i < len; i++ ) {\n                        map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n                    }\n\n                    return map;\n                }\n\n                return value !== undefined ?\n                    jQuery.style( elem, name, value ) :\n                    jQuery.css( elem, name );\n            }, name, value, arguments.length > 1 );\n        },\n        show: function() {\n            return showHide( this, true );\n        },\n        hide: function() {\n            return showHide( this );\n        },\n        toggle: function( state ) {\n            var bool = typeof state === \"boolean\";\n\n            return this.each(function() {\n                if ( bool ? state : isHidden( this ) ) {\n                    jQuery( this ).show();\n                } else {\n                    jQuery( this ).hide();\n                }\n            });\n        }\n    });\n\n    jQuery.extend({\n        // Add in style property hooks for overriding the default\n        // behavior of getting and setting a style property\n        cssHooks: {\n            opacity: {\n                get: function( elem, computed ) {\n                    if ( computed ) {\n                        // We should always get a number back from opacity\n                        var ret = curCSS( elem, \"opacity\" );\n                        return ret === \"\" ? \"1\" : ret;\n                    }\n                }\n            }\n        },\n\n        // Exclude the following css properties to add px\n        cssNumber: {\n            \"columnCount\": true,\n            \"fillOpacity\": true,\n            \"fontWeight\": true,\n            \"lineHeight\": true,\n            \"opacity\": true,\n            \"orphans\": true,\n            \"widows\": true,\n            \"zIndex\": true,\n            \"zoom\": true\n        },\n\n        // Add in properties whose names you wish to fix before\n        // setting or getting the value\n        cssProps: {\n            // normalize float css property\n            \"float\": jQuery.support.cssFloat ? \"cssFloat\" : \"styleFloat\"\n        },\n\n        // Get and set the style property on a DOM Node\n        style: function( elem, name, value, extra ) {\n            // Don't set styles on text and comment nodes\n            if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n                return;\n            }\n\n            // Make sure that we're working with the right name\n            var ret, type, hooks,\n                origName = jQuery.camelCase( name ),\n                style = elem.style;\n\n            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );\n\n            // gets hook for the prefixed version\n            // followed by the unprefixed version\n            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n            // Check if we're setting a value\n            if ( value !== undefined ) {\n                type = typeof value;\n\n                // convert relative number strings (+= or -=) to relative numbers. #7345\n                if ( type === \"string\" && (ret = rrelNum.exec( value )) ) {\n                    value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );\n                    // Fixes bug #9237\n                    type = \"number\";\n                }\n\n                // Make sure that NaN and null values aren't set. See: #7116\n                if ( value == null || type === \"number\" && isNaN( value ) ) {\n                    return;\n                }\n\n                // If a number was passed in, add 'px' to the (except for certain CSS properties)\n                if ( type === \"number\" && !jQuery.cssNumber[ origName ] ) {\n                    value += \"px\";\n                }\n\n                // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,\n                // but it would mean to define eight (for every problematic property) identical functions\n                if ( !jQuery.support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0 ) {\n                    style[ name ] = \"inherit\";\n                }\n\n                // If a hook was provided, use that value, otherwise just set the specified value\n                if ( !hooks || !(\"set\" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {\n\n                    // Wrapped to prevent IE from throwing errors when 'invalid' values are provided\n                    // Fixes bug #5509\n                    try {\n                        style[ name ] = value;\n                    } catch(e) {}\n                }\n\n            } else {\n                // If a hook was provided get the non-computed value from there\n                if ( hooks && \"get\" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {\n                    return ret;\n                }\n\n                // Otherwise just get the value from the style object\n                return style[ name ];\n            }\n        },\n\n        css: function( elem, name, extra, styles ) {\n            var num, val, hooks,\n                origName = jQuery.camelCase( name );\n\n            // Make sure that we're working with the right name\n            name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );\n\n            // gets hook for the prefixed version\n            // followed by the unprefixed version\n            hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n            // If a hook was provided get the computed value from there\n            if ( hooks && \"get\" in hooks ) {\n                val = hooks.get( elem, true, extra );\n            }\n\n            // Otherwise, if a way to get the computed value exists, use that\n            if ( val === undefined ) {\n                val = curCSS( elem, name, styles );\n            }\n\n            //convert \"normal\" to computed value\n            if ( val === \"normal\" && name in cssNormalTransform ) {\n                val = cssNormalTransform[ name ];\n            }\n\n            // Return, converting to number if forced or a qualifier was provided and val looks numeric\n            if ( extra === \"\" || extra ) {\n                num = parseFloat( val );\n                return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;\n            }\n            return val;\n        },\n\n        // A method for quickly swapping in/out CSS properties to get correct calculations\n        swap: function( elem, options, callback, args ) {\n            var ret, name,\n                old = {};\n\n            // Remember the old values, and insert the new ones\n            for ( name in options ) {\n                old[ name ] = elem.style[ name ];\n                elem.style[ name ] = options[ name ];\n            }\n\n            ret = callback.apply( elem, args || [] );\n\n            // Revert the old values\n            for ( name in options ) {\n                elem.style[ name ] = old[ name ];\n            }\n\n            return ret;\n        }\n    });\n\n// NOTE: we've included the \"window\" in window.getComputedStyle\n// because jsdom on node.js will break without it.\n    if ( window.getComputedStyle ) {\n        getStyles = function( elem ) {\n            return window.getComputedStyle( elem, null );\n        };\n\n        curCSS = function( elem, name, _computed ) {\n            var width, minWidth, maxWidth,\n                computed = _computed || getStyles( elem ),\n\n            // getPropertyValue is only needed for .css('filter') in IE9, see #12537\n                ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,\n                style = elem.style;\n\n            if ( computed ) {\n\n                if ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n                    ret = jQuery.style( elem, name );\n                }\n\n                // A tribute to the \"awesome hack by Dean Edwards\"\n                // Chrome < 17 and Safari 5.0 uses \"computed value\" instead of \"used value\" for margin-right\n                // Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels\n                // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values\n                if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n                    // Remember the original values\n                    width = style.width;\n                    minWidth = style.minWidth;\n                    maxWidth = style.maxWidth;\n\n                    // Put in the new values to get a computed value out\n                    style.minWidth = style.maxWidth = style.width = ret;\n                    ret = computed.width;\n\n                    // Revert the changed values\n                    style.width = width;\n                    style.minWidth = minWidth;\n                    style.maxWidth = maxWidth;\n                }\n            }\n\n            return ret;\n        };\n    } else if ( document.documentElement.currentStyle ) {\n        getStyles = function( elem ) {\n            return elem.currentStyle;\n        };\n\n        curCSS = function( elem, name, _computed ) {\n            var left, rs, rsLeft,\n                computed = _computed || getStyles( elem ),\n                ret = computed ? computed[ name ] : undefined,\n                style = elem.style;\n\n            // Avoid setting ret to empty string here\n            // so we don't default to auto\n            if ( ret == null && style && style[ name ] ) {\n                ret = style[ name ];\n            }\n\n            // From the awesome hack by Dean Edwards\n            // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n\n            // If we're not dealing with a regular pixel number\n            // but a number that has a weird ending, we need to convert it to pixels\n            // but not position css attributes, as those are proportional to the parent element instead\n            // and we can't measure the parent instead because it might trigger a \"stacking dolls\" problem\n            if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {\n\n                // Remember the original values\n                left = style.left;\n                rs = elem.runtimeStyle;\n                rsLeft = rs && rs.left;\n\n                // Put in the new values to get a computed value out\n                if ( rsLeft ) {\n                    rs.left = elem.currentStyle.left;\n                }\n                style.left = name === \"fontSize\" ? \"1em\" : ret;\n                ret = style.pixelLeft + \"px\";\n\n                // Revert the changed values\n                style.left = left;\n                if ( rsLeft ) {\n                    rs.left = rsLeft;\n                }\n            }\n\n            return ret === \"\" ? \"auto\" : ret;\n        };\n    }\n\n    function setPositiveNumber( elem, value, subtract ) {\n        var matches = rnumsplit.exec( value );\n        return matches ?\n            // Guard against undefined \"subtract\", e.g., when used as in cssHooks\n            Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || \"px\" ) :\n            value;\n    }\n\n    function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n        var i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\n                // If we already have the right measurement, avoid augmentation\n                4 :\n                // Otherwise initialize for horizontal or vertical properties\n                name === \"width\" ? 1 : 0,\n\n            val = 0;\n\n        for ( ; i < 4; i += 2 ) {\n            // both box models exclude margin, so add it if we want it\n            if ( extra === \"margin\" ) {\n                val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n            }\n\n            if ( isBorderBox ) {\n                // border-box includes padding, so remove it if we want content\n                if ( extra === \"content\" ) {\n                    val -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n                }\n\n                // at this point, extra isn't border nor margin, so remove border\n                if ( extra !== \"margin\" ) {\n                    val -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n                }\n            } else {\n                // at this point, extra isn't content, so add padding\n                val += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n                // at this point, extra isn't content nor padding, so add border\n                if ( extra !== \"padding\" ) {\n                    val += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n                }\n            }\n        }\n\n        return val;\n    }\n\n    function getWidthOrHeight( elem, name, extra ) {\n\n        // Start with offset property, which is equivalent to the border-box value\n        var valueIsBorderBox = true,\n            val = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n            styles = getStyles( elem ),\n            isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n        // some non-html elements return undefined for offsetWidth, so check for null/undefined\n        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n        if ( val <= 0 || val == null ) {\n            // Fall back to computed then uncomputed css if necessary\n            val = curCSS( elem, name, styles );\n            if ( val < 0 || val == null ) {\n                val = elem.style[ name ];\n            }\n\n            // Computed unit is not pixels. Stop here and return.\n            if ( rnumnonpx.test(val) ) {\n                return val;\n            }\n\n            // we need the check for style in case a browser which returns unreliable values\n            // for getComputedStyle silently falls back to the reliable elem.style\n            valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );\n\n            // Normalize \"\", auto, and prepare for extra\n            val = parseFloat( val ) || 0;\n        }\n\n        // use the active box-sizing model to add/subtract irrelevant styles\n        return ( val +\n            augmentWidthOrHeight(\n                elem,\n                name,\n                extra || ( isBorderBox ? \"border\" : \"content\" ),\n                valueIsBorderBox,\n                styles\n            )\n            ) + \"px\";\n    }\n\n// Try to determine the default display value of an element\n    function css_defaultDisplay( nodeName ) {\n        var doc = document,\n            display = elemdisplay[ nodeName ];\n\n        if ( !display ) {\n            display = actualDisplay( nodeName, doc );\n\n            // If the simple way fails, read from inside an iframe\n            if ( display === \"none\" || !display ) {\n                // Use the already-created iframe if possible\n                iframe = ( iframe ||\n                    jQuery(\"<iframe frameborder='0' width='0' height='0'/>\")\n                        .css( \"cssText\", \"display:block !important\" )\n                    ).appendTo( doc.documentElement );\n\n                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n                doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;\n                doc.write(\"<!doctype html><html><body>\");\n                doc.close();\n\n                display = actualDisplay( nodeName, doc );\n                iframe.detach();\n            }\n\n            // Store the correct default display\n            elemdisplay[ nodeName ] = display;\n        }\n\n        return display;\n    }\n\n// Called ONLY from within css_defaultDisplay\n    function actualDisplay( name, doc ) {\n        var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n            display = jQuery.css( elem[0], \"display\" );\n        elem.remove();\n        return display;\n    }\n\n    jQuery.each([ \"height\", \"width\" ], function( i, name ) {\n        jQuery.cssHooks[ name ] = {\n            get: function( elem, computed, extra ) {\n                if ( computed ) {\n                    // certain elements can have dimension info if we invisibly show them\n                    // however, it must have a current display style that would benefit from this\n                    return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, \"display\" ) ) ?\n                        jQuery.swap( elem, cssShow, function() {\n                            return getWidthOrHeight( elem, name, extra );\n                        }) :\n                        getWidthOrHeight( elem, name, extra );\n                }\n            },\n\n            set: function( elem, value, extra ) {\n                var styles = extra && getStyles( elem );\n                return setPositiveNumber( elem, value, extra ?\n                    augmentWidthOrHeight(\n                        elem,\n                        name,\n                        extra,\n                        jQuery.support.boxSizing && jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n                        styles\n                    ) : 0\n                );\n            }\n        };\n    });\n\n    if ( !jQuery.support.opacity ) {\n        jQuery.cssHooks.opacity = {\n            get: function( elem, computed ) {\n                // IE uses filters for opacity\n                return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || \"\" ) ?\n                    ( 0.01 * parseFloat( RegExp.$1 ) ) + \"\" :\n                    computed ? \"1\" : \"\";\n            },\n\n            set: function( elem, value ) {\n                var style = elem.style,\n                    currentStyle = elem.currentStyle,\n                    opacity = jQuery.isNumeric( value ) ? \"alpha(opacity=\" + value * 100 + \")\" : \"\",\n                    filter = currentStyle && currentStyle.filter || style.filter || \"\";\n\n                // IE has trouble with opacity if it does not have layout\n                // Force it by setting the zoom level\n                style.zoom = 1;\n\n                // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652\n                // if value === \"\", then remove inline opacity #12685\n                if ( ( value >= 1 || value === \"\" ) &&\n                    jQuery.trim( filter.replace( ralpha, \"\" ) ) === \"\" &&\n                    style.removeAttribute ) {\n\n                    // Setting style.filter to null, \"\" & \" \" still leave \"filter:\" in the cssText\n                    // if \"filter:\" is present at all, clearType is disabled, we want to avoid this\n                    // style.removeAttribute is IE Only, but so apparently is this code path...\n                    style.removeAttribute( \"filter\" );\n\n                    // if there is no filter style applied in a css rule or unset inline opacity, we are done\n                    if ( value === \"\" || currentStyle && !currentStyle.filter ) {\n                        return;\n                    }\n                }\n\n                // otherwise, set new filter values\n                style.filter = ralpha.test( filter ) ?\n                    filter.replace( ralpha, opacity ) :\n                    filter + \" \" + opacity;\n            }\n        };\n    }\n\n// These hooks cannot be added until DOM ready because the support test\n// for it is not run until after DOM ready\n    jQuery(function() {\n        if ( !jQuery.support.reliableMarginRight ) {\n            jQuery.cssHooks.marginRight = {\n                get: function( elem, computed ) {\n                    if ( computed ) {\n                        // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n                        // Work around by temporarily setting element display to inline-block\n                        return jQuery.swap( elem, { \"display\": \"inline-block\" },\n                            curCSS, [ elem, \"marginRight\" ] );\n                    }\n                }\n            };\n        }\n\n        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n        // getComputedStyle returns percent when specified for top/left/bottom/right\n        // rather than make the css module depend on the offset module, we just check for it here\n        if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {\n            jQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n                jQuery.cssHooks[ prop ] = {\n                    get: function( elem, computed ) {\n                        if ( computed ) {\n                            computed = curCSS( elem, prop );\n                            // if curCSS returns percentage, fallback to offset\n                            return rnumnonpx.test( computed ) ?\n                                jQuery( elem ).position()[ prop ] + \"px\" :\n                                computed;\n                        }\n                    }\n                };\n            });\n        }\n\n    });\n\n    if ( jQuery.expr && jQuery.expr.filters ) {\n        jQuery.expr.filters.hidden = function( elem ) {\n            // Support: Opera <= 12.12\n            // Opera reports offsetWidths and offsetHeights less than zero on some elements\n            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||\n                (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, \"display\" )) === \"none\");\n        };\n\n        jQuery.expr.filters.visible = function( elem ) {\n            return !jQuery.expr.filters.hidden( elem );\n        };\n    }\n\n// These hooks are used by animate to expand properties\n    jQuery.each({\n        margin: \"\",\n        padding: \"\",\n        border: \"Width\"\n    }, function( prefix, suffix ) {\n        jQuery.cssHooks[ prefix + suffix ] = {\n            expand: function( value ) {\n                var i = 0,\n                    expanded = {},\n\n                // assumes a single number if not a string\n                    parts = typeof value === \"string\" ? value.split(\" \") : [ value ];\n\n                for ( ; i < 4; i++ ) {\n                    expanded[ prefix + cssExpand[ i ] + suffix ] =\n                        parts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n                }\n\n                return expanded;\n            }\n        };\n\n        if ( !rmargin.test( prefix ) ) {\n            jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n        }\n    });\n    var r20 = /%20/g,\n        rbracket = /\\[\\]$/,\n        rCRLF = /\\r?\\n/g,\n        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n        rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n    jQuery.fn.extend({\n        serialize: function() {\n            return jQuery.param( this.serializeArray() );\n        },\n        serializeArray: function() {\n            return this.map(function(){\n                // Can add propHook for \"elements\" to filter or add form elements\n                var elements = jQuery.prop( this, \"elements\" );\n                return elements ? jQuery.makeArray( elements ) : this;\n            })\n                .filter(function(){\n                    var type = this.type;\n                    // Use .is(\":disabled\") so that fieldset[disabled] works\n                    return this.name && !jQuery( this ).is( \":disabled\" ) &&\n                        rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n                        ( this.checked || !manipulation_rcheckableType.test( type ) );\n                })\n                .map(function( i, elem ){\n                    var val = jQuery( this ).val();\n\n                    return val == null ?\n                        null :\n                        jQuery.isArray( val ) ?\n                            jQuery.map( val, function( val ){\n                                return { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n                            }) :\n                        { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n                }).get();\n        }\n    });\n\n//Serialize an array of form elements or a set of\n//key/values into a query string\n    jQuery.param = function( a, traditional ) {\n        var prefix,\n            s = [],\n            add = function( key, value ) {\n                // If value is a function, invoke it and return its value\n                value = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\n                s[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\n            };\n\n        // Set traditional to true for jQuery <= 1.3.2 behavior.\n        if ( traditional === undefined ) {\n            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n        }\n\n        // If an array was passed in, assume that it is an array of form elements.\n        if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n            // Serialize the form elements\n            jQuery.each( a, function() {\n                add( this.name, this.value );\n            });\n\n        } else {\n            // If traditional, encode the \"old\" way (the way 1.3.2 or older\n            // did it), otherwise encode params recursively.\n            for ( prefix in a ) {\n                buildParams( prefix, a[ prefix ], traditional, add );\n            }\n        }\n\n        // Return the resulting serialization\n        return s.join( \"&\" ).replace( r20, \"+\" );\n    };\n\n    function buildParams( prefix, obj, traditional, add ) {\n        var name;\n\n        if ( jQuery.isArray( obj ) ) {\n            // Serialize array item.\n            jQuery.each( obj, function( i, v ) {\n                if ( traditional || rbracket.test( prefix ) ) {\n                    // Treat each array item as a scalar.\n                    add( prefix, v );\n\n                } else {\n                    // Item is non-scalar (array or object), encode its numeric index.\n                    buildParams( prefix + \"[\" + ( typeof v === \"object\" ? i : \"\" ) + \"]\", v, traditional, add );\n                }\n            });\n\n        } else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n            // Serialize object item.\n            for ( name in obj ) {\n                buildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n            }\n\n        } else {\n            // Serialize scalar item.\n            add( prefix, obj );\n        }\n    }\n    jQuery.each( (\"blur focus focusin focusout load resize scroll unload click dblclick \" +\n        \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n        \"change select submit keydown keypress keyup error contextmenu\").split(\" \"), function( i, name ) {\n\n        // Handle event binding\n        jQuery.fn[ name ] = function( data, fn ) {\n            return arguments.length > 0 ?\n                this.on( name, null, data, fn ) :\n                this.trigger( name );\n        };\n    });\n\n    jQuery.fn.hover = function( fnOver, fnOut ) {\n        return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n    };\n    var\n    // Document location\n        ajaxLocParts,\n        ajaxLocation,\n        ajax_nonce = jQuery.now(),\n\n        ajax_rquery = /\\?/,\n        rhash = /#.*$/,\n        rts = /([?&])_=[^&]*/,\n        rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/mg, // IE leaves an \\r character at EOL\n    // #7653, #8125, #8152: local protocol detection\n        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n        rnoContent = /^(?:GET|HEAD)$/,\n        rprotocol = /^\\/\\//,\n        rurl = /^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,\n\n    // Keep a copy of the old load method\n        _load = jQuery.fn.load,\n\n    /* Prefilters\n     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n     * 2) These are called:\n     *    - BEFORE asking for a transport\n     *    - AFTER param serialization (s.data is a string if s.processData is true)\n     * 3) key is the dataType\n     * 4) the catchall symbol \"*\" can be used\n     * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n     */\n        prefilters = {},\n\n    /* Transports bindings\n     * 1) key is the dataType\n     * 2) the catchall symbol \"*\" can be used\n     * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n     */\n        transports = {},\n\n    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n        allTypes = \"*/\".concat(\"*\");\n\n// #8138, IE may throw an exception when accessing\n// a field from window.location if document.domain has been set\n    try {\n        ajaxLocation = location.href;\n    } catch( e ) {\n        // Use the href attribute of an A element\n        // since IE will modify it given document.location\n        ajaxLocation = document.createElement( \"a\" );\n        ajaxLocation.href = \"\";\n        ajaxLocation = ajaxLocation.href;\n    }\n\n// Segment location into parts\n    ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n    function addToPrefiltersOrTransports( structure ) {\n\n        // dataTypeExpression is optional and defaults to \"*\"\n        return function( dataTypeExpression, func ) {\n\n            if ( typeof dataTypeExpression !== \"string\" ) {\n                func = dataTypeExpression;\n                dataTypeExpression = \"*\";\n            }\n\n            var dataType,\n                i = 0,\n                dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];\n\n            if ( jQuery.isFunction( func ) ) {\n                // For each dataType in the dataTypeExpression\n                while ( (dataType = dataTypes[i++]) ) {\n                    // Prepend if requested\n                    if ( dataType[0] === \"+\" ) {\n                        dataType = dataType.slice( 1 ) || \"*\";\n                        (structure[ dataType ] = structure[ dataType ] || []).unshift( func );\n\n                        // Otherwise append\n                    } else {\n                        (structure[ dataType ] = structure[ dataType ] || []).push( func );\n                    }\n                }\n            }\n        };\n    }\n\n// Base inspection function for prefilters and transports\n    function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n        var inspected = {},\n            seekingTransport = ( structure === transports );\n\n        function inspect( dataType ) {\n            var selected;\n            inspected[ dataType ] = true;\n            jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n                var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n                if( typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n                    options.dataTypes.unshift( dataTypeOrTransport );\n                    inspect( dataTypeOrTransport );\n                    return false;\n                } else if ( seekingTransport ) {\n                    return !( selected = dataTypeOrTransport );\n                }\n            });\n            return selected;\n        }\n\n        return inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n    }\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\n    function ajaxExtend( target, src ) {\n        var deep, key,\n            flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n        for ( key in src ) {\n            if ( src[ key ] !== undefined ) {\n                ( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];\n            }\n        }\n        if ( deep ) {\n            jQuery.extend( true, target, deep );\n        }\n\n        return target;\n    }\n\n    jQuery.fn.load = function( url, params, callback ) {\n        if ( typeof url !== \"string\" && _load ) {\n            return _load.apply( this, arguments );\n        }\n\n        var selector, response, type,\n            self = this,\n            off = url.indexOf(\" \");\n\n        if ( off >= 0 ) {\n            selector = url.slice( off, url.length );\n            url = url.slice( 0, off );\n        }\n\n        // If it's a function\n        if ( jQuery.isFunction( params ) ) {\n\n            // We assume that it's the callback\n            callback = params;\n            params = undefined;\n\n            // Otherwise, build a param string\n        } else if ( params && typeof params === \"object\" ) {\n            type = \"POST\";\n        }\n\n        // If we have elements to modify, make the request\n        if ( self.length > 0 ) {\n            jQuery.ajax({\n                url: url,\n\n                // if \"type\" variable is undefined, then \"GET\" method will be used\n                type: type,\n                dataType: \"html\",\n                data: params\n            }).done(function( responseText ) {\n\n                    // Save response for use in complete callback\n                    response = arguments;\n\n                    self.html( selector ?\n\n                        // If a selector was specified, locate the right elements in a dummy div\n                        // Exclude scripts to avoid IE 'Permission Denied' errors\n                        jQuery(\"<div>\").append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n                        // Otherwise use the full result\n                        responseText );\n\n                }).complete( callback && function( jqXHR, status ) {\n                    self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );\n                });\n        }\n\n        return this;\n    };\n\n// Attach a bunch of functions for handling common AJAX events\n    jQuery.each( [ \"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\" ], function( i, type ){\n        jQuery.fn[ type ] = function( fn ){\n            return this.on( type, fn );\n        };\n    });\n\n    jQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n        jQuery[ method ] = function( url, data, callback, type ) {\n            // shift arguments if data argument was omitted\n            if ( jQuery.isFunction( data ) ) {\n                type = type || callback;\n                callback = data;\n                data = undefined;\n            }\n\n            return jQuery.ajax({\n                url: url,\n                type: method,\n                dataType: type,\n                data: data,\n                success: callback\n            });\n        };\n    });\n\n    jQuery.extend({\n\n        // Counter for holding the number of active queries\n        active: 0,\n\n        // Last-Modified header cache for next request\n        lastModified: {},\n        etag: {},\n\n        ajaxSettings: {\n            url: ajaxLocation,\n            type: \"GET\",\n            isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),\n            global: true,\n            processData: true,\n            async: true,\n            contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n            /*\n             timeout: 0,\n             data: null,\n             dataType: null,\n             username: null,\n             password: null,\n             cache: null,\n             throws: false,\n             traditional: false,\n             headers: {},\n             */\n\n            accepts: {\n                \"*\": allTypes,\n                text: \"text/plain\",\n                html: \"text/html\",\n                xml: \"application/xml, text/xml\",\n                json: \"application/json, text/javascript\"\n            },\n\n            contents: {\n                xml: /xml/,\n                html: /html/,\n                json: /json/\n            },\n\n            responseFields: {\n                xml: \"responseXML\",\n                text: \"responseText\"\n            },\n\n            // Data converters\n            // Keys separate source (or catchall \"*\") and destination types with a single space\n            converters: {\n\n                // Convert anything to text\n                \"* text\": window.String,\n\n                // Text to html (true = no transformation)\n                \"text html\": true,\n\n                // Evaluate text as a json expression\n                \"text json\": jQuery.parseJSON,\n\n                // Parse text as xml\n                \"text xml\": jQuery.parseXML\n            },\n\n            // For options that shouldn't be deep extended:\n            // you can add your own custom options here if\n            // and when you create one that shouldn't be\n            // deep extended (see ajaxExtend)\n            flatOptions: {\n                url: true,\n                context: true\n            }\n        },\n\n        // Creates a full fledged settings object into target\n        // with both ajaxSettings and settings fields.\n        // If target is omitted, writes into ajaxSettings.\n        ajaxSetup: function( target, settings ) {\n            return settings ?\n\n                // Building a settings object\n                ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n                // Extending ajaxSettings\n                ajaxExtend( jQuery.ajaxSettings, target );\n        },\n\n        ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n        ajaxTransport: addToPrefiltersOrTransports( transports ),\n\n        // Main method\n        ajax: function( url, options ) {\n\n            // If url is an object, simulate pre-1.5 signature\n            if ( typeof url === \"object\" ) {\n                options = url;\n                url = undefined;\n            }\n\n            // Force options to be an object\n            options = options || {};\n\n            var // Cross-domain detection vars\n                parts,\n            // Loop variable\n                i,\n            // URL without anti-cache param\n                cacheURL,\n            // Response headers as string\n                responseHeadersString,\n            // timeout handle\n                timeoutTimer,\n\n            // To know if global events are to be dispatched\n                fireGlobals,\n\n                transport,\n            // Response headers\n                responseHeaders,\n            // Create the final options object\n                s = jQuery.ajaxSetup( {}, options ),\n            // Callbacks context\n                callbackContext = s.context || s,\n            // Context for global events is callbackContext if it is a DOM node or jQuery collection\n                globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?\n                    jQuery( callbackContext ) :\n                    jQuery.event,\n            // Deferreds\n                deferred = jQuery.Deferred(),\n                completeDeferred = jQuery.Callbacks(\"once memory\"),\n            // Status-dependent callbacks\n                statusCode = s.statusCode || {},\n            // Headers (they are sent all at once)\n                requestHeaders = {},\n                requestHeadersNames = {},\n            // The jqXHR state\n                state = 0,\n            // Default abort message\n                strAbort = \"canceled\",\n            // Fake xhr\n                jqXHR = {\n                    readyState: 0,\n\n                    // Builds headers hashtable if needed\n                    getResponseHeader: function( key ) {\n                        var match;\n                        if ( state === 2 ) {\n                            if ( !responseHeaders ) {\n                                responseHeaders = {};\n                                while ( (match = rheaders.exec( responseHeadersString )) ) {\n                                    responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];\n                                }\n                            }\n                            match = responseHeaders[ key.toLowerCase() ];\n                        }\n                        return match == null ? null : match;\n                    },\n\n                    // Raw string\n                    getAllResponseHeaders: function() {\n                        return state === 2 ? responseHeadersString : null;\n                    },\n\n                    // Caches the header\n                    setRequestHeader: function( name, value ) {\n                        var lname = name.toLowerCase();\n                        if ( !state ) {\n                            name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n                            requestHeaders[ name ] = value;\n                        }\n                        return this;\n                    },\n\n                    // Overrides response content-type header\n                    overrideMimeType: function( type ) {\n                        if ( !state ) {\n                            s.mimeType = type;\n                        }\n                        return this;\n                    },\n\n                    // Status-dependent callbacks\n                    statusCode: function( map ) {\n                        var code;\n                        if ( map ) {\n                            if ( state < 2 ) {\n                                for ( code in map ) {\n                                    // Lazy-add the new callback in a way that preserves old ones\n                                    statusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n                                }\n                            } else {\n                                // Execute the appropriate callbacks\n                                jqXHR.always( map[ jqXHR.status ] );\n                            }\n                        }\n                        return this;\n                    },\n\n                    // Cancel the request\n                    abort: function( statusText ) {\n                        var finalText = statusText || strAbort;\n                        if ( transport ) {\n                            transport.abort( finalText );\n                        }\n                        done( 0, finalText );\n                        return this;\n                    }\n                };\n\n            // Attach deferreds\n            deferred.promise( jqXHR ).complete = completeDeferred.add;\n            jqXHR.success = jqXHR.done;\n            jqXHR.error = jqXHR.fail;\n\n            // Remove hash character (#7531: and string promotion)\n            // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)\n            // Handle falsy url in the settings object (#10093: consistency with old signature)\n            // We also use the url parameter if available\n            s.url = ( ( url || s.url || ajaxLocation ) + \"\" ).replace( rhash, \"\" ).replace( rprotocol, ajaxLocParts[ 1 ] + \"//\" );\n\n            // Alias method option to type as per ticket #12004\n            s.type = options.method || options.type || s.method || s.type;\n\n            // Extract dataTypes list\n            s.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( core_rnotwhite ) || [\"\"];\n\n            // A cross-domain request is in order when we have a protocol:host:port mismatch\n            if ( s.crossDomain == null ) {\n                parts = rurl.exec( s.url.toLowerCase() );\n                s.crossDomain = !!( parts &&\n                    ( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||\n                        ( parts[ 3 ] || ( parts[ 1 ] === \"http:\" ? 80 : 443 ) ) !=\n                            ( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === \"http:\" ? 80 : 443 ) ) )\n                    );\n            }\n\n            // Convert data if not already a string\n            if ( s.data && s.processData && typeof s.data !== \"string\" ) {\n                s.data = jQuery.param( s.data, s.traditional );\n            }\n\n            // Apply prefilters\n            inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n            // If request was aborted inside a prefilter, stop there\n            if ( state === 2 ) {\n                return jqXHR;\n            }\n\n            // We can fire global events as of now if asked to\n            fireGlobals = s.global;\n\n            // Watch for a new set of requests\n            if ( fireGlobals && jQuery.active++ === 0 ) {\n                jQuery.event.trigger(\"ajaxStart\");\n            }\n\n            // Uppercase the type\n            s.type = s.type.toUpperCase();\n\n            // Determine if request has content\n            s.hasContent = !rnoContent.test( s.type );\n\n            // Save the URL in case we're toying with the If-Modified-Since\n            // and/or If-None-Match header later on\n            cacheURL = s.url;\n\n            // More options handling for requests with no content\n            if ( !s.hasContent ) {\n\n                // If data is available, append data to url\n                if ( s.data ) {\n                    cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\n                    // #9682: remove data so that it's not used in an eventual retry\n                    delete s.data;\n                }\n\n                // Add anti-cache in url if needed\n                if ( s.cache === false ) {\n                    s.url = rts.test( cacheURL ) ?\n\n                        // If there is already a '_' parameter, set its value\n                        cacheURL.replace( rts, \"$1_=\" + ajax_nonce++ ) :\n\n                        // Otherwise add one to the end\n                        cacheURL + ( ajax_rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ajax_nonce++;\n                }\n            }\n\n            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n            if ( s.ifModified ) {\n                if ( jQuery.lastModified[ cacheURL ] ) {\n                    jqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n                }\n                if ( jQuery.etag[ cacheURL ] ) {\n                    jqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n                }\n            }\n\n            // Set the correct header, if data is being sent\n            if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n                jqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n            }\n\n            // Set the Accepts header for the server, depending on the dataType\n            jqXHR.setRequestHeader(\n                \"Accept\",\n                s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?\n                    s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n                    s.accepts[ \"*\" ]\n            );\n\n            // Check for headers option\n            for ( i in s.headers ) {\n                jqXHR.setRequestHeader( i, s.headers[ i ] );\n            }\n\n            // Allow custom headers/mimetypes and early abort\n            if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n                // Abort if not done already and return\n                return jqXHR.abort();\n            }\n\n            // aborting is no longer a cancellation\n            strAbort = \"abort\";\n\n            // Install callbacks on deferreds\n            for ( i in { success: 1, error: 1, complete: 1 } ) {\n                jqXHR[ i ]( s[ i ] );\n            }\n\n            // Get transport\n            transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n            // If no transport, we auto-abort\n            if ( !transport ) {\n                done( -1, \"No Transport\" );\n            } else {\n                jqXHR.readyState = 1;\n\n                // Send global event\n                if ( fireGlobals ) {\n                    globalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n                }\n                // Timeout\n                if ( s.async && s.timeout > 0 ) {\n                    timeoutTimer = setTimeout(function() {\n                        jqXHR.abort(\"timeout\");\n                    }, s.timeout );\n                }\n\n                try {\n                    state = 1;\n                    transport.send( requestHeaders, done );\n                } catch ( e ) {\n                    // Propagate exception as error if not done\n                    if ( state < 2 ) {\n                        done( -1, e );\n                        // Simply rethrow otherwise\n                    } else {\n                        throw e;\n                    }\n                }\n            }\n\n            // Callback for when everything is done\n            function done( status, nativeStatusText, responses, headers ) {\n                var isSuccess, success, error, response, modified,\n                    statusText = nativeStatusText;\n\n                // Called once\n                if ( state === 2 ) {\n                    return;\n                }\n\n                // State is \"done\" now\n                state = 2;\n\n                // Clear timeout if it exists\n                if ( timeoutTimer ) {\n                    clearTimeout( timeoutTimer );\n                }\n\n                // Dereference transport for early garbage collection\n                // (no matter how long the jqXHR object will be used)\n                transport = undefined;\n\n                // Cache response headers\n                responseHeadersString = headers || \"\";\n\n                // Set readyState\n                jqXHR.readyState = status > 0 ? 4 : 0;\n\n                // Get response data\n                if ( responses ) {\n                    response = ajaxHandleResponses( s, jqXHR, responses );\n                }\n\n                // If successful, handle type chaining\n                if ( status >= 200 && status < 300 || status === 304 ) {\n\n                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n                    if ( s.ifModified ) {\n                        modified = jqXHR.getResponseHeader(\"Last-Modified\");\n                        if ( modified ) {\n                            jQuery.lastModified[ cacheURL ] = modified;\n                        }\n                        modified = jqXHR.getResponseHeader(\"etag\");\n                        if ( modified ) {\n                            jQuery.etag[ cacheURL ] = modified;\n                        }\n                    }\n\n                    // if no content\n                    if ( status === 204 ) {\n                        isSuccess = true;\n                        statusText = \"nocontent\";\n\n                        // if not modified\n                    } else if ( status === 304 ) {\n                        isSuccess = true;\n                        statusText = \"notmodified\";\n\n                        // If we have data, let's convert it\n                    } else {\n                        isSuccess = ajaxConvert( s, response );\n                        statusText = isSuccess.state;\n                        success = isSuccess.data;\n                        error = isSuccess.error;\n                        isSuccess = !error;\n                    }\n                } else {\n                    // We extract error from statusText\n                    // then normalize statusText and status for non-aborts\n                    error = statusText;\n                    if ( status || !statusText ) {\n                        statusText = \"error\";\n                        if ( status < 0 ) {\n                            status = 0;\n                        }\n                    }\n                }\n\n                // Set data for the fake xhr object\n                jqXHR.status = status;\n                jqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n                // Success/Error\n                if ( isSuccess ) {\n                    deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n                } else {\n                    deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n                }\n\n                // Status-dependent callbacks\n                jqXHR.statusCode( statusCode );\n                statusCode = undefined;\n\n                if ( fireGlobals ) {\n                    globalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n                        [ jqXHR, s, isSuccess ? success : error ] );\n                }\n\n                // Complete\n                completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n                if ( fireGlobals ) {\n                    globalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n                    // Handle the global AJAX counter\n                    if ( !( --jQuery.active ) ) {\n                        jQuery.event.trigger(\"ajaxStop\");\n                    }\n                }\n            }\n\n            return jqXHR;\n        },\n\n        getScript: function( url, callback ) {\n            return jQuery.get( url, undefined, callback, \"script\" );\n        },\n\n        getJSON: function( url, data, callback ) {\n            return jQuery.get( url, data, callback, \"json\" );\n        }\n    });\n\n    /* Handles responses to an ajax request:\n     * - sets all responseXXX fields accordingly\n     * - finds the right dataType (mediates between content-type and expected dataType)\n     * - returns the corresponding response\n     */\n    function ajaxHandleResponses( s, jqXHR, responses ) {\n        var firstDataType, ct, finalDataType, type,\n            contents = s.contents,\n            dataTypes = s.dataTypes,\n            responseFields = s.responseFields;\n\n        // Fill responseXXX fields\n        for ( type in responseFields ) {\n            if ( type in responses ) {\n                jqXHR[ responseFields[type] ] = responses[ type ];\n            }\n        }\n\n        // Remove auto dataType and get content-type in the process\n        while( dataTypes[ 0 ] === \"*\" ) {\n            dataTypes.shift();\n            if ( ct === undefined ) {\n                ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n            }\n        }\n\n        // Check if we're dealing with a known content-type\n        if ( ct ) {\n            for ( type in contents ) {\n                if ( contents[ type ] && contents[ type ].test( ct ) ) {\n                    dataTypes.unshift( type );\n                    break;\n                }\n            }\n        }\n\n        // Check to see if we have a response for the expected dataType\n        if ( dataTypes[ 0 ] in responses ) {\n            finalDataType = dataTypes[ 0 ];\n        } else {\n            // Try convertible dataTypes\n            for ( type in responses ) {\n                if ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[0] ] ) {\n                    finalDataType = type;\n                    break;\n                }\n                if ( !firstDataType ) {\n                    firstDataType = type;\n                }\n            }\n            // Or just use first one\n            finalDataType = finalDataType || firstDataType;\n        }\n\n        // If we found a dataType\n        // We add the dataType to the list if needed\n        // and return the corresponding response\n        if ( finalDataType ) {\n            if ( finalDataType !== dataTypes[ 0 ] ) {\n                dataTypes.unshift( finalDataType );\n            }\n            return responses[ finalDataType ];\n        }\n    }\n\n// Chain conversions given the request and the original response\n    function ajaxConvert( s, response ) {\n        var conv2, current, conv, tmp,\n            converters = {},\n            i = 0,\n        // Work with a copy of dataTypes in case we need to modify it for conversion\n            dataTypes = s.dataTypes.slice(),\n            prev = dataTypes[ 0 ];\n\n        // Apply the dataFilter if provided\n        if ( s.dataFilter ) {\n            response = s.dataFilter( response, s.dataType );\n        }\n\n        // Create converters map with lowercased keys\n        if ( dataTypes[ 1 ] ) {\n            for ( conv in s.converters ) {\n                converters[ conv.toLowerCase() ] = s.converters[ conv ];\n            }\n        }\n\n        // Convert to each sequential dataType, tolerating list modification\n        for ( ; (current = dataTypes[++i]); ) {\n\n            // There's only work to do if current dataType is non-auto\n            if ( current !== \"*\" ) {\n\n                // Convert response if prev dataType is non-auto and differs from current\n                if ( prev !== \"*\" && prev !== current ) {\n\n                    // Seek a direct converter\n                    conv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n                    // If none found, seek a pair\n                    if ( !conv ) {\n                        for ( conv2 in converters ) {\n\n                            // If conv2 outputs current\n                            tmp = conv2.split(\" \");\n                            if ( tmp[ 1 ] === current ) {\n\n                                // If prev can be converted to accepted input\n                                conv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n                                    converters[ \"* \" + tmp[ 0 ] ];\n                                if ( conv ) {\n                                    // Condense equivalence converters\n                                    if ( conv === true ) {\n                                        conv = converters[ conv2 ];\n\n                                        // Otherwise, insert the intermediate dataType\n                                    } else if ( converters[ conv2 ] !== true ) {\n                                        current = tmp[ 0 ];\n                                        dataTypes.splice( i--, 0, current );\n                                    }\n\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    // Apply converter (if not an equivalence)\n                    if ( conv !== true ) {\n\n                        // Unless errors are allowed to bubble, catch and return them\n                        if ( conv && s[\"throws\"] ) {\n                            response = conv( response );\n                        } else {\n                            try {\n                                response = conv( response );\n                            } catch ( e ) {\n                                return { state: \"parsererror\", error: conv ? e : \"No conversion from \" + prev + \" to \" + current };\n                            }\n                        }\n                    }\n                }\n\n                // Update prev for next iteration\n                prev = current;\n            }\n        }\n\n        return { state: \"success\", data: response };\n    }\n// Install script dataType\n    jQuery.ajaxSetup({\n        accepts: {\n            script: \"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"\n        },\n        contents: {\n            script: /(?:java|ecma)script/\n        },\n        converters: {\n            \"text script\": function( text ) {\n                jQuery.globalEval( text );\n                return text;\n            }\n        }\n    });\n\n// Handle cache's special case and global\n    jQuery.ajaxPrefilter( \"script\", function( s ) {\n        if ( s.cache === undefined ) {\n            s.cache = false;\n        }\n        if ( s.crossDomain ) {\n            s.type = \"GET\";\n            s.global = false;\n        }\n    });\n\n// Bind script tag hack transport\n    jQuery.ajaxTransport( \"script\", function(s) {\n\n        // This transport only deals with cross domain requests\n        if ( s.crossDomain ) {\n\n            var script,\n                head = document.head || jQuery(\"head\")[0] || document.documentElement;\n\n            return {\n\n                send: function( _, callback ) {\n\n                    script = document.createElement(\"script\");\n\n                    script.async = true;\n\n                    if ( s.scriptCharset ) {\n                        script.charset = s.scriptCharset;\n                    }\n\n                    script.src = s.url;\n\n                    // Attach handlers for all browsers\n                    script.onload = script.onreadystatechange = function( _, isAbort ) {\n\n                        if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\n\n                            // Handle memory leak in IE\n                            script.onload = script.onreadystatechange = null;\n\n                            // Remove the script\n                            if ( script.parentNode ) {\n                                script.parentNode.removeChild( script );\n                            }\n\n                            // Dereference the script\n                            script = null;\n\n                            // Callback if not abort\n                            if ( !isAbort ) {\n                                callback( 200, \"success\" );\n                            }\n                        }\n                    };\n\n                    // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending\n                    // Use native DOM manipulation to avoid our domManip AJAX trickery\n                    head.insertBefore( script, head.firstChild );\n                },\n\n                abort: function() {\n                    if ( script ) {\n                        script.onload( undefined, true );\n                    }\n                }\n            };\n        }\n    });\n    var oldCallbacks = [],\n        rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\n    jQuery.ajaxSetup({\n        jsonp: \"callback\",\n        jsonpCallback: function() {\n            var callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( ajax_nonce++ ) );\n            this[ callback ] = true;\n            return callback;\n        }\n    });\n\n// Detect, normalize options and install callbacks for jsonp requests\n    jQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n        var callbackName, overwritten, responseContainer,\n            jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n                \"url\" :\n                typeof s.data === \"string\" && !( s.contentType || \"\" ).indexOf(\"application/x-www-form-urlencoded\") && rjsonp.test( s.data ) && \"data\"\n                );\n\n        // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n        if ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n            // Get callback name, remembering preexisting value associated with it\n            callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n                s.jsonpCallback() :\n                s.jsonpCallback;\n\n            // Insert callback into url or form data\n            if ( jsonProp ) {\n                s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n            } else if ( s.jsonp !== false ) {\n                s.url += ( ajax_rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n            }\n\n            // Use data converter to retrieve json after script execution\n            s.converters[\"script json\"] = function() {\n                if ( !responseContainer ) {\n                    jQuery.error( callbackName + \" was not called\" );\n                }\n                return responseContainer[ 0 ];\n            };\n\n            // force json dataType\n            s.dataTypes[ 0 ] = \"json\";\n\n            // Install callback\n            overwritten = window[ callbackName ];\n            window[ callbackName ] = function() {\n                responseContainer = arguments;\n            };\n\n            // Clean-up function (fires after converters)\n            jqXHR.always(function() {\n                // Restore preexisting value\n                window[ callbackName ] = overwritten;\n\n                // Save back as free\n                if ( s[ callbackName ] ) {\n                    // make sure that re-using the options doesn't screw things around\n                    s.jsonpCallback = originalSettings.jsonpCallback;\n\n                    // save the callback name for future use\n                    oldCallbacks.push( callbackName );\n                }\n\n                // Call if it was a function and we have a response\n                if ( responseContainer && jQuery.isFunction( overwritten ) ) {\n                    overwritten( responseContainer[ 0 ] );\n                }\n\n                responseContainer = overwritten = undefined;\n            });\n\n            // Delegate to script\n            return \"script\";\n        }\n    });\n    var xhrCallbacks, xhrSupported,\n        xhrId = 0,\n    // #5280: Internet Explorer will keep connections alive if we don't abort on unload\n        xhrOnUnloadAbort = window.ActiveXObject && function() {\n            // Abort all pending requests\n            var key;\n            for ( key in xhrCallbacks ) {\n                xhrCallbacks[ key ]( undefined, true );\n            }\n        };\n\n// Functions to create xhrs\n    function createStandardXHR() {\n        try {\n            return new window.XMLHttpRequest();\n        } catch( e ) {}\n    }\n\n    function createActiveXHR() {\n        try {\n            return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n        } catch( e ) {}\n    }\n\n// Create the request object\n// (This is still attached to ajaxSettings for backward compatibility)\n    jQuery.ajaxSettings.xhr = window.ActiveXObject ?\n        /* Microsoft failed to properly\n         * implement the XMLHttpRequest in IE7 (can't request local files),\n         * so we use the ActiveXObject when it is available\n         * Additionally XMLHttpRequest can be disabled in IE7/IE8 so\n         * we need a fallback.\n         */\n        function() {\n            return !this.isLocal && createStandardXHR() || createActiveXHR();\n        } :\n        // For all other browsers, use the standard XMLHttpRequest object\n        createStandardXHR;\n\n// Determine support properties\n    xhrSupported = jQuery.ajaxSettings.xhr();\n    jQuery.support.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\n    xhrSupported = jQuery.support.ajax = !!xhrSupported;\n\n// Create transport if the browser can provide an xhr\n    if ( xhrSupported ) {\n\n        jQuery.ajaxTransport(function( s ) {\n            // Cross domain only allowed if supported through XMLHttpRequest\n            if ( !s.crossDomain || jQuery.support.cors ) {\n\n                var callback;\n\n                return {\n                    send: function( headers, complete ) {\n\n                        // Get a new xhr\n                        var handle, i,\n                            xhr = s.xhr();\n\n                        // Open the socket\n                        // Passing null username, generates a login popup on Opera (#2865)\n                        if ( s.username ) {\n                            xhr.open( s.type, s.url, s.async, s.username, s.password );\n                        } else {\n                            xhr.open( s.type, s.url, s.async );\n                        }\n\n                        // Apply custom fields if provided\n                        if ( s.xhrFields ) {\n                            for ( i in s.xhrFields ) {\n                                xhr[ i ] = s.xhrFields[ i ];\n                            }\n                        }\n\n                        // Override mime type if needed\n                        if ( s.mimeType && xhr.overrideMimeType ) {\n                            xhr.overrideMimeType( s.mimeType );\n                        }\n\n                        // X-Requested-With header\n                        // For cross-domain requests, seeing as conditions for a preflight are\n                        // akin to a jigsaw puzzle, we simply never set it to be sure.\n                        // (it can always be set on a per-request basis or even using ajaxSetup)\n                        // For same-domain requests, won't change header if already provided.\n                        if ( !s.crossDomain && !headers[\"X-Requested-With\"] ) {\n                            headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        }\n\n                        // Need an extra try/catch for cross domain requests in Firefox 3\n                        try {\n                            for ( i in headers ) {\n                                xhr.setRequestHeader( i, headers[ i ] );\n                            }\n                        } catch( err ) {}\n\n                        // Do send the request\n                        // This may raise an exception which is actually\n                        // handled in jQuery.ajax (so no try/catch here)\n                        xhr.send( ( s.hasContent && s.data ) || null );\n\n                        // Listener\n                        callback = function( _, isAbort ) {\n                            var status, responseHeaders, statusText, responses;\n\n                            // Firefox throws exceptions when accessing properties\n                            // of an xhr when a network error occurred\n                            // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)\n                            try {\n\n                                // Was never called and is aborted or complete\n                                if ( callback && ( isAbort || xhr.readyState === 4 ) ) {\n\n                                    // Only called once\n                                    callback = undefined;\n\n                                    // Do not keep as active anymore\n                                    if ( handle ) {\n                                        xhr.onreadystatechange = jQuery.noop;\n                                        if ( xhrOnUnloadAbort ) {\n                                            delete xhrCallbacks[ handle ];\n                                        }\n                                    }\n\n                                    // If it's an abort\n                                    if ( isAbort ) {\n                                        // Abort it manually if needed\n                                        if ( xhr.readyState !== 4 ) {\n                                            xhr.abort();\n                                        }\n                                    } else {\n                                        responses = {};\n                                        status = xhr.status;\n                                        responseHeaders = xhr.getAllResponseHeaders();\n\n                                        // When requesting binary data, IE6-9 will throw an exception\n                                        // on any attempt to access responseText (#11426)\n                                        if ( typeof xhr.responseText === \"string\" ) {\n                                            responses.text = xhr.responseText;\n                                        }\n\n                                        // Firefox throws an exception when accessing\n                                        // statusText for faulty cross-domain requests\n                                        try {\n                                            statusText = xhr.statusText;\n                                        } catch( e ) {\n                                            // We normalize with Webkit giving an empty statusText\n                                            statusText = \"\";\n                                        }\n\n                                        // Filter status for non standard behaviors\n\n                                        // If the request is local and we have data: assume a success\n                                        // (success with no data won't get notified, that's the best we\n                                        // can do given current implementations)\n                                        if ( !status && s.isLocal && !s.crossDomain ) {\n                                            status = responses.text ? 200 : 404;\n                                            // IE - #1450: sometimes returns 1223 when it should be 204\n                                        } else if ( status === 1223 ) {\n                                            status = 204;\n                                        }\n                                    }\n                                }\n                            } catch( firefoxAccessException ) {\n                                if ( !isAbort ) {\n                                    complete( -1, firefoxAccessException );\n                                }\n                            }\n\n                            // Call complete if needed\n                            if ( responses ) {\n                                complete( status, statusText, responses, responseHeaders );\n                            }\n                        };\n\n                        if ( !s.async ) {\n                            // if we're in sync mode we fire the callback\n                            callback();\n                        } else if ( xhr.readyState === 4 ) {\n                            // (IE6 & IE7) if it's in cache and has been\n                            // retrieved directly we need to fire the callback\n                            setTimeout( callback );\n                        } else {\n                            handle = ++xhrId;\n                            if ( xhrOnUnloadAbort ) {\n                                // Create the active xhrs callbacks list if needed\n                                // and attach the unload handler\n                                if ( !xhrCallbacks ) {\n                                    xhrCallbacks = {};\n                                    jQuery( window ).unload( xhrOnUnloadAbort );\n                                }\n                                // Add to list of active xhrs callbacks\n                                xhrCallbacks[ handle ] = callback;\n                            }\n                            xhr.onreadystatechange = callback;\n                        }\n                    },\n\n                    abort: function() {\n                        if ( callback ) {\n                            callback( undefined, true );\n                        }\n                    }\n                };\n            }\n        });\n    }\n    var fxNow, timerId,\n        rfxtypes = /^(?:toggle|show|hide)$/,\n        rfxnum = new RegExp( \"^(?:([+-])=|)(\" + core_pnum + \")([a-z%]*)$\", \"i\" ),\n        rrun = /queueHooks$/,\n        animationPrefilters = [ defaultPrefilter ],\n        tweeners = {\n            \"*\": [function( prop, value ) {\n                var end, unit,\n                    tween = this.createTween( prop, value ),\n                    parts = rfxnum.exec( value ),\n                    target = tween.cur(),\n                    start = +target || 0,\n                    scale = 1,\n                    maxIterations = 20;\n\n                if ( parts ) {\n                    end = +parts[2];\n                    unit = parts[3] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\n                    // We need to compute starting value\n                    if ( unit !== \"px\" && start ) {\n                        // Iteratively approximate from a nonzero starting point\n                        // Prefer the current property, because this process will be trivial if it uses the same units\n                        // Fallback to end or a simple constant\n                        start = jQuery.css( tween.elem, prop, true ) || end || 1;\n\n                        do {\n                            // If previous iteration zeroed out, double until we get *something*\n                            // Use a string for doubling factor so we don't accidentally see scale as unchanged below\n                            scale = scale || \".5\";\n\n                            // Adjust and apply\n                            start = start / scale;\n                            jQuery.style( tween.elem, prop, start + unit );\n\n                            // Update scale, tolerating zero or NaN from tween.cur()\n                            // And breaking the loop if scale is unchanged or perfect, or if we've just had enough\n                        } while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );\n                    }\n\n                    tween.unit = unit;\n                    tween.start = start;\n                    // If a +=/-= token was provided, we're doing a relative animation\n                    tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;\n                }\n                return tween;\n            }]\n        };\n\n// Animations created synchronously will run synchronously\n    function createFxNow() {\n        setTimeout(function() {\n            fxNow = undefined;\n        });\n        return ( fxNow = jQuery.now() );\n    }\n\n    function createTweens( animation, props ) {\n        jQuery.each( props, function( prop, value ) {\n            var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ \"*\" ] ),\n                index = 0,\n                length = collection.length;\n            for ( ; index < length; index++ ) {\n                if ( collection[ index ].call( animation, prop, value ) ) {\n\n                    // we're done with this property\n                    return;\n                }\n            }\n        });\n    }\n\n    function Animation( elem, properties, options ) {\n        var result,\n            stopped,\n            index = 0,\n            length = animationPrefilters.length,\n            deferred = jQuery.Deferred().always( function() {\n                // don't match elem in the :animated selector\n                delete tick.elem;\n            }),\n            tick = function() {\n                if ( stopped ) {\n                    return false;\n                }\n                var currentTime = fxNow || createFxNow(),\n                    remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n                // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)\n                    temp = remaining / animation.duration || 0,\n                    percent = 1 - temp,\n                    index = 0,\n                    length = animation.tweens.length;\n\n                for ( ; index < length ; index++ ) {\n                    animation.tweens[ index ].run( percent );\n                }\n\n                deferred.notifyWith( elem, [ animation, percent, remaining ]);\n\n                if ( percent < 1 && length ) {\n                    return remaining;\n                } else {\n                    deferred.resolveWith( elem, [ animation ] );\n                    return false;\n                }\n            },\n            animation = deferred.promise({\n                elem: elem,\n                props: jQuery.extend( {}, properties ),\n                opts: jQuery.extend( true, { specialEasing: {} }, options ),\n                originalProperties: properties,\n                originalOptions: options,\n                startTime: fxNow || createFxNow(),\n                duration: options.duration,\n                tweens: [],\n                createTween: function( prop, end ) {\n                    var tween = jQuery.Tween( elem, animation.opts, prop, end,\n                        animation.opts.specialEasing[ prop ] || animation.opts.easing );\n                    animation.tweens.push( tween );\n                    return tween;\n                },\n                stop: function( gotoEnd ) {\n                    var index = 0,\n                    // if we are going to the end, we want to run all the tweens\n                    // otherwise we skip this part\n                        length = gotoEnd ? animation.tweens.length : 0;\n                    if ( stopped ) {\n                        return this;\n                    }\n                    stopped = true;\n                    for ( ; index < length ; index++ ) {\n                        animation.tweens[ index ].run( 1 );\n                    }\n\n                    // resolve when we played the last frame\n                    // otherwise, reject\n                    if ( gotoEnd ) {\n                        deferred.resolveWith( elem, [ animation, gotoEnd ] );\n                    } else {\n                        deferred.rejectWith( elem, [ animation, gotoEnd ] );\n                    }\n                    return this;\n                }\n            }),\n            props = animation.props;\n\n        propFilter( props, animation.opts.specialEasing );\n\n        for ( ; index < length ; index++ ) {\n            result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );\n            if ( result ) {\n                return result;\n            }\n        }\n\n        createTweens( animation, props );\n\n        if ( jQuery.isFunction( animation.opts.start ) ) {\n            animation.opts.start.call( elem, animation );\n        }\n\n        jQuery.fx.timer(\n            jQuery.extend( tick, {\n                elem: elem,\n                anim: animation,\n                queue: animation.opts.queue\n            })\n        );\n\n        // attach callbacks from options\n        return animation.progress( animation.opts.progress )\n            .done( animation.opts.done, animation.opts.complete )\n            .fail( animation.opts.fail )\n            .always( animation.opts.always );\n    }\n\n    function propFilter( props, specialEasing ) {\n        var value, name, index, easing, hooks;\n\n        // camelCase, specialEasing and expand cssHook pass\n        for ( index in props ) {\n            name = jQuery.camelCase( index );\n            easing = specialEasing[ name ];\n            value = props[ index ];\n            if ( jQuery.isArray( value ) ) {\n                easing = value[ 1 ];\n                value = props[ index ] = value[ 0 ];\n            }\n\n            if ( index !== name ) {\n                props[ name ] = value;\n                delete props[ index ];\n            }\n\n            hooks = jQuery.cssHooks[ name ];\n            if ( hooks && \"expand\" in hooks ) {\n                value = hooks.expand( value );\n                delete props[ name ];\n\n                // not quite $.extend, this wont overwrite keys already present.\n                // also - reusing 'index' from above because we have the correct \"name\"\n                for ( index in value ) {\n                    if ( !( index in props ) ) {\n                        props[ index ] = value[ index ];\n                        specialEasing[ index ] = easing;\n                    }\n                }\n            } else {\n                specialEasing[ name ] = easing;\n            }\n        }\n    }\n\n    jQuery.Animation = jQuery.extend( Animation, {\n\n        tweener: function( props, callback ) {\n            if ( jQuery.isFunction( props ) ) {\n                callback = props;\n                props = [ \"*\" ];\n            } else {\n                props = props.split(\" \");\n            }\n\n            var prop,\n                index = 0,\n                length = props.length;\n\n            for ( ; index < length ; index++ ) {\n                prop = props[ index ];\n                tweeners[ prop ] = tweeners[ prop ] || [];\n                tweeners[ prop ].unshift( callback );\n            }\n        },\n\n        prefilter: function( callback, prepend ) {\n            if ( prepend ) {\n                animationPrefilters.unshift( callback );\n            } else {\n                animationPrefilters.push( callback );\n            }\n        }\n    });\n\n    function defaultPrefilter( elem, props, opts ) {\n        /*jshint validthis:true */\n        var prop, index, length,\n            value, dataShow, toggle,\n            tween, hooks, oldfire,\n            anim = this,\n            style = elem.style,\n            orig = {},\n            handled = [],\n            hidden = elem.nodeType && isHidden( elem );\n\n        // handle queue: false promises\n        if ( !opts.queue ) {\n            hooks = jQuery._queueHooks( elem, \"fx\" );\n            if ( hooks.unqueued == null ) {\n                hooks.unqueued = 0;\n                oldfire = hooks.empty.fire;\n                hooks.empty.fire = function() {\n                    if ( !hooks.unqueued ) {\n                        oldfire();\n                    }\n                };\n            }\n            hooks.unqueued++;\n\n            anim.always(function() {\n                // doing this makes sure that the complete handler will be called\n                // before this completes\n                anim.always(function() {\n                    hooks.unqueued--;\n                    if ( !jQuery.queue( elem, \"fx\" ).length ) {\n                        hooks.empty.fire();\n                    }\n                });\n            });\n        }\n\n        // height/width overflow pass\n        if ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\n            // Make sure that nothing sneaks out\n            // Record all 3 overflow attributes because IE does not\n            // change the overflow attribute when overflowX and\n            // overflowY are set to the same value\n            opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n            // Set display property to inline-block for height/width\n            // animations on inline elements that are having width/height animated\n            if ( jQuery.css( elem, \"display\" ) === \"inline\" &&\n                jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n                // inline-level elements accept inline-block;\n                // block-level elements need to be inline with layout\n                if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === \"inline\" ) {\n                    style.display = \"inline-block\";\n\n                } else {\n                    style.zoom = 1;\n                }\n            }\n        }\n\n        if ( opts.overflow ) {\n            style.overflow = \"hidden\";\n            if ( !jQuery.support.shrinkWrapBlocks ) {\n                anim.always(function() {\n                    style.overflow = opts.overflow[ 0 ];\n                    style.overflowX = opts.overflow[ 1 ];\n                    style.overflowY = opts.overflow[ 2 ];\n                });\n            }\n        }\n\n\n        // show/hide pass\n        for ( index in props ) {\n            value = props[ index ];\n            if ( rfxtypes.exec( value ) ) {\n                delete props[ index ];\n                toggle = toggle || value === \"toggle\";\n                if ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n                    continue;\n                }\n                handled.push( index );\n            }\n        }\n\n        length = handled.length;\n        if ( length ) {\n            dataShow = jQuery._data( elem, \"fxshow\" ) || jQuery._data( elem, \"fxshow\", {} );\n            if ( \"hidden\" in dataShow ) {\n                hidden = dataShow.hidden;\n            }\n\n            // store state if its toggle - enables .stop().toggle() to \"reverse\"\n            if ( toggle ) {\n                dataShow.hidden = !hidden;\n            }\n            if ( hidden ) {\n                jQuery( elem ).show();\n            } else {\n                anim.done(function() {\n                    jQuery( elem ).hide();\n                });\n            }\n            anim.done(function() {\n                var prop;\n                jQuery._removeData( elem, \"fxshow\" );\n                for ( prop in orig ) {\n                    jQuery.style( elem, prop, orig[ prop ] );\n                }\n            });\n            for ( index = 0 ; index < length ; index++ ) {\n                prop = handled[ index ];\n                tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );\n                orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );\n\n                if ( !( prop in dataShow ) ) {\n                    dataShow[ prop ] = tween.start;\n                    if ( hidden ) {\n                        tween.end = tween.start;\n                        tween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n                    }\n                }\n            }\n        }\n    }\n\n    function Tween( elem, options, prop, end, easing ) {\n        return new Tween.prototype.init( elem, options, prop, end, easing );\n    }\n    jQuery.Tween = Tween;\n\n    Tween.prototype = {\n        constructor: Tween,\n        init: function( elem, options, prop, end, easing, unit ) {\n            this.elem = elem;\n            this.prop = prop;\n            this.easing = easing || \"swing\";\n            this.options = options;\n            this.start = this.now = this.cur();\n            this.end = end;\n            this.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n        },\n        cur: function() {\n            var hooks = Tween.propHooks[ this.prop ];\n\n            return hooks && hooks.get ?\n                hooks.get( this ) :\n                Tween.propHooks._default.get( this );\n        },\n        run: function( percent ) {\n            var eased,\n                hooks = Tween.propHooks[ this.prop ];\n\n            if ( this.options.duration ) {\n                this.pos = eased = jQuery.easing[ this.easing ](\n                    percent, this.options.duration * percent, 0, 1, this.options.duration\n                );\n            } else {\n                this.pos = eased = percent;\n            }\n            this.now = ( this.end - this.start ) * eased + this.start;\n\n            if ( this.options.step ) {\n                this.options.step.call( this.elem, this.now, this );\n            }\n\n            if ( hooks && hooks.set ) {\n                hooks.set( this );\n            } else {\n                Tween.propHooks._default.set( this );\n            }\n            return this;\n        }\n    };\n\n    Tween.prototype.init.prototype = Tween.prototype;\n\n    Tween.propHooks = {\n        _default: {\n            get: function( tween ) {\n                var result;\n\n                if ( tween.elem[ tween.prop ] != null &&\n                    (!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {\n                    return tween.elem[ tween.prop ];\n                }\n\n                // passing an empty string as a 3rd parameter to .css will automatically\n                // attempt a parseFloat and fallback to a string if the parse fails\n                // so, simple values such as \"10px\" are parsed to Float.\n                // complex values such as \"rotate(1rad)\" are returned as is.\n                result = jQuery.css( tween.elem, tween.prop, \"\" );\n                // Empty strings, null, undefined and \"auto\" are converted to 0.\n                return !result || result === \"auto\" ? 0 : result;\n            },\n            set: function( tween ) {\n                // use step hook for back compat - use cssHook if its there - use .style if its\n                // available and use plain properties where available\n                if ( jQuery.fx.step[ tween.prop ] ) {\n                    jQuery.fx.step[ tween.prop ]( tween );\n                } else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {\n                    jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n                } else {\n                    tween.elem[ tween.prop ] = tween.now;\n                }\n            }\n        }\n    };\n\n// Remove in 2.0 - this supports IE8's panic based approach\n// to setting things on disconnected nodes\n\n    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n        set: function( tween ) {\n            if ( tween.elem.nodeType && tween.elem.parentNode ) {\n                tween.elem[ tween.prop ] = tween.now;\n            }\n        }\n    };\n\n    jQuery.each([ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n        var cssFn = jQuery.fn[ name ];\n        jQuery.fn[ name ] = function( speed, easing, callback ) {\n            return speed == null || typeof speed === \"boolean\" ?\n                cssFn.apply( this, arguments ) :\n                this.animate( genFx( name, true ), speed, easing, callback );\n        };\n    });\n\n    jQuery.fn.extend({\n        fadeTo: function( speed, to, easing, callback ) {\n\n            // show any hidden elements after setting opacity to 0\n            return this.filter( isHidden ).css( \"opacity\", 0 ).show()\n\n                // animate to the value specified\n                .end().animate({ opacity: to }, speed, easing, callback );\n        },\n        animate: function( prop, speed, easing, callback ) {\n            var empty = jQuery.isEmptyObject( prop ),\n                optall = jQuery.speed( speed, easing, callback ),\n                doAnimation = function() {\n                    // Operate on a copy of prop so per-property easing won't be lost\n                    var anim = Animation( this, jQuery.extend( {}, prop ), optall );\n                    doAnimation.finish = function() {\n                        anim.stop( true );\n                    };\n                    // Empty animations, or finishing resolves immediately\n                    if ( empty || jQuery._data( this, \"finish\" ) ) {\n                        anim.stop( true );\n                    }\n                };\n            doAnimation.finish = doAnimation;\n\n            return empty || optall.queue === false ?\n                this.each( doAnimation ) :\n                this.queue( optall.queue, doAnimation );\n        },\n        stop: function( type, clearQueue, gotoEnd ) {\n            var stopQueue = function( hooks ) {\n                var stop = hooks.stop;\n                delete hooks.stop;\n                stop( gotoEnd );\n            };\n\n            if ( typeof type !== \"string\" ) {\n                gotoEnd = clearQueue;\n                clearQueue = type;\n                type = undefined;\n            }\n            if ( clearQueue && type !== false ) {\n                this.queue( type || \"fx\", [] );\n            }\n\n            return this.each(function() {\n                var dequeue = true,\n                    index = type != null && type + \"queueHooks\",\n                    timers = jQuery.timers,\n                    data = jQuery._data( this );\n\n                if ( index ) {\n                    if ( data[ index ] && data[ index ].stop ) {\n                        stopQueue( data[ index ] );\n                    }\n                } else {\n                    for ( index in data ) {\n                        if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n                            stopQueue( data[ index ] );\n                        }\n                    }\n                }\n\n                for ( index = timers.length; index--; ) {\n                    if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {\n                        timers[ index ].anim.stop( gotoEnd );\n                        dequeue = false;\n                        timers.splice( index, 1 );\n                    }\n                }\n\n                // start the next in the queue if the last step wasn't forced\n                // timers currently will call their complete callbacks, which will dequeue\n                // but only if they were gotoEnd\n                if ( dequeue || !gotoEnd ) {\n                    jQuery.dequeue( this, type );\n                }\n            });\n        },\n        finish: function( type ) {\n            if ( type !== false ) {\n                type = type || \"fx\";\n            }\n            return this.each(function() {\n                var index,\n                    data = jQuery._data( this ),\n                    queue = data[ type + \"queue\" ],\n                    hooks = data[ type + \"queueHooks\" ],\n                    timers = jQuery.timers,\n                    length = queue ? queue.length : 0;\n\n                // enable finishing flag on private data\n                data.finish = true;\n\n                // empty the queue first\n                jQuery.queue( this, type, [] );\n\n                if ( hooks && hooks.cur && hooks.cur.finish ) {\n                    hooks.cur.finish.call( this );\n                }\n\n                // look for any active animations, and finish them\n                for ( index = timers.length; index--; ) {\n                    if ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n                        timers[ index ].anim.stop( true );\n                        timers.splice( index, 1 );\n                    }\n                }\n\n                // look for any animations in the old queue and finish them\n                for ( index = 0; index < length; index++ ) {\n                    if ( queue[ index ] && queue[ index ].finish ) {\n                        queue[ index ].finish.call( this );\n                    }\n                }\n\n                // turn off finishing flag\n                delete data.finish;\n            });\n        }\n    });\n\n// Generate parameters to create a standard animation\n    function genFx( type, includeWidth ) {\n        var which,\n            attrs = { height: type },\n            i = 0;\n\n        // if we include width, step value is 1 to do all cssExpand values,\n        // if we don't include width, step value is 2 to skip over Left and Right\n        includeWidth = includeWidth? 1 : 0;\n        for( ; i < 4 ; i += 2 - includeWidth ) {\n            which = cssExpand[ i ];\n            attrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n        }\n\n        if ( includeWidth ) {\n            attrs.opacity = attrs.width = type;\n        }\n\n        return attrs;\n    }\n\n// Generate shortcuts for custom animations\n    jQuery.each({\n        slideDown: genFx(\"show\"),\n        slideUp: genFx(\"hide\"),\n        slideToggle: genFx(\"toggle\"),\n        fadeIn: { opacity: \"show\" },\n        fadeOut: { opacity: \"hide\" },\n        fadeToggle: { opacity: \"toggle\" }\n    }, function( name, props ) {\n        jQuery.fn[ name ] = function( speed, easing, callback ) {\n            return this.animate( props, speed, easing, callback );\n        };\n    });\n\n    jQuery.speed = function( speed, easing, fn ) {\n        var opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n            complete: fn || !fn && easing ||\n                jQuery.isFunction( speed ) && speed,\n            duration: speed,\n            easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n        };\n\n        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ? opt.duration :\n            opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n        // normalize opt.queue - true/undefined/null -> \"fx\"\n        if ( opt.queue == null || opt.queue === true ) {\n            opt.queue = \"fx\";\n        }\n\n        // Queueing\n        opt.old = opt.complete;\n\n        opt.complete = function() {\n            if ( jQuery.isFunction( opt.old ) ) {\n                opt.old.call( this );\n            }\n\n            if ( opt.queue ) {\n                jQuery.dequeue( this, opt.queue );\n            }\n        };\n\n        return opt;\n    };\n\n    jQuery.easing = {\n        linear: function( p ) {\n            return p;\n        },\n        swing: function( p ) {\n            return 0.5 - Math.cos( p*Math.PI ) / 2;\n        }\n    };\n\n    jQuery.timers = [];\n    jQuery.fx = Tween.prototype.init;\n    jQuery.fx.tick = function() {\n        var timer,\n            timers = jQuery.timers,\n            i = 0;\n\n        fxNow = jQuery.now();\n\n        for ( ; i < timers.length; i++ ) {\n            timer = timers[ i ];\n            // Checks the timer has not already been removed\n            if ( !timer() && timers[ i ] === timer ) {\n                timers.splice( i--, 1 );\n            }\n        }\n\n        if ( !timers.length ) {\n            jQuery.fx.stop();\n        }\n        fxNow = undefined;\n    };\n\n    jQuery.fx.timer = function( timer ) {\n        if ( timer() && jQuery.timers.push( timer ) ) {\n            jQuery.fx.start();\n        }\n    };\n\n    jQuery.fx.interval = 13;\n\n    jQuery.fx.start = function() {\n        if ( !timerId ) {\n            timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );\n        }\n    };\n\n    jQuery.fx.stop = function() {\n        clearInterval( timerId );\n        timerId = null;\n    };\n\n    jQuery.fx.speeds = {\n        slow: 600,\n        fast: 200,\n        // Default speed\n        _default: 400\n    };\n\n// Back Compat <1.8 extension point\n    jQuery.fx.step = {};\n\n    if ( jQuery.expr && jQuery.expr.filters ) {\n        jQuery.expr.filters.animated = function( elem ) {\n            return jQuery.grep(jQuery.timers, function( fn ) {\n                return elem === fn.elem;\n            }).length;\n        };\n    }\n    jQuery.fn.offset = function( options ) {\n        if ( arguments.length ) {\n            return options === undefined ?\n                this :\n                this.each(function( i ) {\n                    jQuery.offset.setOffset( this, options, i );\n                });\n        }\n\n        var docElem, win,\n            box = { top: 0, left: 0 },\n            elem = this[ 0 ],\n            doc = elem && elem.ownerDocument;\n\n        if ( !doc ) {\n            return;\n        }\n\n        docElem = doc.documentElement;\n\n        // Make sure it's not a disconnected DOM node\n        if ( !jQuery.contains( docElem, elem ) ) {\n            return box;\n        }\n\n        // If we don't have gBCR, just use 0,0 rather than error\n        // BlackBerry 5, iOS 3 (original iPhone)\n        if ( typeof elem.getBoundingClientRect !== core_strundefined ) {\n            box = elem.getBoundingClientRect();\n        }\n        win = getWindow( doc );\n        return {\n            top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),\n            left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )\n        };\n    };\n\n    jQuery.offset = {\n\n        setOffset: function( elem, options, i ) {\n            var position = jQuery.css( elem, \"position\" );\n\n            // set position first, in-case top/left are set even on static elem\n            if ( position === \"static\" ) {\n                elem.style.position = \"relative\";\n            }\n\n            var curElem = jQuery( elem ),\n                curOffset = curElem.offset(),\n                curCSSTop = jQuery.css( elem, \"top\" ),\n                curCSSLeft = jQuery.css( elem, \"left\" ),\n                calculatePosition = ( position === \"absolute\" || position === \"fixed\" ) && jQuery.inArray(\"auto\", [curCSSTop, curCSSLeft]) > -1,\n                props = {}, curPosition = {}, curTop, curLeft;\n\n            // need to be able to calculate position if either top or left is auto and position is either absolute or fixed\n            if ( calculatePosition ) {\n                curPosition = curElem.position();\n                curTop = curPosition.top;\n                curLeft = curPosition.left;\n            } else {\n                curTop = parseFloat( curCSSTop ) || 0;\n                curLeft = parseFloat( curCSSLeft ) || 0;\n            }\n\n            if ( jQuery.isFunction( options ) ) {\n                options = options.call( elem, i, curOffset );\n            }\n\n            if ( options.top != null ) {\n                props.top = ( options.top - curOffset.top ) + curTop;\n            }\n            if ( options.left != null ) {\n                props.left = ( options.left - curOffset.left ) + curLeft;\n            }\n\n            if ( \"using\" in options ) {\n                options.using.call( elem, props );\n            } else {\n                curElem.css( props );\n            }\n        }\n    };\n\n\n    jQuery.fn.extend({\n\n        position: function() {\n            if ( !this[ 0 ] ) {\n                return;\n            }\n\n            var offsetParent, offset,\n                parentOffset = { top: 0, left: 0 },\n                elem = this[ 0 ];\n\n            // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n            if ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n                // we assume that getBoundingClientRect is available when computed position is fixed\n                offset = elem.getBoundingClientRect();\n            } else {\n                // Get *real* offsetParent\n                offsetParent = this.offsetParent();\n\n                // Get correct offsets\n                offset = this.offset();\n                if ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n                    parentOffset = offsetParent.offset();\n                }\n\n                // Add offsetParent borders\n                parentOffset.top  += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\n                parentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\n            }\n\n            // Subtract parent offsets and element margins\n            // note: when an element has margin: auto the offsetLeft and marginLeft\n            // are the same in Safari causing offset.left to incorrectly be 0\n            return {\n                top:  offset.top  - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n                left: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true)\n            };\n        },\n\n        offsetParent: function() {\n            return this.map(function() {\n                var offsetParent = this.offsetParent || document.documentElement;\n                while ( offsetParent && ( !jQuery.nodeName( offsetParent, \"html\" ) && jQuery.css( offsetParent, \"position\") === \"static\" ) ) {\n                    offsetParent = offsetParent.offsetParent;\n                }\n                return offsetParent || document.documentElement;\n            });\n        }\n    });\n\n\n// Create scrollLeft and scrollTop methods\n    jQuery.each( {scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\"}, function( method, prop ) {\n        var top = /Y/.test( prop );\n\n        jQuery.fn[ method ] = function( val ) {\n            return jQuery.access( this, function( elem, method, val ) {\n                var win = getWindow( elem );\n\n                if ( val === undefined ) {\n                    return win ? (prop in win) ? win[ prop ] :\n                        win.document.documentElement[ method ] :\n                        elem[ method ];\n                }\n\n                if ( win ) {\n                    win.scrollTo(\n                        !top ? val : jQuery( win ).scrollLeft(),\n                        top ? val : jQuery( win ).scrollTop()\n                    );\n\n                } else {\n                    elem[ method ] = val;\n                }\n            }, method, val, arguments.length, null );\n        };\n    });\n\n    function getWindow( elem ) {\n        return jQuery.isWindow( elem ) ?\n            elem :\n            elem.nodeType === 9 ?\n                elem.defaultView || elem.parentWindow :\n                false;\n    }\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n    jQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n        jQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name }, function( defaultExtra, funcName ) {\n            // margin is only for outerHeight, outerWidth\n            jQuery.fn[ funcName ] = function( margin, value ) {\n                var chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n                    extra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n                return jQuery.access( this, function( elem, type, value ) {\n                    var doc;\n\n                    if ( jQuery.isWindow( elem ) ) {\n                        // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n                        // isn't a whole lot we can do. See pull request at this URL for discussion:\n                        // https://github.com/jquery/jquery/pull/764\n                        return elem.document.documentElement[ \"client\" + name ];\n                    }\n\n                    // Get document width or height\n                    if ( elem.nodeType === 9 ) {\n                        doc = elem.documentElement;\n\n                        // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest\n                        // unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.\n                        return Math.max(\n                            elem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n                            elem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n                            doc[ \"client\" + name ]\n                        );\n                    }\n\n                    return value === undefined ?\n                        // Get width or height on the element, requesting but not forcing parseFloat\n                        jQuery.css( elem, type, extra ) :\n\n                        // Set width or height on the element\n                        jQuery.style( elem, type, value, extra );\n                }, type, chainable ? margin : undefined, chainable, null );\n            };\n        });\n    });\n// Limit scope pollution from any deprecated API\n// (function() {\n\n// })();\n// Expose jQuery to the global object\n    window.jQuery = window.$ = jQuery;\n\n// Expose jQuery as an AMD module, but only for AMD loaders that\n// understand the issues with loading multiple versions of jQuery\n// in a page that all might call define(). The loader will indicate\n// they have special allowances for multiple jQuery versions by\n// specifying define.amd.jQuery = true. Register as a named module,\n// since jQuery can be concatenated with other files that may use define,\n// but not use a proper concatenation script that understands anonymous\n// AMD modules. A named AMD is safest and most robust way to register.\n// Lowercase jquery is used because AMD module names are derived from\n// file names, and jQuery is normally delivered in a lowercase file name.\n// Do this after creating the global so that if an AMD module wants to call\n// noConflict to hide this version of jQuery, it will work.\n    if ( typeof define === \"function\" && define.amd && define.amd.jQuery ) {\n        define( \"jquery\", [], function () { return jQuery; } );\n    }\n\n})( window );",
    "\n/**\n * @license AngularJS v1.1.5\n * (c) 2010-2012 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, document, undefined) {\n'use strict';\n\n////////////////////////////////////\n\n/**\n * @ngdoc function\n * @name angular.lowercase\n * @function\n *\n * @description Converts the specified string to lowercase.\n * @param {string} string String to be converted to lowercase.\n * @returns {string} Lowercased string.\n */\nvar lowercase = function(string){return isString(string) ? string.toLowerCase() : string;};\n\n\n/**\n * @ngdoc function\n * @name angular.uppercase\n * @function\n *\n * @description Converts the specified string to uppercase.\n * @param {string} string String to be converted to uppercase.\n * @returns {string} Uppercased string.\n */\nvar uppercase = function(string){return isString(string) ? string.toUpperCase() : string;};\n\n\nvar manualLowercase = function(s) {\n  return isString(s)\n      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})\n      : s;\n};\nvar manualUppercase = function(s) {\n  return isString(s)\n      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})\n      : s;\n};\n\n\n// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish\n// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods\n// with correct but slower alternatives.\nif ('i' !== 'I'.toLowerCase()) {\n  lowercase = manualLowercase;\n  uppercase = manualUppercase;\n}\n\n\nvar /** holds major version number for IE or NaN for real browsers */\n    msie              = int((/msie (\\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]),\n    jqLite,           // delay binding since jQuery could be loaded after us.\n    jQuery,           // delay binding\n    slice             = [].slice,\n    push              = [].push,\n    toString          = Object.prototype.toString,\n\n\n    _angular          = window.angular,\n    /** @name angular */\n    angular           = window.angular || (window.angular = {}),\n    angularModule,\n    nodeName_,\n    uid               = ['0', '0', '0'];\n\n/**\n * @ngdoc function\n * @name angular.noConflict\n * @function\n *\n * @description\n * Restores the previous global value of angular and returns the current instance. Other libraries may already use the\n * angular namespace. Or a previous version of angular is already loaded on the page. In these cases you may want to\n * restore the previous namespace and keep a reference to angular.\n *\n * @return {Object} The current angular namespace\n */\nfunction noConflict() {\n  var a = window.angular;\n  window.angular = _angular;\n  return a;\n}\n\n/**\n * @private\n * @param {*} obj\n * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments, ...)\n */\nfunction isArrayLike(obj) {\n  if (!obj || (typeof obj.length !== 'number')) return false;\n\n  // We have on object which has length property. Should we treat it as array?\n  if (typeof obj.hasOwnProperty != 'function' &&\n      typeof obj.constructor != 'function') {\n    // This is here for IE8: it is a bogus object treat it as array;\n    return true;\n  } else  {\n    return obj instanceof JQLite ||                      // JQLite\n           (jQuery && obj instanceof jQuery) ||          // jQuery\n           toString.call(obj) !== '[object Object]' ||   // some browser native object\n           typeof obj.callee === 'function';              // arguments (on IE8 looks like regular obj)\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.forEach\n * @function\n *\n * @description\n * Invokes the `iterator` function once for each item in `obj` collection, which can be either an\n * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`\n * is the value of an object property or an array element and `key` is the object property key or\n * array element index. Specifying a `context` for the function is optional.\n *\n * Note: this function was previously known as `angular.foreach`.\n *\n   <pre>\n     var values = {name: 'misko', gender: 'male'};\n     var log = [];\n     angular.forEach(values, function(value, key){\n       this.push(key + ': ' + value);\n     }, log);\n     expect(log).toEqual(['name: misko', 'gender:male']);\n   </pre>\n *\n * @param {Object|Array} obj Object to iterate over.\n * @param {Function} iterator Iterator function.\n * @param {Object=} context Object to become context (`this`) for the iterator function.\n * @returns {Object|Array} Reference to `obj`.\n */\nfunction forEach(obj, iterator, context) {\n  var key;\n  if (obj) {\n    if (isFunction(obj)){\n      for (key in obj) {\n        if (key != 'prototype' && key != 'length' && key != 'name' && obj.hasOwnProperty(key)) {\n          iterator.call(context, obj[key], key);\n        }\n      }\n    } else if (obj.forEach && obj.forEach !== forEach) {\n      obj.forEach(iterator, context);\n    } else if (isArrayLike(obj)) {\n      for (key = 0; key < obj.length; key++)\n        iterator.call(context, obj[key], key);\n    } else {\n      for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n          iterator.call(context, obj[key], key);\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nfunction sortedKeys(obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      keys.push(key);\n    }\n  }\n  return keys.sort();\n}\n\nfunction forEachSorted(obj, iterator, context) {\n  var keys = sortedKeys(obj);\n  for ( var i = 0; i < keys.length; i++) {\n    iterator.call(context, obj[keys[i]], keys[i]);\n  }\n  return keys;\n}\n\n\n/**\n * when using forEach the params are value, key, but it is often useful to have key, value.\n * @param {function(string, *)} iteratorFn\n * @returns {function(*, string)}\n */\nfunction reverseParams(iteratorFn) {\n  return function(value, key) { iteratorFn(key, value) };\n}\n\n/**\n * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric\n * characters such as '012ABC'. The reason why we are not using simply a number counter is that\n * the number string gets longer over time, and it can also overflow, where as the nextId\n * will grow much slower, it is a string, and it will never overflow.\n *\n * @returns an unique alpha-numeric string\n */\nfunction nextUid() {\n  var index = uid.length;\n  var digit;\n\n  while(index) {\n    index--;\n    digit = uid[index].charCodeAt(0);\n    if (digit == 57 /*'9'*/) {\n      uid[index] = 'A';\n      return uid.join('');\n    }\n    if (digit == 90  /*'Z'*/) {\n      uid[index] = '0';\n    } else {\n      uid[index] = String.fromCharCode(digit + 1);\n      return uid.join('');\n    }\n  }\n  uid.unshift('0');\n  return uid.join('');\n}\n\n\n/**\n * Set or clear the hashkey for an object.\n * @param obj object \n * @param h the hashkey (!truthy to delete the hashkey)\n */\nfunction setHashKey(obj, h) {\n  if (h) {\n    obj.$$hashKey = h;\n  }\n  else {\n    delete obj.$$hashKey;\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.extend\n * @function\n *\n * @description\n * Extends the destination object `dst` by copying all of the properties from the `src` object(s)\n * to `dst`. You can specify multiple `src` objects.\n *\n * @param {Object} dst Destination object.\n * @param {...Object} src Source object(s).\n * @returns {Object} Reference to `dst`.\n */\nfunction extend(dst) {\n  var h = dst.$$hashKey;\n  forEach(arguments, function(obj){\n    if (obj !== dst) {\n      forEach(obj, function(value, key){\n        dst[key] = value;\n      });\n    }\n  });\n\n  setHashKey(dst,h);\n  return dst;\n}\n\nfunction int(str) {\n  return parseInt(str, 10);\n}\n\n\nfunction inherit(parent, extra) {\n  return extend(new (extend(function() {}, {prototype:parent}))(), extra);\n}\n\nvar START_SPACE = /^\\s*/;\nvar END_SPACE = /\\s*$/;\nfunction stripWhitespace(str) {\n  return isString(str) ? str.replace(START_SPACE, '').replace(END_SPACE, '') : str;\n}\n\n/**\n * @ngdoc function\n * @name angular.noop\n * @function\n *\n * @description\n * A function that performs no operations. This function can be useful when writing code in the\n * functional style.\n   <pre>\n     function foo(callback) {\n       var result = calculateResult();\n       (callback || angular.noop)(result);\n     }\n   </pre>\n */\nfunction noop() {}\nnoop.$inject = [];\n\n\n/**\n * @ngdoc function\n * @name angular.identity\n * @function\n *\n * @description\n * A function that returns its first argument. This function is useful when writing code in the\n * functional style.\n *\n   <pre>\n     function transformer(transformationFn, value) {\n       return (transformationFn || identity)(value);\n     };\n   </pre>\n */\nfunction identity($) {return $;}\nidentity.$inject = [];\n\n\nfunction valueFn(value) {return function() {return value;};}\n\n/**\n * @ngdoc function\n * @name angular.isUndefined\n * @function\n *\n * @description\n * Determines if a reference is undefined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is undefined.\n */\nfunction isUndefined(value){return typeof value == 'undefined';}\n\n\n/**\n * @ngdoc function\n * @name angular.isDefined\n * @function\n *\n * @description\n * Determines if a reference is defined.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is defined.\n */\nfunction isDefined(value){return typeof value != 'undefined';}\n\n\n/**\n * @ngdoc function\n * @name angular.isObject\n * @function\n *\n * @description\n * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not\n * considered to be objects.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Object` but not `null`.\n */\nfunction isObject(value){return value != null && typeof value == 'object';}\n\n\n/**\n * @ngdoc function\n * @name angular.isString\n * @function\n *\n * @description\n * Determines if a reference is a `String`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `String`.\n */\nfunction isString(value){return typeof value == 'string';}\n\n\n/**\n * @ngdoc function\n * @name angular.isNumber\n * @function\n *\n * @description\n * Determines if a reference is a `Number`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Number`.\n */\nfunction isNumber(value){return typeof value == 'number';}\n\n\n/**\n * @ngdoc function\n * @name angular.isDate\n * @function\n *\n * @description\n * Determines if a value is a date.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Date`.\n */\nfunction isDate(value){\n  return toString.apply(value) == '[object Date]';\n}\n\n\n/**\n * @ngdoc function\n * @name angular.isArray\n * @function\n *\n * @description\n * Determines if a reference is an `Array`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is an `Array`.\n */\nfunction isArray(value) {\n  return toString.apply(value) == '[object Array]';\n}\n\n\n/**\n * @ngdoc function\n * @name angular.isFunction\n * @function\n *\n * @description\n * Determines if a reference is a `Function`.\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a `Function`.\n */\nfunction isFunction(value){return typeof value == 'function';}\n\n\n/**\n * Checks if `obj` is a window object.\n *\n * @private\n * @param {*} obj Object to check\n * @returns {boolean} True if `obj` is a window obj.\n */\nfunction isWindow(obj) {\n  return obj && obj.document && obj.location && obj.alert && obj.setInterval;\n}\n\n\nfunction isScope(obj) {\n  return obj && obj.$evalAsync && obj.$watch;\n}\n\n\nfunction isFile(obj) {\n  return toString.apply(obj) === '[object File]';\n}\n\n\nfunction isBoolean(value) {\n  return typeof value == 'boolean';\n}\n\n\nfunction trim(value) {\n  return isString(value) ? value.replace(/^\\s*/, '').replace(/\\s*$/, '') : value;\n}\n\n/**\n * @ngdoc function\n * @name angular.isElement\n * @function\n *\n * @description\n * Determines if a reference is a DOM element (or wrapped jQuery element).\n *\n * @param {*} value Reference to check.\n * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).\n */\nfunction isElement(node) {\n  return node &&\n    (node.nodeName  // we are a direct element\n    || (node.bind && node.find));  // we have a bind and find method part of jQuery API\n}\n\n/**\n * @param str 'key1,key2,...'\n * @returns {object} in the form of {key1:true, key2:true, ...}\n */\nfunction makeMap(str){\n  var obj = {}, items = str.split(\",\"), i;\n  for ( i = 0; i < items.length; i++ )\n    obj[ items[i] ] = true;\n  return obj;\n}\n\n\nif (msie < 9) {\n  nodeName_ = function(element) {\n    element = element.nodeName ? element : element[0];\n    return (element.scopeName && element.scopeName != 'HTML')\n      ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;\n  };\n} else {\n  nodeName_ = function(element) {\n    return element.nodeName ? element.nodeName : element[0].nodeName;\n  };\n}\n\n\nfunction map(obj, iterator, context) {\n  var results = [];\n  forEach(obj, function(value, index, list) {\n    results.push(iterator.call(context, value, index, list));\n  });\n  return results;\n}\n\n\n/**\n * @description\n * Determines the number of elements in an array, the number of properties an object has, or\n * the length of a string.\n *\n * Note: This function is used to augment the Object type in Angular expressions. See\n * {@link angular.Object} for more information about Angular arrays.\n *\n * @param {Object|Array|string} obj Object, array, or string to inspect.\n * @param {boolean} [ownPropsOnly=false] Count only \"own\" properties in an object\n * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.\n */\nfunction size(obj, ownPropsOnly) {\n  var size = 0, key;\n\n  if (isArray(obj) || isString(obj)) {\n    return obj.length;\n  } else if (isObject(obj)){\n    for (key in obj)\n      if (!ownPropsOnly || obj.hasOwnProperty(key))\n        size++;\n  }\n\n  return size;\n}\n\n\nfunction includes(array, obj) {\n  return indexOf(array, obj) != -1;\n}\n\nfunction indexOf(array, obj) {\n  if (array.indexOf) return array.indexOf(obj);\n\n  for ( var i = 0; i < array.length; i++) {\n    if (obj === array[i]) return i;\n  }\n  return -1;\n}\n\nfunction arrayRemove(array, value) {\n  var index = indexOf(array, value);\n  if (index >=0)\n    array.splice(index, 1);\n  return value;\n}\n\nfunction isLeafNode (node) {\n  if (node) {\n    switch (node.nodeName) {\n    case \"OPTION\":\n    case \"PRE\":\n    case \"TITLE\":\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @ngdoc function\n * @name angular.copy\n * @function\n *\n * @description\n * Creates a deep copy of `source`, which should be an object or an array.\n *\n * * If no destination is supplied, a copy of the object or array is created.\n * * If a destination is provided, all of its elements (for array) or properties (for objects)\n *   are deleted and then all elements/properties from the source are copied to it.\n * * If  `source` is not an object or array, `source` is returned.\n *\n * Note: this function is used to augment the Object type in Angular expressions. See\n * {@link ng.$filter} for more information about Angular arrays.\n *\n * @param {*} source The source that will be used to make a copy.\n *                   Can be any type, including primitives, `null`, and `undefined`.\n * @param {(Object|Array)=} destination Destination into which the source is copied. If\n *     provided, must be of the same type as `source`.\n * @returns {*} The copy or updated `destination`, if `destination` was specified.\n */\nfunction copy(source, destination){\n  if (isWindow(source) || isScope(source)) throw Error(\"Can't copy Window or Scope\");\n  if (!destination) {\n    destination = source;\n    if (source) {\n      if (isArray(source)) {\n        destination = copy(source, []);\n      } else if (isDate(source)) {\n        destination = new Date(source.getTime());\n      } else if (isObject(source)) {\n        destination = copy(source, {});\n      }\n    }\n  } else {\n    if (source === destination) throw Error(\"Can't copy equivalent objects or arrays\");\n    if (isArray(source)) {\n      destination.length = 0;\n      for ( var i = 0; i < source.length; i++) {\n        destination.push(copy(source[i]));\n      }\n    } else {\n      var h = destination.$$hashKey;\n      forEach(destination, function(value, key){\n        delete destination[key];\n      });\n      for ( var key in source) {\n        destination[key] = copy(source[key]);\n      }\n      setHashKey(destination,h);\n    }\n  }\n  return destination;\n}\n\n/**\n * Create a shallow copy of an object\n */\nfunction shallowCopy(src, dst) {\n  dst = dst || {};\n\n  for(var key in src) {\n    if (src.hasOwnProperty(key) && key.substr(0, 2) !== '$$') {\n      dst[key] = src[key];\n    }\n  }\n\n  return dst;\n}\n\n\n/**\n * @ngdoc function\n * @name angular.equals\n * @function\n *\n * @description\n * Determines if two objects or two values are equivalent. Supports value types, arrays and\n * objects.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties pass `===` comparison.\n * * Both values are NaN. (In JavasScript, NaN == NaN => false. But we consider two NaN as equal)\n *\n * During a property comparison, properties of `function` type and properties with names\n * that begin with `$` are ignored.\n *\n * Scope and DOMWindow objects are being compared only by identify (`===`).\n *\n * @param {*} o1 Object or value to compare.\n * @param {*} o2 Object or value to compare.\n * @returns {boolean} True if arguments are equal.\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;\n  if (t1 == t2) {\n    if (t1 == 'object') {\n      if (isArray(o1)) {\n        if ((length = o1.length) == o2.length) {\n          for(key=0; key<length; key++) {\n            if (!equals(o1[key], o2[key])) return false;\n          }\n          return true;\n        }\n      } else if (isDate(o1)) {\n        return isDate(o2) && o1.getTime() == o2.getTime();\n      } else {\n        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2)) return false;\n        keySet = {};\n        for(key in o1) {\n          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;\n          if (!equals(o1[key], o2[key])) return false;\n          keySet[key] = true;\n        }\n        for(key in o2) {\n          if (!keySet[key] &&\n              key.charAt(0) !== '$' &&\n              o2[key] !== undefined &&\n              !isFunction(o2[key])) return false;\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n\nfunction concat(array1, array2, index) {\n  return array1.concat(slice.call(array2, index));\n}\n\nfunction sliceArgs(args, startIndex) {\n  return slice.call(args, startIndex || 0);\n}\n\n\n/**\n * @ngdoc function\n * @name angular.bind\n * @function\n *\n * @description\n * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for\n * `fn`). You can supply optional `args` that are prebound to the function. This feature is also\n * known as [function currying](http://en.wikipedia.org/wiki/Currying).\n *\n * @param {Object} self Context which `fn` should be evaluated in.\n * @param {function()} fn Function to be bound.\n * @param {...*} args Optional arguments to be prebound to the `fn` function call.\n * @returns {function()} Function that wraps the `fn` with all the specified bindings.\n */\nfunction bind(self, fn) {\n  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];\n  if (isFunction(fn) && !(fn instanceof RegExp)) {\n    return curryArgs.length\n      ? function() {\n          return arguments.length\n            ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0)))\n            : fn.apply(self, curryArgs);\n        }\n      : function() {\n          return arguments.length\n            ? fn.apply(self, arguments)\n            : fn.call(self);\n        };\n  } else {\n    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)\n    return fn;\n  }\n}\n\n\nfunction toJsonReplacer(key, value) {\n  var val = value;\n\n  if (/^\\$+/.test(key)) {\n    val = undefined;\n  } else if (isWindow(value)) {\n    val = '$WINDOW';\n  } else if (value &&  document === value) {\n    val = '$DOCUMENT';\n  } else if (isScope(value)) {\n    val = '$SCOPE';\n  }\n\n  return val;\n}\n\n\n/**\n * @ngdoc function\n * @name angular.toJson\n * @function\n *\n * @description\n * Serializes input into a JSON-formatted string.\n *\n * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.\n * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.\n * @returns {string} Jsonified string representing `obj`.\n */\nfunction toJson(obj, pretty) {\n  return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);\n}\n\n\n/**\n * @ngdoc function\n * @name angular.fromJson\n * @function\n *\n * @description\n * Deserializes a JSON string.\n *\n * @param {string} json JSON string to deserialize.\n * @returns {Object|Array|Date|string|number} Deserialized thingy.\n */\nfunction fromJson(json) {\n  return isString(json)\n      ? JSON.parse(json)\n      : json;\n}\n\n\nfunction toBoolean(value) {\n  if (value && value.length !== 0) {\n    var v = lowercase(\"\" + value);\n    value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');\n  } else {\n    value = false;\n  }\n  return value;\n}\n\n/**\n * @returns {string} Returns the string representation of the element.\n */\nfunction startingTag(element) {\n  element = jqLite(element).clone();\n  try {\n    // turns out IE does not let you set .html() on elements which\n    // are not allowed to have children. So we just ignore it.\n    element.html('');\n  } catch(e) {}\n  // As Per DOM Standards\n  var TEXT_NODE = 3;\n  var elemHtml = jqLite('<div>').append(element).html();\n  try {\n    return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) :\n        elemHtml.\n          match(/^(<[^>]+>)/)[1].\n          replace(/^<([\\w\\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });\n  } catch(e) {\n    return lowercase(elemHtml);\n  }\n\n}\n\n\n/////////////////////////////////////////////////\n\n/**\n * Parses an escaped url query string into key-value pairs.\n * @returns Object.<(string|boolean)>\n */\nfunction parseKeyValue(/**string*/keyValue) {\n  var obj = {}, key_value, key;\n  forEach((keyValue || \"\").split('&'), function(keyValue){\n    if (keyValue) {\n      key_value = keyValue.split('=');\n      key = decodeURIComponent(key_value[0]);\n      obj[key] = isDefined(key_value[1]) ? decodeURIComponent(key_value[1]) : true;\n    }\n  });\n  return obj;\n}\n\nfunction toKeyValue(obj) {\n  var parts = [];\n  forEach(obj, function(value, key) {\n    parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));\n  });\n  return parts.length ? parts.join('&') : '';\n}\n\n\n/**\n * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\n * segments:\n *    segment       = *pchar\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n */\nfunction encodeUriSegment(val) {\n  return encodeUriQuery(val, true).\n             replace(/%26/gi, '&').\n             replace(/%3D/gi, '=').\n             replace(/%2B/gi, '+');\n}\n\n\n/**\n * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\n * encoded per http://tools.ietf.org/html/rfc3986:\n *    query       = *( pchar / \"/\" / \"?\" )\n *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n *    pct-encoded   = \"%\" HEXDIG HEXDIG\n *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n */\nfunction encodeUriQuery(val, pctEncodeSpaces) {\n  return encodeURIComponent(val).\n             replace(/%40/gi, '@').\n             replace(/%3A/gi, ':').\n             replace(/%24/g, '$').\n             replace(/%2C/gi, ',').\n             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n}\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngApp\n *\n * @element ANY\n * @param {angular.Module} ngApp an optional application\n *   {@link angular.module module} name to load.\n *\n * @description\n *\n * Use this directive to auto-bootstrap an application. Only\n * one directive can be used per HTML document. The directive\n * designates the root of the application and is typically placed\n * at the root of the page.\n *\n * In the example below if the `ngApp` directive would not be placed\n * on the `html` element then the document would not be compiled\n * and the `{{ 1+2 }}` would not be resolved to `3`.\n *\n * `ngApp` is the easiest way to bootstrap an application.\n *\n <doc:example>\n   <doc:source>\n    I can add: 1 + 2 =  {{ 1+2 }}\n   </doc:source>\n </doc:example>\n *\n */\nfunction angularInit(element, bootstrap) {\n  var elements = [element],\n      appElement,\n      module,\n      names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],\n      NG_APP_CLASS_REGEXP = /\\sng[:\\-]app(:\\s*([\\w\\d_]+);?)?\\s/;\n\n  function append(element) {\n    element && elements.push(element);\n  }\n\n  forEach(names, function(name) {\n    names[name] = true;\n    append(document.getElementById(name));\n    name = name.replace(':', '\\\\:');\n    if (element.querySelectorAll) {\n      forEach(element.querySelectorAll('.' + name), append);\n      forEach(element.querySelectorAll('.' + name + '\\\\:'), append);\n      forEach(element.querySelectorAll('[' + name + ']'), append);\n    }\n  });\n\n  forEach(elements, function(element) {\n    if (!appElement) {\n      var className = ' ' + element.className + ' ';\n      var match = NG_APP_CLASS_REGEXP.exec(className);\n      if (match) {\n        appElement = element;\n        module = (match[2] || '').replace(/\\s+/g, ',');\n      } else {\n        forEach(element.attributes, function(attr) {\n          if (!appElement && names[attr.name]) {\n            appElement = element;\n            module = attr.value;\n          }\n        });\n      }\n    }\n  });\n  if (appElement) {\n    bootstrap(appElement, module ? [module] : []);\n  }\n}\n\n/**\n * @ngdoc function\n * @name angular.bootstrap\n * @description\n * Use this function to manually start up angular application.\n *\n * See: {@link guide/bootstrap Bootstrap}\n *\n * @param {Element} element DOM element which is the root of angular application.\n * @param {Array<String|Function>=} modules an array of module declarations. See: {@link angular.module modules}\n * @returns {AUTO.$injector} Returns the newly created injector for this app.\n */\nfunction bootstrap(element, modules) {\n  var resumeBootstrapInternal = function() {\n    element = jqLite(element);\n    modules = modules || [];\n    modules.unshift(['$provide', function($provide) {\n      $provide.value('$rootElement', element);\n    }]);\n    modules.unshift('ng');\n    var injector = createInjector(modules);\n    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector', '$animator',\n       function(scope, element, compile, injector, animator) {\n        scope.$apply(function() {\n          element.data('$injector', injector);\n          compile(element)(scope);\n        });\n        animator.enabled(true);\n      }]\n    );\n    return injector;\n  };\n\n  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;\n\n  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {\n    return resumeBootstrapInternal();\n  }\n\n  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');\n  angular.resumeBootstrap = function(extraModules) {\n    forEach(extraModules, function(module) {\n      modules.push(module);\n    });\n    resumeBootstrapInternal();\n  };\n}\n\nvar SNAKE_CASE_REGEXP = /[A-Z]/g;\nfunction snake_case(name, separator){\n  separator = separator || '_';\n  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {\n    return (pos ? separator : '') + letter.toLowerCase();\n  });\n}\n\nfunction bindJQuery() {\n  // bind to jQuery if present;\n  jQuery = window.jQuery;\n  // reset to jQuery or default to us.\n  if (jQuery) {\n    jqLite = jQuery;\n    extend(jQuery.fn, {\n      scope: JQLitePrototype.scope,\n      controller: JQLitePrototype.controller,\n      injector: JQLitePrototype.injector,\n      inheritedData: JQLitePrototype.inheritedData\n    });\n    JQLitePatchJQueryRemove('remove', true);\n    JQLitePatchJQueryRemove('empty');\n    JQLitePatchJQueryRemove('html');\n  } else {\n    jqLite = JQLite;\n  }\n  angular.element = jqLite;\n}\n\n/**\n * throw error if the argument is falsy.\n */\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw new Error(\"Argument '\" + (name || '?') + \"' is \" + (reason || \"required\"));\n  }\n  return arg;\n}\n\nfunction assertArgFn(arg, name, acceptArrayAnnotation) {\n  if (acceptArrayAnnotation && isArray(arg)) {\n      arg = arg[arg.length - 1];\n  }\n\n  assertArg(isFunction(arg), name, 'not a function, got ' +\n      (arg && typeof arg == 'object' ? arg.constructor.name || 'Object' : typeof arg));\n  return arg;\n}\n\n/**\n * @ngdoc interface\n * @name angular.Module\n * @description\n *\n * Interface for configuring angular {@link angular.module modules}.\n */\n\nfunction setupModuleLoader(window) {\n\n  function ensure(obj, name, factory) {\n    return obj[name] || (obj[name] = factory());\n  }\n\n  return ensure(ensure(window, 'angular', Object), 'module', function() {\n    /** @type {Object.<string, angular.Module>} */\n    var modules = {};\n\n    /**\n     * @ngdoc function\n     * @name angular.module\n     * @description\n     *\n     * The `angular.module` is a global place for creating and registering Angular modules. All\n     * modules (angular core or 3rd party) that should be available to an application must be\n     * registered using this mechanism.\n     *\n     *\n     * # Module\n     *\n     * A module is a collocation of services, directives, filters, and configuration information. Module\n     * is used to configure the {@link AUTO.$injector $injector}.\n     *\n     * <pre>\n     * // Create a new module\n     * var myModule = angular.module('myModule', []);\n     *\n     * // register a new service\n     * myModule.value('appName', 'MyCoolApp');\n     *\n     * // configure existing services inside initialization blocks.\n     * myModule.config(function($locationProvider) {\n     *   // Configure existing providers\n     *   $locationProvider.hashPrefix('!');\n     * });\n     * </pre>\n     *\n     * Then you can create an injector and load your modules like this:\n     *\n     * <pre>\n     * var injector = angular.injector(['ng', 'MyModule'])\n     * </pre>\n     *\n     * However it's more likely that you'll just use\n     * {@link ng.directive:ngApp ngApp} or\n     * {@link angular.bootstrap} to simplify this process for you.\n     *\n     * @param {!string} name The name of the module to create or retrieve.\n     * @param {Array.<string>=} requires If specified then new module is being created. If unspecified then the\n     *        the module is being retrieved for further configuration.\n     * @param {Function} configFn Optional configuration function for the module. Same as\n     *        {@link angular.Module#config Module#config()}.\n     * @returns {module} new module with the {@link angular.Module} api.\n     */\n    return function module(name, requires, configFn) {\n      if (requires && modules.hasOwnProperty(name)) {\n        modules[name] = null;\n      }\n      return ensure(modules, name, function() {\n        if (!requires) {\n          throw Error('No module: ' + name);\n        }\n\n        /** @type {!Array.<Array.<*>>} */\n        var invokeQueue = [];\n\n        /** @type {!Array.<Function>} */\n        var runBlocks = [];\n\n        var config = invokeLater('$injector', 'invoke');\n\n        /** @type {angular.Module} */\n        var moduleInstance = {\n          // Private state\n          _invokeQueue: invokeQueue,\n          _runBlocks: runBlocks,\n\n          /**\n           * @ngdoc property\n           * @name angular.Module#requires\n           * @propertyOf angular.Module\n           * @returns {Array.<string>} List of module names which must be loaded before this module.\n           * @description\n           * Holds the list of modules which the injector will load before the current module is loaded.\n           */\n          requires: requires,\n\n          /**\n           * @ngdoc property\n           * @name angular.Module#name\n           * @propertyOf angular.Module\n           * @returns {string} Name of the module.\n           * @description\n           */\n          name: name,\n\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#provider\n           * @methodOf angular.Module\n           * @param {string} name service name\n           * @param {Function} providerType Construction function for creating new instance of the service.\n           * @description\n           * See {@link AUTO.$provide#provider $provide.provider()}.\n           */\n          provider: invokeLater('$provide', 'provider'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#factory\n           * @methodOf angular.Module\n           * @param {string} name service name\n           * @param {Function} providerFunction Function for creating new instance of the service.\n           * @description\n           * See {@link AUTO.$provide#factory $provide.factory()}.\n           */\n          factory: invokeLater('$provide', 'factory'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#service\n           * @methodOf angular.Module\n           * @param {string} name service name\n           * @param {Function} constructor A constructor function that will be instantiated.\n           * @description\n           * See {@link AUTO.$provide#service $provide.service()}.\n           */\n          service: invokeLater('$provide', 'service'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#value\n           * @methodOf angular.Module\n           * @param {string} name service name\n           * @param {*} object Service instance object.\n           * @description\n           * See {@link AUTO.$provide#value $provide.value()}.\n           */\n          value: invokeLater('$provide', 'value'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#constant\n           * @methodOf angular.Module\n           * @param {string} name constant name\n           * @param {*} object Constant value.\n           * @description\n           * Because the constant are fixed, they get applied before other provide methods.\n           * See {@link AUTO.$provide#constant $provide.constant()}.\n           */\n          constant: invokeLater('$provide', 'constant', 'unshift'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#animation\n           * @methodOf angular.Module\n           * @param {string} name animation name\n           * @param {Function} animationFactory Factory function for creating new instance of an animation.\n           * @description\n           *\n           * Defines an animation hook that can be later used with {@link ng.directive:ngAnimate ngAnimate}\n           * alongside {@link ng.directive:ngAnimate#Description common ng directives} as well as custom directives.\n           * <pre>\n           * module.animation('animation-name', function($inject1, $inject2) {\n           *   return {\n           *     //this gets called in preparation to setup an animation\n           *     setup : function(element) { ... },\n           *\n           *     //this gets called once the animation is run\n           *     start : function(element, done, memo) { ... }\n           *   }\n           * })\n           * </pre>\n           *\n           * See {@link ng.$animationProvider#register $animationProvider.register()} and\n           * {@link ng.directive:ngAnimate ngAnimate} for more information.\n           */\n          animation: invokeLater('$animationProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#filter\n           * @methodOf angular.Module\n           * @param {string} name Filter name.\n           * @param {Function} filterFactory Factory function for creating new instance of filter.\n           * @description\n           * See {@link ng.$filterProvider#register $filterProvider.register()}.\n           */\n          filter: invokeLater('$filterProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#controller\n           * @methodOf angular.Module\n           * @param {string} name Controller name.\n           * @param {Function} constructor Controller constructor function.\n           * @description\n           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.\n           */\n          controller: invokeLater('$controllerProvider', 'register'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#directive\n           * @methodOf angular.Module\n           * @param {string} name directive name\n           * @param {Function} directiveFactory Factory function for creating new instance of\n           * directives.\n           * @description\n           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.\n           */\n          directive: invokeLater('$compileProvider', 'directive'),\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#config\n           * @methodOf angular.Module\n           * @param {Function} configFn Execute this function on module load. Useful for service\n           *    configuration.\n           * @description\n           * Use this method to register work which needs to be performed on module loading.\n           */\n          config: config,\n\n          /**\n           * @ngdoc method\n           * @name angular.Module#run\n           * @methodOf angular.Module\n           * @param {Function} initializationFn Execute this function after injector creation.\n           *    Useful for application initialization.\n           * @description\n           * Use this method to register work which should be performed when the injector is done\n           * loading all modules.\n           */\n          run: function(block) {\n            runBlocks.push(block);\n            return this;\n          }\n        };\n\n        if (configFn) {\n          config(configFn);\n        }\n\n        return  moduleInstance;\n\n        /**\n         * @param {string} provider\n         * @param {string} method\n         * @param {String=} insertMethod\n         * @returns {angular.Module}\n         */\n        function invokeLater(provider, method, insertMethod) {\n          return function() {\n            invokeQueue[insertMethod || 'push']([provider, method, arguments]);\n            return moduleInstance;\n          }\n        }\n      });\n    };\n  });\n\n}\n\n/**\n * @ngdoc property\n * @name angular.version\n * @description\n * An object that contains information about the current AngularJS version. This object has the\n * following properties:\n *\n * - `full` – `{string}` – Full version string, such as \"0.9.18\".\n * - `major` – `{number}` – Major version number, such as \"0\".\n * - `minor` – `{number}` – Minor version number, such as \"9\".\n * - `dot` – `{number}` – Dot version number, such as \"18\".\n * - `codeName` – `{string}` – Code name of the release, such as \"jiggling-armfat\".\n */\nvar version = {\n  full: '1.1.5',    // all of these placeholder strings will be replaced by grunt's\n  major: 1,    // package task\n  minor: 1,\n  dot: 5,\n  codeName: 'triangle-squarification'\n};\n\n\nfunction publishExternalAPI(angular){\n  extend(angular, {\n    'bootstrap': bootstrap,\n    'copy': copy,\n    'extend': extend,\n    'equals': equals,\n    'element': jqLite,\n    'forEach': forEach,\n    'injector': createInjector,\n    'noop':noop,\n    'bind':bind,\n    'toJson': toJson,\n    'fromJson': fromJson,\n    'identity':identity,\n    'isUndefined': isUndefined,\n    'isDefined': isDefined,\n    'isString': isString,\n    'isFunction': isFunction,\n    'isObject': isObject,\n    'isNumber': isNumber,\n    'isElement': isElement,\n    'isArray': isArray,\n    'version': version,\n    'isDate': isDate,\n    'lowercase': lowercase,\n    'uppercase': uppercase,\n    'callbacks': {counter: 0},\n    'noConflict': noConflict\n  });\n\n  angularModule = setupModuleLoader(window);\n  try {\n    angularModule('ngLocale');\n  } catch (e) {\n    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);\n  }\n\n  angularModule('ng', ['ngLocale'], ['$provide',\n    function ngModule($provide) {\n      $provide.provider('$compile', $CompileProvider).\n        directive({\n            a: htmlAnchorDirective,\n            input: inputDirective,\n            textarea: inputDirective,\n            form: formDirective,\n            script: scriptDirective,\n            select: selectDirective,\n            style: styleDirective,\n            option: optionDirective,\n            ngBind: ngBindDirective,\n            ngBindHtmlUnsafe: ngBindHtmlUnsafeDirective,\n            ngBindTemplate: ngBindTemplateDirective,\n            ngClass: ngClassDirective,\n            ngClassEven: ngClassEvenDirective,\n            ngClassOdd: ngClassOddDirective,\n            ngCsp: ngCspDirective,\n            ngCloak: ngCloakDirective,\n            ngController: ngControllerDirective,\n            ngForm: ngFormDirective,\n            ngHide: ngHideDirective,\n            ngIf: ngIfDirective,\n            ngInclude: ngIncludeDirective,\n            ngInit: ngInitDirective,\n            ngNonBindable: ngNonBindableDirective,\n            ngPluralize: ngPluralizeDirective,\n            ngRepeat: ngRepeatDirective,\n            ngShow: ngShowDirective,\n            ngSubmit: ngSubmitDirective,\n            ngStyle: ngStyleDirective,\n            ngSwitch: ngSwitchDirective,\n            ngSwitchWhen: ngSwitchWhenDirective,\n            ngSwitchDefault: ngSwitchDefaultDirective,\n            ngOptions: ngOptionsDirective,\n            ngView: ngViewDirective,\n            ngTransclude: ngTranscludeDirective,\n            ngModel: ngModelDirective,\n            ngList: ngListDirective,\n            ngChange: ngChangeDirective,\n            required: requiredDirective,\n            ngRequired: requiredDirective,\n            ngValue: ngValueDirective\n        }).\n        directive(ngAttributeAliasDirectives).\n        directive(ngEventDirectives);\n      $provide.provider({\n        $anchorScroll: $AnchorScrollProvider,\n        $animation: $AnimationProvider,\n        $animator: $AnimatorProvider,\n        $browser: $BrowserProvider,\n        $cacheFactory: $CacheFactoryProvider,\n        $controller: $ControllerProvider,\n        $document: $DocumentProvider,\n        $exceptionHandler: $ExceptionHandlerProvider,\n        $filter: $FilterProvider,\n        $interpolate: $InterpolateProvider,\n        $http: $HttpProvider,\n        $httpBackend: $HttpBackendProvider,\n        $location: $LocationProvider,\n        $log: $LogProvider,\n        $parse: $ParseProvider,\n        $route: $RouteProvider,\n        $routeParams: $RouteParamsProvider,\n        $rootScope: $RootScopeProvider,\n        $q: $QProvider,\n        $sniffer: $SnifferProvider,\n        $templateCache: $TemplateCacheProvider,\n        $timeout: $TimeoutProvider,\n        $window: $WindowProvider\n      });\n    }\n  ]);\n}\n\n//////////////////////////////////\n//JQLite\n//////////////////////////////////\n\n/**\n * @ngdoc function\n * @name angular.element\n * @function\n *\n * @description\n * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.\n * `angular.element` can be either an alias for [jQuery](http://api.jquery.com/jQuery/) function, if\n * jQuery is available, or a function that wraps the element or string in Angular's jQuery lite\n * implementation (commonly referred to as jqLite).\n *\n * Real jQuery always takes precedence over jqLite, provided it was loaded before `DOMContentLoaded`\n * event fired.\n *\n * jqLite is a tiny, API-compatible subset of jQuery that allows\n * Angular to manipulate the DOM. jqLite implements only the most commonly needed functionality\n * within a very small footprint, so only a subset of the jQuery API - methods, arguments and\n * invocation styles - are supported.\n *\n * Note: All element references in Angular are always wrapped with jQuery or jqLite; they are never\n * raw DOM references.\n *\n * ## Angular's jQuery lite provides the following methods:\n *\n * - [addClass()](http://api.jquery.com/addClass/)\n * - [after()](http://api.jquery.com/after/)\n * - [append()](http://api.jquery.com/append/)\n * - [attr()](http://api.jquery.com/attr/)\n * - [bind()](http://api.jquery.com/bind/) - Does not support namespaces\n * - [children()](http://api.jquery.com/children/) - Does not support selectors\n * - [clone()](http://api.jquery.com/clone/)\n * - [contents()](http://api.jquery.com/contents/)\n * - [css()](http://api.jquery.com/css/)\n * - [data()](http://api.jquery.com/data/)\n * - [eq()](http://api.jquery.com/eq/)\n * - [find()](http://api.jquery.com/find/) - Limited to lookups by tag name\n * - [hasClass()](http://api.jquery.com/hasClass/)\n * - [html()](http://api.jquery.com/html/)\n * - [next()](http://api.jquery.com/next/) - Does not support selectors\n * - [parent()](http://api.jquery.com/parent/) - Does not support selectors\n * - [prepend()](http://api.jquery.com/prepend/)\n * - [prop()](http://api.jquery.com/prop/)\n * - [ready()](http://api.jquery.com/ready/)\n * - [remove()](http://api.jquery.com/remove/)\n * - [removeAttr()](http://api.jquery.com/removeAttr/)\n * - [removeClass()](http://api.jquery.com/removeClass/)\n * - [removeData()](http://api.jquery.com/removeData/)\n * - [replaceWith()](http://api.jquery.com/replaceWith/)\n * - [text()](http://api.jquery.com/text/)\n * - [toggleClass()](http://api.jquery.com/toggleClass/)\n * - [triggerHandler()](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.\n * - [unbind()](http://api.jquery.com/unbind/) - Does not support namespaces\n * - [val()](http://api.jquery.com/val/)\n * - [wrap()](http://api.jquery.com/wrap/)\n *\n * ## In addition to the above, Angular provides additional methods to both jQuery and jQuery lite:\n *\n * - `controller(name)` - retrieves the controller of the current element or its parent. By default\n *   retrieves controller associated with the `ngController` directive. If `name` is provided as\n *   camelCase directive name, then the controller for this directive will be retrieved (e.g.\n *   `'ngModel'`).\n * - `injector()` - retrieves the injector of the current element or its parent.\n * - `scope()` - retrieves the {@link api/ng.$rootScope.Scope scope} of the current\n *   element or its parent.\n * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top\n *   parent element is reached.\n *\n * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.\n * @returns {Object} jQuery object.\n */\n\nvar jqCache = JQLite.cache = {},\n    jqName = JQLite.expando = 'ng-' + new Date().getTime(),\n    jqId = 1,\n    addEventListenerFn = (window.document.addEventListener\n      ? function(element, type, fn) {element.addEventListener(type, fn, false);}\n      : function(element, type, fn) {element.attachEvent('on' + type, fn);}),\n    removeEventListenerFn = (window.document.removeEventListener\n      ? function(element, type, fn) {element.removeEventListener(type, fn, false); }\n      : function(element, type, fn) {element.detachEvent('on' + type, fn); });\n\nfunction jqNextId() { return ++jqId; }\n\n\nvar SPECIAL_CHARS_REGEXP = /([\\:\\-\\_]+(.))/g;\nvar MOZ_HACK_REGEXP = /^moz([A-Z])/;\n\n/**\n * Converts snake_case to camelCase.\n * Also there is special case for Moz prefix starting with upper case letter.\n * @param name Name to normalize\n */\nfunction camelCase(name) {\n  return name.\n    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {\n      return offset ? letter.toUpperCase() : letter;\n    }).\n    replace(MOZ_HACK_REGEXP, 'Moz$1');\n}\n\n/////////////////////////////////////////////\n// jQuery mutation patch\n//\n//  In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a\n// $destroy event on all DOM nodes being removed.\n//\n/////////////////////////////////////////////\n\nfunction JQLitePatchJQueryRemove(name, dispatchThis) {\n  var originalJqFn = jQuery.fn[name];\n  originalJqFn = originalJqFn.$original || originalJqFn;\n  removePatch.$original = originalJqFn;\n  jQuery.fn[name] = removePatch;\n\n  function removePatch() {\n    var list = [this],\n        fireEvent = dispatchThis,\n        set, setIndex, setLength,\n        element, childIndex, childLength, children,\n        fns, events;\n\n    while(list.length) {\n      set = list.shift();\n      for(setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {\n        element = jqLite(set[setIndex]);\n        if (fireEvent) {\n          element.triggerHandler('$destroy');\n        } else {\n          fireEvent = !fireEvent;\n        }\n        for(childIndex = 0, childLength = (children = element.children()).length;\n            childIndex < childLength;\n            childIndex++) {\n          list.push(jQuery(children[childIndex]));\n        }\n      }\n    }\n    return originalJqFn.apply(this, arguments);\n  }\n}\n\n/////////////////////////////////////////////\nfunction JQLite(element) {\n  if (element instanceof JQLite) {\n    return element;\n  }\n  if (!(this instanceof JQLite)) {\n    if (isString(element) && element.charAt(0) != '<') {\n      throw Error('selectors not implemented');\n    }\n    return new JQLite(element);\n  }\n\n  if (isString(element)) {\n    var div = document.createElement('div');\n    // Read about the NoScope elements here:\n    // http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\n    div.innerHTML = '<div>&#160;</div>' + element; // IE insanity to make NoScope elements work!\n    div.removeChild(div.firstChild); // remove the superfluous div\n    JQLiteAddNodes(this, div.childNodes);\n    this.remove(); // detach the elements from the temporary DOM div.\n  } else {\n    JQLiteAddNodes(this, element);\n  }\n}\n\nfunction JQLiteClone(element) {\n  return element.cloneNode(true);\n}\n\nfunction JQLiteDealoc(element){\n  JQLiteRemoveData(element);\n  for ( var i = 0, children = element.childNodes || []; i < children.length; i++) {\n    JQLiteDealoc(children[i]);\n  }\n}\n\nfunction JQLiteUnbind(element, type, fn) {\n  var events = JQLiteExpandoStore(element, 'events'),\n      handle = JQLiteExpandoStore(element, 'handle');\n\n  if (!handle) return; //no listeners registered\n\n  if (isUndefined(type)) {\n    forEach(events, function(eventHandler, type) {\n      removeEventListenerFn(element, type, eventHandler);\n      delete events[type];\n    });\n  } else {\n    if (isUndefined(fn)) {\n      removeEventListenerFn(element, type, events[type]);\n      delete events[type];\n    } else {\n      arrayRemove(events[type], fn);\n    }\n  }\n}\n\nfunction JQLiteRemoveData(element) {\n  var expandoId = element[jqName],\n      expandoStore = jqCache[expandoId];\n\n  if (expandoStore) {\n    if (expandoStore.handle) {\n      expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');\n      JQLiteUnbind(element);\n    }\n    delete jqCache[expandoId];\n    element[jqName] = undefined; // ie does not allow deletion of attributes on elements.\n  }\n}\n\nfunction JQLiteExpandoStore(element, key, value) {\n  var expandoId = element[jqName],\n      expandoStore = jqCache[expandoId || -1];\n\n  if (isDefined(value)) {\n    if (!expandoStore) {\n      element[jqName] = expandoId = jqNextId();\n      expandoStore = jqCache[expandoId] = {};\n    }\n    expandoStore[key] = value;\n  } else {\n    return expandoStore && expandoStore[key];\n  }\n}\n\nfunction JQLiteData(element, key, value) {\n  var data = JQLiteExpandoStore(element, 'data'),\n      isSetter = isDefined(value),\n      keyDefined = !isSetter && isDefined(key),\n      isSimpleGetter = keyDefined && !isObject(key);\n\n  if (!data && !isSimpleGetter) {\n    JQLiteExpandoStore(element, 'data', data = {});\n  }\n\n  if (isSetter) {\n    data[key] = value;\n  } else {\n    if (keyDefined) {\n      if (isSimpleGetter) {\n        // don't create data in this case.\n        return data && data[key];\n      } else {\n        extend(data, key);\n      }\n    } else {\n      return data;\n    }\n  }\n}\n\nfunction JQLiteHasClass(element, selector) {\n  return ((\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").\n      indexOf( \" \" + selector + \" \" ) > -1);\n}\n\nfunction JQLiteRemoveClass(element, cssClasses) {\n  if (cssClasses) {\n    forEach(cssClasses.split(' '), function(cssClass) {\n      element.className = trim(\n          (\" \" + element.className + \" \")\n          .replace(/[\\n\\t]/g, \" \")\n          .replace(\" \" + trim(cssClass) + \" \", \" \")\n      );\n    });\n  }\n}\n\nfunction JQLiteAddClass(element, cssClasses) {\n  if (cssClasses) {\n    forEach(cssClasses.split(' '), function(cssClass) {\n      if (!JQLiteHasClass(element, cssClass)) {\n        element.className = trim(element.className + ' ' + trim(cssClass));\n      }\n    });\n  }\n}\n\nfunction JQLiteAddNodes(root, elements) {\n  if (elements) {\n    elements = (!elements.nodeName && isDefined(elements.length) && !isWindow(elements))\n      ? elements\n      : [ elements ];\n    for(var i=0; i < elements.length; i++) {\n      root.push(elements[i]);\n    }\n  }\n}\n\nfunction JQLiteController(element, name) {\n  return JQLiteInheritedData(element, '$' + (name || 'ngController' ) + 'Controller');\n}\n\nfunction JQLiteInheritedData(element, name, value) {\n  element = jqLite(element);\n\n  // if element is the document object work with the html element instead\n  // this makes $(document).scope() possible\n  if(element[0].nodeType == 9) {\n    element = element.find('html');\n  }\n\n  while (element.length) {\n    if (value = element.data(name)) return value;\n    element = element.parent();\n  }\n}\n\n//////////////////////////////////////////\n// Functions which are declared directly.\n//////////////////////////////////////////\nvar JQLitePrototype = JQLite.prototype = {\n  ready: function(fn) {\n    var fired = false;\n\n    function trigger() {\n      if (fired) return;\n      fired = true;\n      fn();\n    }\n\n    // check if document already is loaded\n    if (document.readyState === 'complete'){\n      setTimeout(trigger);\n    } else {\n      this.bind('DOMContentLoaded', trigger); // works for modern browsers and IE9\n      // we can not use jqLite since we are not done loading and jQuery could be loaded later.\n      JQLite(window).bind('load', trigger); // fallback to window.onload for others\n    }\n  },\n  toString: function() {\n    var value = [];\n    forEach(this, function(e){ value.push('' + e);});\n    return '[' + value.join(', ') + ']';\n  },\n\n  eq: function(index) {\n      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);\n  },\n\n  length: 0,\n  push: push,\n  sort: [].sort,\n  splice: [].splice\n};\n\n//////////////////////////////////////////\n// Functions iterating getter/setters.\n// these functions return self on setter and\n// value on get.\n//////////////////////////////////////////\nvar BOOLEAN_ATTR = {};\nforEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {\n  BOOLEAN_ATTR[lowercase(value)] = value;\n});\nvar BOOLEAN_ELEMENTS = {};\nforEach('input,select,option,textarea,button,form,details'.split(','), function(value) {\n  BOOLEAN_ELEMENTS[uppercase(value)] = true;\n});\n\nfunction getBooleanAttrName(element, name) {\n  // check dom last since we will most likely fail on name\n  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];\n\n  // booleanAttr is here twice to minimize DOM access\n  return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;\n}\n\nforEach({\n  data: JQLiteData,\n  inheritedData: JQLiteInheritedData,\n\n  scope: function(element) {\n    return JQLiteInheritedData(element, '$scope');\n  },\n\n  controller: JQLiteController ,\n\n  injector: function(element) {\n    return JQLiteInheritedData(element, '$injector');\n  },\n\n  removeAttr: function(element,name) {\n    element.removeAttribute(name);\n  },\n\n  hasClass: JQLiteHasClass,\n\n  css: function(element, name, value) {\n    name = camelCase(name);\n\n    if (isDefined(value)) {\n      element.style[name] = value;\n    } else {\n      var val;\n\n      if (msie <= 8) {\n        // this is some IE specific weirdness that jQuery 1.6.4 does not sure why\n        val = element.currentStyle && element.currentStyle[name];\n        if (val === '') val = 'auto';\n      }\n\n      val = val || element.style[name];\n\n      if (msie <= 8) {\n        // jquery weirdness :-/\n        val = (val === '') ? undefined : val;\n      }\n\n      return  val;\n    }\n  },\n\n  attr: function(element, name, value){\n    var lowercasedName = lowercase(name);\n    if (BOOLEAN_ATTR[lowercasedName]) {\n      if (isDefined(value)) {\n        if (!!value) {\n          element[name] = true;\n          element.setAttribute(name, lowercasedName);\n        } else {\n          element[name] = false;\n          element.removeAttribute(lowercasedName);\n        }\n      } else {\n        return (element[name] ||\n                 (element.attributes.getNamedItem(name)|| noop).specified)\n               ? lowercasedName\n               : undefined;\n      }\n    } else if (isDefined(value)) {\n      element.setAttribute(name, value);\n    } else if (element.getAttribute) {\n      // the extra argument \"2\" is to get the right thing for a.href in IE, see jQuery code\n      // some elements (e.g. Document) don't have get attribute, so return undefined\n      var ret = element.getAttribute(name, 2);\n      // normalize non-existing attributes to undefined (as jQuery)\n      return ret === null ? undefined : ret;\n    }\n  },\n\n  prop: function(element, name, value) {\n    if (isDefined(value)) {\n      element[name] = value;\n    } else {\n      return element[name];\n    }\n  },\n\n  text: extend((msie < 9)\n      ? function(element, value) {\n        if (element.nodeType == 1 /** Element */) {\n          if (isUndefined(value))\n            return element.innerText;\n          element.innerText = value;\n        } else {\n          if (isUndefined(value))\n            return element.nodeValue;\n          element.nodeValue = value;\n        }\n      }\n      : function(element, value) {\n        if (isUndefined(value)) {\n          return element.textContent;\n        }\n        element.textContent = value;\n      }, {$dv:''}),\n\n  val: function(element, value) {\n    if (isUndefined(value)) {\n      return element.value;\n    }\n    element.value = value;\n  },\n\n  html: function(element, value) {\n    if (isUndefined(value)) {\n      return element.innerHTML;\n    }\n    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {\n      JQLiteDealoc(childNodes[i]);\n    }\n    element.innerHTML = value;\n  }\n}, function(fn, name){\n  /**\n   * Properties: writes return selection, reads return first value\n   */\n  JQLite.prototype[name] = function(arg1, arg2) {\n    var i, key;\n\n    // JQLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it\n    // in a way that survives minification.\n    if (((fn.length == 2 && (fn !== JQLiteHasClass && fn !== JQLiteController)) ? arg1 : arg2) === undefined) {\n      if (isObject(arg1)) {\n\n        // we are a write, but the object properties are the key/values\n        for(i=0; i < this.length; i++) {\n          if (fn === JQLiteData) {\n            // data() takes the whole object in jQuery\n            fn(this[i], arg1);\n          } else {\n            for (key in arg1) {\n              fn(this[i], key, arg1[key]);\n            }\n          }\n        }\n        // return self for chaining\n        return this;\n      } else {\n        // we are a read, so read the first child.\n        if (this.length)\n          return fn(this[0], arg1, arg2);\n      }\n    } else {\n      // we are a write, so apply to all children\n      for(i=0; i < this.length; i++) {\n        fn(this[i], arg1, arg2);\n      }\n      // return self for chaining\n      return this;\n    }\n    return fn.$dv;\n  };\n});\n\nfunction createEventHandler(element, events) {\n  var eventHandler = function (event, type) {\n    if (!event.preventDefault) {\n      event.preventDefault = function() {\n        event.returnValue = false; //ie\n      };\n    }\n\n    if (!event.stopPropagation) {\n      event.stopPropagation = function() {\n        event.cancelBubble = true; //ie\n      };\n    }\n\n    if (!event.target) {\n      event.target = event.srcElement || document;\n    }\n\n    if (isUndefined(event.defaultPrevented)) {\n      var prevent = event.preventDefault;\n      event.preventDefault = function() {\n        event.defaultPrevented = true;\n        prevent.call(event);\n      };\n      event.defaultPrevented = false;\n    }\n\n    event.isDefaultPrevented = function() {\n      return event.defaultPrevented || event.returnValue == false;\n    };\n\n    forEach(events[type || event.type], function(fn) {\n      fn.call(element, event);\n    });\n\n    // Remove monkey-patched methods (IE),\n    // as they would cause memory leaks in IE8.\n    if (msie <= 8) {\n      // IE7/8 does not allow to delete property on native object\n      event.preventDefault = null;\n      event.stopPropagation = null;\n      event.isDefaultPrevented = null;\n    } else {\n      // It shouldn't affect normal browsers (native methods are defined on prototype).\n      delete event.preventDefault;\n      delete event.stopPropagation;\n      delete event.isDefaultPrevented;\n    }\n  };\n  eventHandler.elem = element;\n  return eventHandler;\n}\n\n//////////////////////////////////////////\n// Functions iterating traversal.\n// These functions chain results into a single\n// selector.\n//////////////////////////////////////////\nforEach({\n  removeData: JQLiteRemoveData,\n\n  dealoc: JQLiteDealoc,\n\n  bind: function bindFn(element, type, fn){\n    var events = JQLiteExpandoStore(element, 'events'),\n        handle = JQLiteExpandoStore(element, 'handle');\n\n    if (!events) JQLiteExpandoStore(element, 'events', events = {});\n    if (!handle) JQLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));\n\n    forEach(type.split(' '), function(type){\n      var eventFns = events[type];\n\n      if (!eventFns) {\n        if (type == 'mouseenter' || type == 'mouseleave') {\n          var contains = document.body.contains || document.body.compareDocumentPosition ?\n          function( a, b ) {\n            var adown = a.nodeType === 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a === bup || !!( bup && bup.nodeType === 1 && (\n              adown.contains ?\n              adown.contains( bup ) :\n              a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n              ));\n            } :\n            function( a, b ) {\n              if ( b ) {\n                while ( (b = b.parentNode) ) {\n                  if ( b === a ) {\n                    return true;\n                  }\n                }\n              }\n              return false;\n            };\t\n\n          events[type] = [];\n\t\t\n\t\t  // Refer to jQuery's implementation of mouseenter & mouseleave\n          // Read about mouseenter and mouseleave:\n          // http://www.quirksmode.org/js/events_mouse.html#link8\n          var eventmap = { mouseleave : \"mouseout\", mouseenter : \"mouseover\"}          \n          bindFn(element, eventmap[type], function(event) {\n            var ret, target = this, related = event.relatedTarget;\n            // For mousenter/leave call the handler if related is outside the target.\n            // NB: No relatedTarget if the mouse left/entered the browser window\n            if ( !related || (related !== target && !contains(target, related)) ){\n              handle(event, type);\n            }\t\n\n          });\n\n        } else {\n          addEventListenerFn(element, type, handle);\n          events[type] = [];\n        }\n        eventFns = events[type]\n      }\n      eventFns.push(fn);\n    });\n  },\n\n  unbind: JQLiteUnbind,\n\n  replaceWith: function(element, replaceNode) {\n    var index, parent = element.parentNode;\n    JQLiteDealoc(element);\n    forEach(new JQLite(replaceNode), function(node){\n      if (index) {\n        parent.insertBefore(node, index.nextSibling);\n      } else {\n        parent.replaceChild(node, element);\n      }\n      index = node;\n    });\n  },\n\n  children: function(element) {\n    var children = [];\n    forEach(element.childNodes, function(element){\n      if (element.nodeType === 1)\n        children.push(element);\n    });\n    return children;\n  },\n\n  contents: function(element) {\n    return element.childNodes || [];\n  },\n\n  append: function(element, node) {\n    forEach(new JQLite(node), function(child){\n      if (element.nodeType === 1 || element.nodeType === 11) {\n        element.appendChild(child);\n      }\n    });\n  },\n\n  prepend: function(element, node) {\n    if (element.nodeType === 1) {\n      var index = element.firstChild;\n      forEach(new JQLite(node), function(child){\n        if (index) {\n          element.insertBefore(child, index);\n        } else {\n          element.appendChild(child);\n          index = child;\n        }\n      });\n    }\n  },\n\n  wrap: function(element, wrapNode) {\n    wrapNode = jqLite(wrapNode)[0];\n    var parent = element.parentNode;\n    if (parent) {\n      parent.replaceChild(wrapNode, element);\n    }\n    wrapNode.appendChild(element);\n  },\n\n  remove: function(element) {\n    JQLiteDealoc(element);\n    var parent = element.parentNode;\n    if (parent) parent.removeChild(element);\n  },\n\n  after: function(element, newElement) {\n    var index = element, parent = element.parentNode;\n    forEach(new JQLite(newElement), function(node){\n      parent.insertBefore(node, index.nextSibling);\n      index = node;\n    });\n  },\n\n  addClass: JQLiteAddClass,\n  removeClass: JQLiteRemoveClass,\n\n  toggleClass: function(element, selector, condition) {\n    if (isUndefined(condition)) {\n      condition = !JQLiteHasClass(element, selector);\n    }\n    (condition ? JQLiteAddClass : JQLiteRemoveClass)(element, selector);\n  },\n\n  parent: function(element) {\n    var parent = element.parentNode;\n    return parent && parent.nodeType !== 11 ? parent : null;\n  },\n\n  next: function(element) {\n    if (element.nextElementSibling) {\n      return element.nextElementSibling;\n    }\n\n    // IE8 doesn't have nextElementSibling\n    var elm = element.nextSibling;\n    while (elm != null && elm.nodeType !== 1) {\n      elm = elm.nextSibling;\n    }\n    return elm;\n  },\n\n  find: function(element, selector) {\n    return element.getElementsByTagName(selector);\n  },\n\n  clone: JQLiteClone,\n\n  triggerHandler: function(element, eventName) {\n    var eventFns = (JQLiteExpandoStore(element, 'events') || {})[eventName];\n    var event;\n\n    forEach(eventFns, function(fn) {\n      fn.call(element, {preventDefault: noop});\n    });\n  }\n}, function(fn, name){\n  /**\n   * chaining functions\n   */\n  JQLite.prototype[name] = function(arg1, arg2) {\n    var value;\n    for(var i=0; i < this.length; i++) {\n      if (value == undefined) {\n        value = fn(this[i], arg1, arg2);\n        if (value !== undefined) {\n          // any function which returns a value needs to be wrapped\n          value = jqLite(value);\n        }\n      } else {\n        JQLiteAddNodes(value, fn(this[i], arg1, arg2));\n      }\n    }\n    return value == undefined ? this : value;\n  };\n});\n\n/**\n * Computes a hash of an 'obj'.\n * Hash of a:\n *  string is string\n *  number is number as string\n *  object is either result of calling $$hashKey function on the object or uniquely generated id,\n *         that is also assigned to the $$hashKey property of the object.\n *\n * @param obj\n * @returns {string} hash string such that the same input will have the same hash string.\n *         The resulting string key is in 'type:hashKey' format.\n */\nfunction hashKey(obj) {\n  var objType = typeof obj,\n      key;\n\n  if (objType == 'object' && obj !== null) {\n    if (typeof (key = obj.$$hashKey) == 'function') {\n      // must invoke on object to keep the right this\n      key = obj.$$hashKey();\n    } else if (key === undefined) {\n      key = obj.$$hashKey = nextUid();\n    }\n  } else {\n    key = obj;\n  }\n\n  return objType + ':' + key;\n}\n\n/**\n * HashMap which can use objects as keys\n */\nfunction HashMap(array){\n  forEach(array, this.put, this);\n}\nHashMap.prototype = {\n  /**\n   * Store key value pair\n   * @param key key to store can be any type\n   * @param value value to store can be any type\n   */\n  put: function(key, value) {\n    this[hashKey(key)] = value;\n  },\n\n  /**\n   * @param key\n   * @returns the value for the key\n   */\n  get: function(key) {\n    return this[hashKey(key)];\n  },\n\n  /**\n   * Remove the key/value pair\n   * @param key\n   */\n  remove: function(key) {\n    var value = this[key = hashKey(key)];\n    delete this[key];\n    return value;\n  }\n};\n\n/**\n * @ngdoc function\n * @name angular.injector\n * @function\n *\n * @description\n * Creates an injector function that can be used for retrieving services as well as for\n * dependency injection (see {@link guide/di dependency injection}).\n *\n\n * @param {Array.<string|Function>} modules A list of module functions or their aliases. See\n *        {@link angular.module}. The `ng` module must be explicitly added.\n * @returns {function()} Injector function. See {@link AUTO.$injector $injector}.\n *\n * @example\n * Typical usage\n * <pre>\n *   // create an injector\n *   var $injector = angular.injector(['ng']);\n *\n *   // use the injector to kick off your application\n *   // use the type inference to auto inject arguments, or use implicit injection\n *   $injector.invoke(function($rootScope, $compile, $document){\n *     $compile($document)($rootScope);\n *     $rootScope.$digest();\n *   });\n * </pre>\n */\n\n\n/**\n * @ngdoc overview\n * @name AUTO\n * @description\n *\n * Implicit module which gets automatically added to each {@link AUTO.$injector $injector}.\n */\n\nvar FN_ARGS = /^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nfunction annotate(fn) {\n  var $inject,\n      fnText,\n      argDecl,\n      last;\n\n  if (typeof fn == 'function') {\n    if (!($inject = fn.$inject)) {\n      $inject = [];\n      fnText = fn.toString().replace(STRIP_COMMENTS, '');\n      argDecl = fnText.match(FN_ARGS);\n      forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg){\n        arg.replace(FN_ARG, function(all, underscore, name){\n          $inject.push(name);\n        });\n      });\n      fn.$inject = $inject;\n    }\n  } else if (isArray(fn)) {\n    last = fn.length - 1;\n    assertArgFn(fn[last], 'fn');\n    $inject = fn.slice(0, last);\n  } else {\n    assertArgFn(fn, 'fn', true);\n  }\n  return $inject;\n}\n\n///////////////////////////////////////\n\n/**\n * @ngdoc object\n * @name AUTO.$injector\n * @function\n *\n * @description\n *\n * `$injector` is used to retrieve object instances as defined by\n * {@link AUTO.$provide provider}, instantiate types, invoke methods,\n * and load modules.\n *\n * The following always holds true:\n *\n * <pre>\n *   var $injector = angular.injector();\n *   expect($injector.get('$injector')).toBe($injector);\n *   expect($injector.invoke(function($injector){\n *     return $injector;\n *   }).toBe($injector);\n * </pre>\n *\n * # Injection Function Annotation\n *\n * JavaScript does not have annotations, and annotations are needed for dependency injection. The\n * following are all valid ways of annotating function with injection arguments and are equivalent.\n *\n * <pre>\n *   // inferred (only works if code not minified/obfuscated)\n *   $injector.invoke(function(serviceA){});\n *\n *   // annotated\n *   function explicit(serviceA) {};\n *   explicit.$inject = ['serviceA'];\n *   $injector.invoke(explicit);\n *\n *   // inline\n *   $injector.invoke(['serviceA', function(serviceA){}]);\n * </pre>\n *\n * ## Inference\n *\n * In JavaScript calling `toString()` on a function returns the function definition. The definition can then be\n * parsed and the function arguments can be extracted. *NOTE:* This does not work with minification, and obfuscation\n * tools since these tools change the argument names.\n *\n * ## `$inject` Annotation\n * By adding a `$inject` property onto a function the injection parameters can be specified.\n *\n * ## Inline\n * As an array of injection names, where the last item in the array is the function to call.\n */\n\n/**\n * @ngdoc method\n * @name AUTO.$injector#get\n * @methodOf AUTO.$injector\n *\n * @description\n * Return an instance of the service.\n *\n * @param {string} name The name of the instance to retrieve.\n * @return {*} The instance.\n */\n\n/**\n * @ngdoc method\n * @name AUTO.$injector#invoke\n * @methodOf AUTO.$injector\n *\n * @description\n * Invoke the method and supply the method arguments from the `$injector`.\n *\n * @param {!function} fn The function to invoke. The function arguments come form the function annotation.\n * @param {Object=} self The `this` for the invoked method.\n * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before\n *   the `$injector` is consulted.\n * @returns {*} the value returned by the invoked `fn` function.\n */\n\n/**\n * @ngdoc method\n * @name AUTO.$injector#has\n * @methodOf AUTO.$injector\n *\n * @description\n * Allows the user to query if the particular service exist.\n *\n * @param {string} Name of the service to query.\n * @returns {boolean} returns true if injector has given service.\n */\n\n/**\n * @ngdoc method\n * @name AUTO.$injector#instantiate\n * @methodOf AUTO.$injector\n * @description\n * Create a new instance of JS type. The method takes a constructor function invokes the new operator and supplies\n * all of the arguments to the constructor function as specified by the constructor annotation.\n *\n * @param {function} Type Annotated constructor function.\n * @param {Object=} locals Optional object. If preset then any argument names are read from this object first, before\n *   the `$injector` is consulted.\n * @returns {Object} new instance of `Type`.\n */\n\n/**\n * @ngdoc method\n * @name AUTO.$injector#annotate\n * @methodOf AUTO.$injector\n *\n * @description\n * Returns an array of service names which the function is requesting for injection. This API is used by the injector\n * to determine which services need to be injected into the function when the function is invoked. There are three\n * ways in which the function can be annotated with the needed dependencies.\n *\n * # Argument names\n *\n * The simplest form is to extract the dependencies from the arguments of the function. This is done by converting\n * the function into a string using `toString()` method and extracting the argument names.\n * <pre>\n *   // Given\n *   function MyController($scope, $route) {\n *     // ...\n *   }\n *\n *   // Then\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n * </pre>\n *\n * This method does not work with code minfication / obfuscation. For this reason the following annotation strategies\n * are supported.\n *\n * # The `$inject` property\n *\n * If a function has an `$inject` property and its value is an array of strings, then the strings represent names of\n * services to be injected into the function.\n * <pre>\n *   // Given\n *   var MyController = function(obfuscatedScope, obfuscatedRoute) {\n *     // ...\n *   }\n *   // Define function dependencies\n *   MyController.$inject = ['$scope', '$route'];\n *\n *   // Then\n *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);\n * </pre>\n *\n * # The array notation\n *\n * It is often desirable to inline Injected functions and that's when setting the `$inject` property is very\n * inconvenient. In these situations using the array notation to specify the dependencies in a way that survives\n * minification is a better choice:\n *\n * <pre>\n *   // We wish to write this (not minification / obfuscation safe)\n *   injector.invoke(function($compile, $rootScope) {\n *     // ...\n *   });\n *\n *   // We are forced to write break inlining\n *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {\n *     // ...\n *   };\n *   tmpFn.$inject = ['$compile', '$rootScope'];\n *   injector.invoke(tmpFn);\n *\n *   // To better support inline function the inline annotation is supported\n *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {\n *     // ...\n *   }]);\n *\n *   // Therefore\n *   expect(injector.annotate(\n *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])\n *    ).toEqual(['$compile', '$rootScope']);\n * </pre>\n *\n * @param {function|Array.<string|Function>} fn Function for which dependent service names need to be retrieved as described\n *   above.\n *\n * @returns {Array.<string>} The names of the services which the function requires.\n */\n\n\n\n\n/**\n * @ngdoc object\n * @name AUTO.$provide\n *\n * @description\n *\n * Use `$provide` to register new providers with the `$injector`. The providers are the factories for the instance.\n * The providers share the same name as the instance they create with `Provider` suffixed to them.\n *\n * A provider is an object with a `$get()` method. The injector calls the `$get` method to create a new instance of\n * a service. The Provider can have additional methods which would allow for configuration of the provider.\n *\n * <pre>\n *   function GreetProvider() {\n *     var salutation = 'Hello';\n *\n *     this.salutation = function(text) {\n *       salutation = text;\n *     };\n *\n *     this.$get = function() {\n *       return function (name) {\n *         return salutation + ' ' + name + '!';\n *       };\n *     };\n *   }\n *\n *   describe('Greeter', function(){\n *\n *     beforeEach(module(function($provide) {\n *       $provide.provider('greet', GreetProvider);\n *     }));\n *\n *     it('should greet', inject(function(greet) {\n *       expect(greet('angular')).toEqual('Hello angular!');\n *     }));\n *\n *     it('should allow configuration of salutation', function() {\n *       module(function(greetProvider) {\n *         greetProvider.salutation('Ahoj');\n *       });\n *       inject(function(greet) {\n *         expect(greet('angular')).toEqual('Ahoj angular!');\n *       });\n *     });\n * </pre>\n */\n\n/**\n * @ngdoc method\n * @name AUTO.$provide#provider\n * @methodOf AUTO.$provide\n * @description\n *\n * Register a provider for a service. The providers can be retrieved and can have additional configuration methods.\n *\n * @param {string} name The name of the instance. NOTE: the provider will be available under `name + 'Provider'` key.\n * @param {(Object|function())} provider If the provider is:\n *\n *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using\n *               {@link AUTO.$injector#invoke $injector.invoke()} when an instance needs to be created.\n *   - `Constructor`: a new instance of the provider will be created using\n *               {@link AUTO.$injector#instantiate $injector.instantiate()}, then treated as `object`.\n *\n * @returns {Object} registered provider instance\n */\n\n/**\n * @ngdoc method\n * @name AUTO.$provide#factory\n * @methodOf AUTO.$provide\n * @description\n *\n * A short hand for configuring services if only `$get` method is required.\n *\n * @param {string} name The name of the instance.\n * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand for\n * `$provide.provider(name, {$get: $getFn})`.\n * @returns {Object} registered provider instance\n */\n\n\n/**\n * @ngdoc method\n * @name AUTO.$provide#service\n * @methodOf AUTO.$provide\n * @description\n *\n * A short hand for registering service of given class.\n *\n * @param {string} name The name of the instance.\n * @param {Function} constructor A class (constructor function) that will be instantiated.\n * @returns {Object} registered provider instance\n */\n\n\n/**\n * @ngdoc method\n * @name AUTO.$provide#value\n * @methodOf AUTO.$provide\n * @description\n *\n * A short hand for configuring services if the `$get` method is a constant.\n *\n * @param {string} name The name of the instance.\n * @param {*} value The value.\n * @returns {Object} registered provider instance\n */\n\n\n/**\n * @ngdoc method\n * @name AUTO.$provide#constant\n * @methodOf AUTO.$provide\n * @description\n *\n * A constant value, but unlike {@link AUTO.$provide#value value} it can be injected\n * into configuration function (other modules) and it is not interceptable by\n * {@link AUTO.$provide#decorator decorator}.\n *\n * @param {string} name The name of the constant.\n * @param {*} value The constant value.\n * @returns {Object} registered instance\n */\n\n\n/**\n * @ngdoc method\n * @name AUTO.$provide#decorator\n * @methodOf AUTO.$provide\n * @description\n *\n * Decoration of service, allows the decorator to intercept the service instance creation. The\n * returned instance may be the original instance, or a new instance which delegates to the\n * original instance.\n *\n * @param {string} name The name of the service to decorate.\n * @param {function()} decorator This function will be invoked when the service needs to be\n *    instantiated. The function is called using the {@link AUTO.$injector#invoke\n *    injector.invoke} method and is therefore fully injectable. Local injection arguments:\n *\n *    * `$delegate` - The original service instance, which can be monkey patched, configured,\n *      decorated or delegated to.\n */\n\n\nfunction createInjector(modulesToLoad) {\n  var INSTANTIATING = {},\n      providerSuffix = 'Provider',\n      path = [],\n      loadedModules = new HashMap(),\n      providerCache = {\n        $provide: {\n            provider: supportObject(provider),\n            factory: supportObject(factory),\n            service: supportObject(service),\n            value: supportObject(value),\n            constant: supportObject(constant),\n            decorator: decorator\n          }\n      },\n      providerInjector = (providerCache.$injector =\n          createInternalInjector(providerCache, function() {\n            throw Error(\"Unknown provider: \" + path.join(' <- '));\n          })),\n      instanceCache = {},\n      instanceInjector = (instanceCache.$injector =\n          createInternalInjector(instanceCache, function(servicename) {\n            var provider = providerInjector.get(servicename + providerSuffix);\n            return instanceInjector.invoke(provider.$get, provider);\n          }));\n\n\n  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });\n\n  return instanceInjector;\n\n  ////////////////////////////////////\n  // $provider\n  ////////////////////////////////////\n\n  function supportObject(delegate) {\n    return function(key, value) {\n      if (isObject(key)) {\n        forEach(key, reverseParams(delegate));\n      } else {\n        return delegate(key, value);\n      }\n    }\n  }\n\n  function provider(name, provider_) {\n    if (isFunction(provider_) || isArray(provider_)) {\n      provider_ = providerInjector.instantiate(provider_);\n    }\n    if (!provider_.$get) {\n      throw Error('Provider ' + name + ' must define $get factory method.');\n    }\n    return providerCache[name + providerSuffix] = provider_;\n  }\n\n  function factory(name, factoryFn) { return provider(name, { $get: factoryFn }); }\n\n  function service(name, constructor) {\n    return factory(name, ['$injector', function($injector) {\n      return $injector.instantiate(constructor);\n    }]);\n  }\n\n  function value(name, value) { return factory(name, valueFn(value)); }\n\n  function constant(name, value) {\n    providerCache[name] = value;\n    instanceCache[name] = value;\n  }\n\n  function decorator(serviceName, decorFn) {\n    var origProvider = providerInjector.get(serviceName + providerSuffix),\n        orig$get = origProvider.$get;\n\n    origProvider.$get = function() {\n      var origInstance = instanceInjector.invoke(orig$get, origProvider);\n      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});\n    };\n  }\n\n  ////////////////////////////////////\n  // Module Loading\n  ////////////////////////////////////\n  function loadModules(modulesToLoad){\n    var runBlocks = [];\n    forEach(modulesToLoad, function(module) {\n      if (loadedModules.get(module)) return;\n      loadedModules.put(module, true);\n      if (isString(module)) {\n        var moduleFn = angularModule(module);\n        runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);\n\n        try {\n          for(var invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {\n            var invokeArgs = invokeQueue[i],\n                provider = providerInjector.get(invokeArgs[0]);\n\n            provider[invokeArgs[1]].apply(provider, invokeArgs[2]);\n          }\n        } catch (e) {\n          if (e.message) e.message += ' from ' + module;\n          throw e;\n        }\n      } else if (isFunction(module)) {\n        try {\n          runBlocks.push(providerInjector.invoke(module));\n        } catch (e) {\n          if (e.message) e.message += ' from ' + module;\n          throw e;\n        }\n      } else if (isArray(module)) {\n        try {\n          runBlocks.push(providerInjector.invoke(module));\n        } catch (e) {\n          if (e.message) e.message += ' from ' + String(module[module.length - 1]);\n          throw e;\n        }\n      } else {\n        assertArgFn(module, 'module');\n      }\n    });\n    return runBlocks;\n  }\n\n  ////////////////////////////////////\n  // internal Injector\n  ////////////////////////////////////\n\n  function createInternalInjector(cache, factory) {\n\n    function getService(serviceName) {\n      if (typeof serviceName !== 'string') {\n        throw Error('Service name expected');\n      }\n      if (cache.hasOwnProperty(serviceName)) {\n        if (cache[serviceName] === INSTANTIATING) {\n          throw Error('Circular dependency: ' + path.join(' <- '));\n        }\n        return cache[serviceName];\n      } else {\n        try {\n          path.unshift(serviceName);\n          cache[serviceName] = INSTANTIATING;\n          return cache[serviceName] = factory(serviceName);\n        } finally {\n          path.shift();\n        }\n      }\n    }\n\n    function invoke(fn, self, locals){\n      var args = [],\n          $inject = annotate(fn),\n          length, i,\n          key;\n\n      for(i = 0, length = $inject.length; i < length; i++) {\n        key = $inject[i];\n        args.push(\n          locals && locals.hasOwnProperty(key)\n          ? locals[key]\n          : getService(key)\n        );\n      }\n      if (!fn.$inject) {\n        // this means that we must be an array.\n        fn = fn[length];\n      }\n\n\n      // Performance optimization: http://jsperf.com/apply-vs-call-vs-invoke\n      switch (self ? -1 : args.length) {\n        case  0: return fn();\n        case  1: return fn(args[0]);\n        case  2: return fn(args[0], args[1]);\n        case  3: return fn(args[0], args[1], args[2]);\n        case  4: return fn(args[0], args[1], args[2], args[3]);\n        case  5: return fn(args[0], args[1], args[2], args[3], args[4]);\n        case  6: return fn(args[0], args[1], args[2], args[3], args[4], args[5]);\n        case  7: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        case  8: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);\n        case  9: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);\n        case 10: return fn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);\n        default: return fn.apply(self, args);\n      }\n    }\n\n    function instantiate(Type, locals) {\n      var Constructor = function() {},\n          instance, returnedValue;\n\n      // Check if Type is annotated and use just the given function at n-1 as parameter\n      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);\n      Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;\n      instance = new Constructor();\n      returnedValue = invoke(Type, instance, locals);\n\n      return isObject(returnedValue) ? returnedValue : instance;\n    }\n\n    return {\n      invoke: invoke,\n      instantiate: instantiate,\n      get: getService,\n      annotate: annotate,\n      has: function(name) {\n        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);\n      }\n    };\n  }\n}\n\n/**\n * @ngdoc function\n * @name ng.$anchorScroll\n * @requires $window\n * @requires $location\n * @requires $rootScope\n *\n * @description\n * When called, it checks current value of `$location.hash()` and scroll to related element,\n * according to rules specified in\n * {@link http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document Html5 spec}.\n *\n * It also watches the `$location.hash()` and scroll whenever it changes to match any anchor.\n * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.\n */\nfunction $AnchorScrollProvider() {\n\n  var autoScrollingEnabled = true;\n\n  this.disableAutoScrolling = function() {\n    autoScrollingEnabled = false;\n  };\n\n  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {\n    var document = $window.document;\n\n    // helper function to get first anchor from a NodeList\n    // can't use filter.filter, as it accepts only instances of Array\n    // and IE can't convert NodeList to an array using [].slice\n    // TODO(vojta): use filter if we change it to accept lists as well\n    function getFirstAnchor(list) {\n      var result = null;\n      forEach(list, function(element) {\n        if (!result && lowercase(element.nodeName) === 'a') result = element;\n      });\n      return result;\n    }\n\n    function scroll() {\n      var hash = $location.hash(), elm;\n\n      // empty hash, scroll to the top of the page\n      if (!hash) $window.scrollTo(0, 0);\n\n      // element with given id\n      else if ((elm = document.getElementById(hash))) elm.scrollIntoView();\n\n      // first anchor with given name :-D\n      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) elm.scrollIntoView();\n\n      // no element and hash == 'top', scroll to the top of the page\n      else if (hash === 'top') $window.scrollTo(0, 0);\n    }\n\n    // does not scroll when user clicks on anchor link that is currently on\n    // (no url change, no $location.hash() change), browser native does scroll\n    if (autoScrollingEnabled) {\n      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},\n        function autoScrollWatchAction() {\n          $rootScope.$evalAsync(scroll);\n        });\n    }\n\n    return scroll;\n  }];\n}\n\n\n/**\n * @ngdoc object\n * @name ng.$animationProvider\n * @description\n *\n * The $AnimationProvider provider allows developers to register and access custom JavaScript animations directly inside\n * of a module.\n *\n */\n$AnimationProvider.$inject = ['$provide'];\nfunction $AnimationProvider($provide) {\n  var suffix = 'Animation';\n\n  /**\n   * @ngdoc function\n   * @name ng.$animation#register\n   * @methodOf ng.$animationProvider\n   *\n   * @description\n   * Registers a new injectable animation factory function. The factory function produces the animation object which\n   * has these two properties:\n   *\n   *   * `setup`: `function(Element):*` A function which receives the starting state of the element. The purpose\n   *   of this function is to get the element ready for animation. Optionally the function returns an memento which\n   *   is passed to the `start` function.\n   *   * `start`: `function(Element, doneFunction, *)` The element to animate, the `doneFunction` to be called on\n   *   element animation completion, and an optional memento from the `setup` function.\n   *\n   * @param {string} name The name of the animation.\n   * @param {function} factory The factory function that will be executed to return the animation object.\n   * \n   */\n  this.register = function(name, factory) {\n    $provide.factory(camelCase(name) + suffix, factory);\n  };\n\n  this.$get = ['$injector', function($injector) {\n    /**\n     * @ngdoc function\n     * @name ng.$animation\n     * @function\n     *\n     * @description\n     * The $animation service is used to retrieve any defined animation functions. When executed, the $animation service\n     * will return a object that contains the setup and start functions that were defined for the animation.\n     *\n     * @param {String} name Name of the animation function to retrieve. Animation functions are registered and stored\n     *        inside of the AngularJS DI so a call to $animate('custom') is the same as injecting `customAnimation`\n     *        via dependency injection.\n     * @return {Object} the animation object which contains the `setup` and `start` functions that perform the animation.\n     */\n    return function $animation(name) {\n      if (name) {\n        var animationName = camelCase(name) + suffix;\n        if ($injector.has(animationName)) {\n          return $injector.get(animationName);\n        }\n      }\n    };\n  }];\n}\n\n// NOTE: this is a pseudo directive.\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngAnimate\n *\n * @description\n * The `ngAnimate` directive works as an attribute that is attached alongside pre-existing directives.\n * It effects how the directive will perform DOM manipulation. This allows for complex animations to take place\n * without burdening the directive which uses the animation with animation details. The built in directives\n * `ngRepeat`, `ngInclude`, `ngSwitch`, `ngShow`, `ngHide` and `ngView` already accept `ngAnimate` directive.\n * Custom directives can take advantage of animation through {@link ng.$animator $animator service}.\n *\n * Below is a more detailed breakdown of the supported callback events provided by pre-exisitng ng directives:\n *\n * | Directive                                                 | Supported Animations                               |\n * |========================================================== |====================================================|\n * | {@link ng.directive:ngRepeat#animations ngRepeat}         | enter, leave and move                              |\n * | {@link ng.directive:ngView#animations ngView}             | enter and leave                                    |\n * | {@link ng.directive:ngInclude#animations ngInclude}       | enter and leave                                    |\n * | {@link ng.directive:ngSwitch#animations ngSwitch}         | enter and leave                                    |\n * | {@link ng.directive:ngIf#animations ngIf}                 | enter and leave                                    |\n * | {@link ng.directive:ngShow#animations ngShow & ngHide}    | show and hide                                      |\n *\n * You can find out more information about animations upon visiting each directive page.\n *\n * Below is an example of a directive that makes use of the ngAnimate attribute:\n *\n * <pre>\n * <!-- you can also use data-ng-animate, ng:animate or x-ng-animate as well -->\n * <ANY ng-directive ng-animate=\"{event1: 'animation-name', event2: 'animation-name-2'}\"></ANY>\n *\n * <!-- you can also use a short hand -->\n * <ANY ng-directive ng-animate=\" 'animation' \"></ANY>\n * <!-- which expands to -->\n * <ANY ng-directive ng-animate=\"{ enter: 'animation-enter', leave: 'animation-leave', ...}\"></ANY>\n *\n * <!-- keep in mind that ng-animate can take expressions -->\n * <ANY ng-directive ng-animate=\" computeCurrentAnimation() \"></ANY>\n * </pre>\n *\n * The `event1` and `event2` attributes refer to the animation events specific to the directive that has been assigned.\n *\n * Keep in mind that if an animation is running, no child element of such animation can also be animated.\n *\n * <h2>CSS-defined Animations</h2>\n * By default, ngAnimate attaches two CSS classes per animation event to the DOM element to achieve the animation.\n * It is up to you, the developer, to ensure that the animations take place using cross-browser CSS3 transitions as\n * well as CSS animations.\n *\n * The following code below demonstrates how to perform animations using **CSS transitions** with ngAnimate:\n *\n * <pre>\n * <style type=\"text/css\">\n * /&#42;\n *  The animate-enter CSS class is the event name that you\n *  have provided within the ngAnimate attribute.\n * &#42;/\n * .animate-enter {\n *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/\n *  -moz-transition: 1s linear all; /&#42; Firefox &#42;/\n *  -o-transition: 1s linear all; /&#42; Opera &#42;/\n *  transition: 1s linear all; /&#42; IE10+ and Future Browsers &#42;/\n *\n *  /&#42; The animation preparation code &#42;/\n *  opacity: 0;\n * }\n *\n * /&#42;\n *  Keep in mind that you want to combine both CSS\n *  classes together to avoid any CSS-specificity\n *  conflicts\n * &#42;/\n * .animate-enter.animate-enter-active {\n *  /&#42; The animation code itself &#42;/\n *  opacity: 1;\n * }\n * </style>\n *\n * <div ng-directive ng-animate=\"{enter: 'animate-enter'}\"></div>\n * </pre>\n *\n * The following code below demonstrates how to perform animations using **CSS animations** with ngAnimate:\n *\n * <pre>\n * <style type=\"text/css\">\n * .animate-enter {\n *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/\n *   -moz-animation: enter_sequence 1s linear; /&#42; Firefox &#42;/\n *   -o-animation: enter_sequence 1s linear; /&#42; Opera &#42;/\n *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/\n * }\n * &#64-webkit-keyframes enter_sequence {\n *   from { opacity:0; }\n *   to { opacity:1; }\n * }\n * &#64-moz-keyframes enter_sequence {\n *   from { opacity:0; }\n *   to { opacity:1; }\n * }\n * &#64-o-keyframes enter_sequence {\n *   from { opacity:0; }\n *   to { opacity:1; }\n * }\n * &#64keyframes enter_sequence {\n *   from { opacity:0; }\n *   to { opacity:1; }\n * }\n * </style>\n *\n * <div ng-directive ng-animate=\"{enter: 'animate-enter'}\"></div>\n * </pre>\n *\n * ngAnimate will first examine any CSS animation code and then fallback to using CSS transitions.\n *\n * Upon DOM mutation, the event class is added first, then the browser is allowed to reflow the content and then,\n * the active class is added to trigger the animation. The ngAnimate directive will automatically extract the duration\n * of the animation to determine when the animation ends. Once the animation is over then both CSS classes will be\n * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end\n * immediately resulting in a DOM element that is at it's final state. This final state is when the DOM element\n * has no CSS transition/animation classes surrounding it.\n *\n * <h2>JavaScript-defined Animations</h2>\n * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations to browsers that do not\n * yet support them, then you can make use of JavaScript animations defined inside of your AngularJS module.\n *\n * <pre>\n * var ngModule = angular.module('YourApp', []);\n * ngModule.animation('animate-enter', function() {\n *   return {\n *     setup : function(element) {\n *       //prepare the element for animation\n *       element.css({ 'opacity': 0 });\n *       var memo = \"...\"; //this value is passed to the start function\n *       return memo;\n *     },\n *     start : function(element, done, memo) {\n *       //start the animation\n *       element.animate({\n *         'opacity' : 1\n *       }, function() {\n *         //call when the animation is complete\n *         done()\n *       });\n *     }\n *   }\n * });\n * </pre>\n *\n * As you can see, the JavaScript code follows a similar template to the CSS3 animations. Once defined, the animation\n * can be used in the same way with the ngAnimate attribute. Keep in mind that, when using JavaScript-enabled\n * animations, ngAnimate will also add in the same CSS classes that CSS-enabled animations do (even if you're not using\n * CSS animations) to animated the element, but it will not attempt to find any CSS3 transition or animation duration/delay values.\n * It will instead close off the animation once the provided done function is executed. So it's important that you\n * make sure your animations remember to fire off the done function once the animations are complete.\n *\n * @param {expression} ngAnimate Used to configure the DOM manipulation animations.\n *\n */\n\nvar $AnimatorProvider = function() {\n  var NG_ANIMATE_CONTROLLER = '$ngAnimateController';\n  var rootAnimateController = {running:true};\n\n  this.$get = ['$animation', '$window', '$sniffer', '$rootElement', '$rootScope',\n      function($animation, $window, $sniffer, $rootElement, $rootScope) {\n    $rootElement.data(NG_ANIMATE_CONTROLLER, rootAnimateController);\n\n    /**\n     * @ngdoc function\n     * @name ng.$animator\n     * @function\n     *\n     * @description\n     * The $animator.create service provides the DOM manipulation API which is decorated with animations.\n     *\n     * @param {Scope} scope the scope for the ng-animate.\n     * @param {Attributes} attr the attributes object which contains the ngAnimate key / value pair. (The attributes are\n     *        passed into the linking function of the directive using the `$animator`.)\n     * @return {object} the animator object which contains the enter, leave, move, show, hide and animate methods.\n     */\n     var AnimatorService = function(scope, attrs) {\n        var animator = {};\n  \n        /**\n         * @ngdoc function\n         * @name ng.animator#enter\n         * @methodOf ng.$animator\n         * @function\n         *\n         * @description\n         * Injects the element object into the DOM (inside of the parent element) and then runs the enter animation.\n         *\n         * @param {jQuery/jqLite element} element the element that will be the focus of the enter animation\n         * @param {jQuery/jqLite element} parent the parent element of the element that will be the focus of the enter animation\n         * @param {jQuery/jqLite element} after the sibling element (which is the previous element) of the element that will be the focus of the enter animation\n        */\n        animator.enter = animateActionFactory('enter', insert, noop);\n  \n        /**\n         * @ngdoc function\n         * @name ng.animator#leave\n         * @methodOf ng.$animator\n         * @function\n         *\n         * @description\n         * Runs the leave animation operation and, upon completion, removes the element from the DOM.\n         *\n         * @param {jQuery/jqLite element} element the element that will be the focus of the leave animation\n         * @param {jQuery/jqLite element} parent the parent element of the element that will be the focus of the leave animation\n        */\n        animator.leave = animateActionFactory('leave', noop, remove);\n  \n        /**\n         * @ngdoc function\n         * @name ng.animator#move\n         * @methodOf ng.$animator\n         * @function\n         *\n         * @description\n         * Fires the move DOM operation. Just before the animation starts, the animator will either append it into the parent container or\n         * add the element directly after the after element if present. Then the move animation will be run.\n         *\n         * @param {jQuery/jqLite element} element the element that will be the focus of the move animation\n         * @param {jQuery/jqLite element} parent the parent element of the element that will be the focus of the move animation\n         * @param {jQuery/jqLite element} after the sibling element (which is the previous element) of the element that will be the focus of the move animation\n        */\n        animator.move = animateActionFactory('move', move, noop);\n  \n        /**\n         * @ngdoc function\n         * @name ng.animator#show\n         * @methodOf ng.$animator\n         * @function\n         *\n         * @description\n         * Reveals the element by setting the CSS property `display` to `block` and then starts the show animation directly after.\n         *\n         * @param {jQuery/jqLite element} element the element that will be rendered visible or hidden\n        */\n        animator.show = animateActionFactory('show', show, noop);\n  \n        /**\n         * @ngdoc function\n         * @name ng.animator#hide\n         * @methodOf ng.$animator\n         *\n         * @description\n         * Starts the hide animation first and sets the CSS `display` property to `none` upon completion.\n         *\n         * @param {jQuery/jqLite element} element the element that will be rendered visible or hidden\n        */\n        animator.hide = animateActionFactory('hide', noop, hide);\n\n        /**\n         * @ngdoc function\n         * @name ng.animator#animate\n         * @methodOf ng.$animator\n         *\n         * @description\n         * Triggers a custom animation event to be executed on the given element\n         *\n         * @param {jQuery/jqLite element} element that will be animated\n        */\n        animator.animate = function(event, element) {\n          animateActionFactory(event, noop, noop)(element);\n        }\n        return animator;\n  \n        function animateActionFactory(type, beforeFn, afterFn) {\n          return function(element, parent, after) {\n            var ngAnimateValue = scope.$eval(attrs.ngAnimate);\n            var className = ngAnimateValue\n                ? isObject(ngAnimateValue) ? ngAnimateValue[type] : ngAnimateValue + '-' + type\n                : '';\n            var animationPolyfill = $animation(className);\n            var polyfillSetup = animationPolyfill && animationPolyfill.setup;\n            var polyfillStart = animationPolyfill && animationPolyfill.start;\n            var polyfillCancel = animationPolyfill && animationPolyfill.cancel;\n\n            if (!className) {\n              beforeFn(element, parent, after);\n              afterFn(element, parent, after);\n            } else {\n              var activeClassName = className + '-active';\n\n              if (!parent) {\n                parent = after ? after.parent() : element.parent();\n              }\n              if ((!$sniffer.transitions && !polyfillSetup && !polyfillStart) ||\n                  (parent.inheritedData(NG_ANIMATE_CONTROLLER) || noop).running) {\n                beforeFn(element, parent, after);\n                afterFn(element, parent, after);\n                return;\n              }\n\n              var animationData = element.data(NG_ANIMATE_CONTROLLER) || {};\n              if(animationData.running) {\n                (polyfillCancel || noop)(element);\n                animationData.done();\n              }\n\n              element.data(NG_ANIMATE_CONTROLLER, {running:true, done:done});\n              element.addClass(className);\n              beforeFn(element, parent, after);\n              if (element.length == 0) return done();\n\n              var memento = (polyfillSetup || noop)(element);\n\n              // $window.setTimeout(beginAnimation, 0); this was causing the element not to animate\n              // keep at 1 for animation dom rerender\n              $window.setTimeout(beginAnimation, 1);\n            }\n\n            function parseMaxTime(str) {\n              var total = 0, values = isString(str) ? str.split(/\\s*,\\s*/) : [];\n              forEach(values, function(value) {\n                total = Math.max(parseFloat(value) || 0, total);\n              });\n              return total;\n            }\n\n            function beginAnimation() {\n              element.addClass(activeClassName);\n              if (polyfillStart) {\n                polyfillStart(element, done, memento);\n              } else if (isFunction($window.getComputedStyle)) {\n                //one day all browsers will have these properties\n                var w3cAnimationProp = 'animation'; \n                var w3cTransitionProp = 'transition';\n\n                //but some still use vendor-prefixed styles \n                var vendorAnimationProp = $sniffer.vendorPrefix + 'Animation';\n                var vendorTransitionProp = $sniffer.vendorPrefix + 'Transition';\n\n                var durationKey = 'Duration',\n                    delayKey = 'Delay',\n                    animationIterationCountKey = 'IterationCount',\n                    duration = 0;\n                \n                //we want all the styles defined before and after\n                var ELEMENT_NODE = 1;\n                forEach(element, function(element) {\n                  if (element.nodeType == ELEMENT_NODE) {\n                    var w3cProp = w3cTransitionProp,\n                        vendorProp = vendorTransitionProp,\n                        iterations = 1,\n                        elementStyles = $window.getComputedStyle(element) || {};\n\n                    //use CSS Animations over CSS Transitions\n                    if(parseFloat(elementStyles[w3cAnimationProp + durationKey]) > 0 ||\n                       parseFloat(elementStyles[vendorAnimationProp + durationKey]) > 0) {\n                      w3cProp = w3cAnimationProp;\n                      vendorProp = vendorAnimationProp;\n                      iterations = Math.max(parseInt(elementStyles[w3cProp    + animationIterationCountKey]) || 0,\n                                            parseInt(elementStyles[vendorProp + animationIterationCountKey]) || 0,\n                                            iterations);\n                    }\n\n                    var parsedDelay     = Math.max(parseMaxTime(elementStyles[w3cProp     + delayKey]),\n                                                   parseMaxTime(elementStyles[vendorProp  + delayKey]));\n\n                    var parsedDuration  = Math.max(parseMaxTime(elementStyles[w3cProp     + durationKey]),\n                                                   parseMaxTime(elementStyles[vendorProp  + durationKey]));\n\n                    duration = Math.max(parsedDelay + (iterations * parsedDuration), duration);\n                  }\n                });\n                $window.setTimeout(done, duration * 1000);\n              } else {\n                done();\n              }\n            }\n\n            function done() {\n              if(!done.run) {\n                done.run = true;\n                afterFn(element, parent, after);\n                element.removeClass(className);\n                element.removeClass(activeClassName);\n                element.removeData(NG_ANIMATE_CONTROLLER);\n              }\n            }\n          };\n        }\n  \n        function show(element) {\n          element.css('display', '');\n        }\n  \n        function hide(element) {\n          element.css('display', 'none');\n        }\n  \n        function insert(element, parent, after) {\n          if (after) {\n            after.after(element);\n          } else {\n            parent.append(element);\n          }\n        }\n  \n        function remove(element) {\n          element.remove();\n        }\n  \n        function move(element, parent, after) {\n          // Do not remove element before insert. Removing will cause data associated with the\n          // element to be dropped. Insert will implicitly do the remove.\n          insert(element, parent, after);\n        }\n      };\n\n    /**\n     * @ngdoc function\n     * @name ng.animator#enabled\n     * @methodOf ng.$animator\n     * @function\n     *\n     * @param {Boolean=} If provided then set the animation on or off.\n     * @return {Boolean} Current animation state.\n     *\n     * @description\n     * Globally enables/disables animations.\n     *\n    */\n    AnimatorService.enabled = function(value) {\n      if (arguments.length) {\n        rootAnimateController.running = !value;\n      }\n      return !rootAnimateController.running;\n    };\n\n    return AnimatorService;\n  }];\n};\n\n/**\n * ! This is a private undocumented service !\n *\n * @name ng.$browser\n * @requires $log\n * @description\n * This object has two goals:\n *\n * - hide all the global state in the browser caused by the window object\n * - abstract away all the browser specific features and inconsistencies\n *\n * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`\n * service, which can be used for convenient testing of the application without the interaction with\n * the real browser apis.\n */\n/**\n * @param {object} window The global window object.\n * @param {object} document jQuery wrapped document.\n * @param {function()} XHR XMLHttpRequest constructor.\n * @param {object} $log console.log or an object with the same interface.\n * @param {object} $sniffer $sniffer service\n */\nfunction Browser(window, document, $log, $sniffer) {\n  var self = this,\n      rawDocument = document[0],\n      location = window.location,\n      history = window.history,\n      setTimeout = window.setTimeout,\n      clearTimeout = window.clearTimeout,\n      pendingDeferIds = {};\n\n  self.isMock = false;\n\n  var outstandingRequestCount = 0;\n  var outstandingRequestCallbacks = [];\n\n  // TODO(vojta): remove this temporary api\n  self.$$completeOutstandingRequest = completeOutstandingRequest;\n  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };\n\n  /**\n   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`\n   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.\n   */\n  function completeOutstandingRequest(fn) {\n    try {\n      fn.apply(null, sliceArgs(arguments, 1));\n    } finally {\n      outstandingRequestCount--;\n      if (outstandingRequestCount === 0) {\n        while(outstandingRequestCallbacks.length) {\n          try {\n            outstandingRequestCallbacks.pop()();\n          } catch (e) {\n            $log.error(e);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @private\n   * Note: this method is used only by scenario runner\n   * TODO(vojta): prefix this method with $$ ?\n   * @param {function()} callback Function that will be called when no outstanding request\n   */\n  self.notifyWhenNoOutstandingRequests = function(callback) {\n    // force browser to execute all pollFns - this is needed so that cookies and other pollers fire\n    // at some deterministic time in respect to the test runner's actions. Leaving things up to the\n    // regular poller would result in flaky tests.\n    forEach(pollFns, function(pollFn){ pollFn(); });\n\n    if (outstandingRequestCount === 0) {\n      callback();\n    } else {\n      outstandingRequestCallbacks.push(callback);\n    }\n  };\n\n  //////////////////////////////////////////////////////////////\n  // Poll Watcher API\n  //////////////////////////////////////////////////////////////\n  var pollFns = [],\n      pollTimeout;\n\n  /**\n   * @name ng.$browser#addPollFn\n   * @methodOf ng.$browser\n   *\n   * @param {function()} fn Poll function to add\n   *\n   * @description\n   * Adds a function to the list of functions that poller periodically executes,\n   * and starts polling if not started yet.\n   *\n   * @returns {function()} the added function\n   */\n  self.addPollFn = function(fn) {\n    if (isUndefined(pollTimeout)) startPoller(100, setTimeout);\n    pollFns.push(fn);\n    return fn;\n  };\n\n  /**\n   * @param {number} interval How often should browser call poll functions (ms)\n   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.\n   *\n   * @description\n   * Configures the poller to run in the specified intervals, using the specified\n   * setTimeout fn and kicks it off.\n   */\n  function startPoller(interval, setTimeout) {\n    (function check() {\n      forEach(pollFns, function(pollFn){ pollFn(); });\n      pollTimeout = setTimeout(check, interval);\n    })();\n  }\n\n  //////////////////////////////////////////////////////////////\n  // URL API\n  //////////////////////////////////////////////////////////////\n\n  var lastBrowserUrl = location.href,\n      baseElement = document.find('base');\n\n  /**\n   * @name ng.$browser#url\n   * @methodOf ng.$browser\n   *\n   * @description\n   * GETTER:\n   * Without any argument, this method just returns current value of location.href.\n   *\n   * SETTER:\n   * With at least one argument, this method sets url to new value.\n   * If html5 history api supported, pushState/replaceState is used, otherwise\n   * location.href/location.replace is used.\n   * Returns its own instance to allow chaining\n   *\n   * NOTE: this api is intended for use only by the $location service. Please use the\n   * {@link ng.$location $location service} to change url.\n   *\n   * @param {string} url New url (when used as setter)\n   * @param {boolean=} replace Should new url replace current history record ?\n   */\n  self.url = function(url, replace) {\n    // setter\n    if (url) {\n      if (lastBrowserUrl == url) return;\n      lastBrowserUrl = url;\n      if ($sniffer.history) {\n        if (replace) history.replaceState(null, '', url);\n        else {\n          history.pushState(null, '', url);\n          // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462\n          baseElement.attr('href', baseElement.attr('href'));\n        }\n      } else {\n        if (replace) location.replace(url);\n        else location.href = url;\n      }\n      return self;\n    // getter\n    } else {\n      // the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172\n      return location.href.replace(/%27/g,\"'\");\n    }\n  };\n\n  var urlChangeListeners = [],\n      urlChangeInit = false;\n\n  function fireUrlChange() {\n    if (lastBrowserUrl == self.url()) return;\n\n    lastBrowserUrl = self.url();\n    forEach(urlChangeListeners, function(listener) {\n      listener(self.url());\n    });\n  }\n\n  /**\n   * @name ng.$browser#onUrlChange\n   * @methodOf ng.$browser\n   * @TODO(vojta): refactor to use node's syntax for events\n   *\n   * @description\n   * Register callback function that will be called, when url changes.\n   *\n   * It's only called when the url is changed by outside of angular:\n   * - user types different url into address bar\n   * - user clicks on history (forward/back) button\n   * - user clicks on a link\n   *\n   * It's not called when url is changed by $browser.url() method\n   *\n   * The listener gets called with new url as parameter.\n   *\n   * NOTE: this api is intended for use only by the $location service. Please use the\n   * {@link ng.$location $location service} to monitor url changes in angular apps.\n   *\n   * @param {function(string)} listener Listener function to be called when url changes.\n   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.\n   */\n  self.onUrlChange = function(callback) {\n    if (!urlChangeInit) {\n      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)\n      // don't fire popstate when user change the address bar and don't fire hashchange when url\n      // changed by push/replaceState\n\n      // html5 history api - popstate event\n      if ($sniffer.history) jqLite(window).bind('popstate', fireUrlChange);\n      // hashchange event\n      if ($sniffer.hashchange) jqLite(window).bind('hashchange', fireUrlChange);\n      // polling\n      else self.addPollFn(fireUrlChange);\n\n      urlChangeInit = true;\n    }\n\n    urlChangeListeners.push(callback);\n    return callback;\n  };\n\n  //////////////////////////////////////////////////////////////\n  // Misc API\n  //////////////////////////////////////////////////////////////\n\n  /**\n   * Returns current <base href>\n   * (always relative - without domain)\n   *\n   * @returns {string=}\n   */\n  self.baseHref = function() {\n    var href = baseElement.attr('href');\n    return href ? href.replace(/^https?\\:\\/\\/[^\\/]*/, '') : '';\n  };\n\n  //////////////////////////////////////////////////////////////\n  // Cookies API\n  //////////////////////////////////////////////////////////////\n  var lastCookies = {};\n  var lastCookieString = '';\n  var cookiePath = self.baseHref();\n\n  /**\n   * @name ng.$browser#cookies\n   * @methodOf ng.$browser\n   *\n   * @param {string=} name Cookie name\n   * @param {string=} value Cookie value\n   *\n   * @description\n   * The cookies method provides a 'private' low level access to browser cookies.\n   * It is not meant to be used directly, use the $cookie service instead.\n   *\n   * The return values vary depending on the arguments that the method was called with as follows:\n   * <ul>\n   *   <li>cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify it</li>\n   *   <li>cookies(name, value) -> set name to value, if value is undefined delete the cookie</li>\n   *   <li>cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that way)</li>\n   * </ul>\n   *\n   * @returns {Object} Hash of all cookies (if called without any parameter)\n   */\n  self.cookies = function(name, value) {\n    var cookieLength, cookieArray, cookie, i, index;\n\n    if (name) {\n      if (value === undefined) {\n        rawDocument.cookie = escape(name) + \"=;path=\" + cookiePath + \";expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n      } else {\n        if (isString(value)) {\n          cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) + ';path=' + cookiePath).length + 1;\n\n          // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n          // - 300 cookies\n          // - 20 cookies per unique domain\n          // - 4096 bytes per cookie\n          if (cookieLength > 4096) {\n            $log.warn(\"Cookie '\"+ name +\"' possibly not set or overflowed because it was too large (\"+\n              cookieLength + \" > 4096 bytes)!\");\n          }\n        }\n      }\n    } else {\n      if (rawDocument.cookie !== lastCookieString) {\n        lastCookieString = rawDocument.cookie;\n        cookieArray = lastCookieString.split(\"; \");\n        lastCookies = {};\n\n        for (i = 0; i < cookieArray.length; i++) {\n          cookie = cookieArray[i];\n          index = cookie.indexOf('=');\n          if (index > 0) { //ignore nameless cookies\n            var name = unescape(cookie.substring(0, index));\n            // the first value that is seen for a cookie is the most\n            // specific one.  values for the same cookie name that\n            // follow are for less specific paths.\n            if (lastCookies[name] === undefined) {\n              lastCookies[name] = unescape(cookie.substring(index + 1));\n            }\n          }\n        }\n      }\n      return lastCookies;\n    }\n  };\n\n\n  /**\n   * @name ng.$browser#defer\n   * @methodOf ng.$browser\n   * @param {function()} fn A function, who's execution should be defered.\n   * @param {number=} [delay=0] of milliseconds to defer the function execution.\n   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.\n   *\n   * @description\n   * Executes a fn asynchronously via `setTimeout(fn, delay)`.\n   *\n   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using\n   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed\n   * via `$browser.defer.flush()`.\n   *\n   */\n  self.defer = function(fn, delay) {\n    var timeoutId;\n    outstandingRequestCount++;\n    timeoutId = setTimeout(function() {\n      delete pendingDeferIds[timeoutId];\n      completeOutstandingRequest(fn);\n    }, delay || 0);\n    pendingDeferIds[timeoutId] = true;\n    return timeoutId;\n  };\n\n\n  /**\n   * @name ng.$browser#defer.cancel\n   * @methodOf ng.$browser.defer\n   *\n   * @description\n   * Cancels a defered task identified with `deferId`.\n   *\n   * @param {*} deferId Token returned by the `$browser.defer` function.\n   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully canceled.\n   */\n  self.defer.cancel = function(deferId) {\n    if (pendingDeferIds[deferId]) {\n      delete pendingDeferIds[deferId];\n      clearTimeout(deferId);\n      completeOutstandingRequest(noop);\n      return true;\n    }\n    return false;\n  };\n\n}\n\nfunction $BrowserProvider(){\n  this.$get = ['$window', '$log', '$sniffer', '$document',\n      function( $window,   $log,   $sniffer,   $document){\n        return new Browser($window, $document, $log, $sniffer);\n      }];\n}\n\n/**\n * @ngdoc object\n * @name ng.$cacheFactory\n *\n * @description\n * Factory that constructs cache objects.\n *\n *\n * @param {string} cacheId Name or id of the newly created cache.\n * @param {object=} options Options object that specifies the cache behavior. Properties:\n *\n *   - `{number=}` `capacity` — turns the cache into LRU cache.\n *\n * @returns {object} Newly created cache object with the following set of methods:\n *\n * - `{object}` `info()` — Returns id, size, and options of cache.\n * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns it.\n * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.\n * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.\n * - `{void}` `removeAll()` — Removes all cached values.\n * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.\n *\n */\nfunction $CacheFactoryProvider() {\n\n  this.$get = function() {\n    var caches = {};\n\n    function cacheFactory(cacheId, options) {\n      if (cacheId in caches) {\n        throw Error('cacheId ' + cacheId + ' taken');\n      }\n\n      var size = 0,\n          stats = extend({}, options, {id: cacheId}),\n          data = {},\n          capacity = (options && options.capacity) || Number.MAX_VALUE,\n          lruHash = {},\n          freshEnd = null,\n          staleEnd = null;\n\n      return caches[cacheId] = {\n\n        put: function(key, value) {\n          var lruEntry = lruHash[key] || (lruHash[key] = {key: key});\n\n          refresh(lruEntry);\n\n          if (isUndefined(value)) return;\n          if (!(key in data)) size++;\n          data[key] = value;\n\n          if (size > capacity) {\n            this.remove(staleEnd.key);\n          }\n\n          return value;\n        },\n\n\n        get: function(key) {\n          var lruEntry = lruHash[key];\n\n          if (!lruEntry) return;\n\n          refresh(lruEntry);\n\n          return data[key];\n        },\n\n\n        remove: function(key) {\n          var lruEntry = lruHash[key];\n\n          if (!lruEntry) return;\n\n          if (lruEntry == freshEnd) freshEnd = lruEntry.p;\n          if (lruEntry == staleEnd) staleEnd = lruEntry.n;\n          link(lruEntry.n,lruEntry.p);\n\n          delete lruHash[key];\n          delete data[key];\n          size--;\n        },\n\n\n        removeAll: function() {\n          data = {};\n          size = 0;\n          lruHash = {};\n          freshEnd = staleEnd = null;\n        },\n\n\n        destroy: function() {\n          data = null;\n          stats = null;\n          lruHash = null;\n          delete caches[cacheId];\n        },\n\n\n        info: function() {\n          return extend({}, stats, {size: size});\n        }\n      };\n\n\n      /**\n       * makes the `entry` the freshEnd of the LRU linked list\n       */\n      function refresh(entry) {\n        if (entry != freshEnd) {\n          if (!staleEnd) {\n            staleEnd = entry;\n          } else if (staleEnd == entry) {\n            staleEnd = entry.n;\n          }\n\n          link(entry.n, entry.p);\n          link(entry, freshEnd);\n          freshEnd = entry;\n          freshEnd.n = null;\n        }\n      }\n\n\n      /**\n       * bidirectionally links two entries of the LRU linked list\n       */\n      function link(nextEntry, prevEntry) {\n        if (nextEntry != prevEntry) {\n          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify\n          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify\n        }\n      }\n    }\n\n\n    cacheFactory.info = function() {\n      var info = {};\n      forEach(caches, function(cache, cacheId) {\n        info[cacheId] = cache.info();\n      });\n      return info;\n    };\n\n\n    cacheFactory.get = function(cacheId) {\n      return caches[cacheId];\n    };\n\n\n    return cacheFactory;\n  };\n}\n\n/**\n * @ngdoc object\n * @name ng.$templateCache\n *\n * @description\n * Cache used for storing html templates.\n *\n * See {@link ng.$cacheFactory $cacheFactory}.\n *\n */\nfunction $TemplateCacheProvider() {\n  this.$get = ['$cacheFactory', function($cacheFactory) {\n    return $cacheFactory('templates');\n  }];\n}\n\n/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!\n *\n * DOM-related variables:\n *\n * - \"node\" - DOM Node\n * - \"element\" - DOM Element or Node\n * - \"$node\" or \"$element\" - jqLite-wrapped node or element\n *\n *\n * Compiler related stuff:\n *\n * - \"linkFn\" - linking fn of a single directive\n * - \"nodeLinkFn\" - function that aggregates all linking fns for a particular node\n * - \"childLinkFn\" -  function that aggregates all linking fns for child nodes of a particular node\n * - \"compositeLinkFn\" - function that aggregates all linking fns for a compilation root (nodeList)\n */\n\n\nvar NON_ASSIGNABLE_MODEL_EXPRESSION = 'Non-assignable model expression: ';\n\n\n/**\n * @ngdoc function\n * @name ng.$compile\n * @function\n *\n * @description\n * Compiles a piece of HTML string or DOM into a template and produces a template function, which\n * can then be used to link {@link ng.$rootScope.Scope scope} and the template together.\n *\n * The compilation is a process of walking the DOM tree and trying to match DOM elements to\n * {@link ng.$compileProvider#directive directives}. For each match it\n * executes corresponding template function and collects the\n * instance functions into a single template function which is then returned.\n *\n * The template function can then be used once to produce the view or as it is the case with\n * {@link ng.directive:ngRepeat repeater} many-times, in which\n * case each call results in a view that is a DOM clone of the original template.\n *\n <doc:example module=\"compile\">\n   <doc:source>\n    <script>\n      // declare a new module, and inject the $compileProvider\n      angular.module('compile', [], function($compileProvider) {\n        // configure new 'compile' directive by passing a directive\n        // factory function. The factory function injects the '$compile'\n        $compileProvider.directive('compile', function($compile) {\n          // directive factory creates a link function\n          return function(scope, element, attrs) {\n            scope.$watch(\n              function(scope) {\n                 // watch the 'compile' expression for changes\n                return scope.$eval(attrs.compile);\n              },\n              function(value) {\n                // when the 'compile' expression changes\n                // assign it into the current DOM\n                element.html(value);\n\n                // compile the new DOM and link it to the current\n                // scope.\n                // NOTE: we only compile .childNodes so that\n                // we don't get into infinite loop compiling ourselves\n                $compile(element.contents())(scope);\n              }\n            );\n          };\n        })\n      });\n\n      function Ctrl($scope) {\n        $scope.name = 'Angular';\n        $scope.html = 'Hello {{name}}';\n      }\n    </script>\n    <div ng-controller=\"Ctrl\">\n      <input ng-model=\"name\"> <br>\n      <textarea ng-model=\"html\"></textarea> <br>\n      <div compile=\"html\"></div>\n    </div>\n   </doc:source>\n   <doc:scenario>\n     it('should auto compile', function() {\n       expect(element('div[compile]').text()).toBe('Hello Angular');\n       input('html').enter('{{name}}!');\n       expect(element('div[compile]').text()).toBe('Angular!');\n     });\n   </doc:scenario>\n </doc:example>\n\n *\n *\n * @param {string|DOMElement} element Element or HTML string to compile into a template function.\n * @param {function(angular.Scope[, cloneAttachFn]} transclude function available to directives.\n * @param {number} maxPriority only apply directives lower then given priority (Only effects the\n *                 root element(s), not their children)\n * @returns {function(scope[, cloneAttachFn])} a link function which is used to bind template\n * (a DOM element/tree) to a scope. Where:\n *\n *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.\n *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the\n *               `template` and call the `cloneAttachFn` function allowing the caller to attach the\n *               cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is\n *               called as: <br> `cloneAttachFn(clonedElement, scope)` where:\n *\n *      * `clonedElement` - is a clone of the original `element` passed into the compiler.\n *      * `scope` - is the current scope with which the linking function is working with.\n *\n * Calling the linking function returns the element of the template. It is either the original element\n * passed in, or the clone of the element if the `cloneAttachFn` is provided.\n *\n * After linking the view is not updated until after a call to $digest which typically is done by\n * Angular automatically.\n *\n * If you need access to the bound view, there are two ways to do it:\n *\n * - If you are not asking the linking function to clone the template, create the DOM element(s)\n *   before you send them to the compiler and keep this reference around.\n *   <pre>\n *     var element = $compile('<p>{{total}}</p>')(scope);\n *   </pre>\n *\n * - if on the other hand, you need the element to be cloned, the view reference from the original\n *   example would not point to the clone, but rather to the original template that was cloned. In\n *   this case, you can access the clone via the cloneAttachFn:\n *   <pre>\n *     var templateHTML = angular.element('<p>{{total}}</p>'),\n *         scope = ....;\n *\n *     var clonedElement = $compile(templateHTML)(scope, function(clonedElement, scope) {\n *       //attach the clone to DOM document at the right place\n *     });\n *\n *     //now we have reference to the cloned DOM via `clone`\n *   </pre>\n *\n *\n * For information on how the compiler works, see the\n * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.\n */\n\n\n/**\n * @ngdoc service\n * @name ng.$compileProvider\n * @function\n *\n * @description\n */\n$CompileProvider.$inject = ['$provide'];\nfunction $CompileProvider($provide) {\n  var hasDirectives = {},\n      Suffix = 'Directive',\n      COMMENT_DIRECTIVE_REGEXP = /^\\s*directive\\:\\s*([\\d\\w\\-_]+)\\s+(.*)$/,\n      CLASS_DIRECTIVE_REGEXP = /(([\\d\\w\\-_]+)(?:\\:([^;]+))?;?)/,\n      MULTI_ROOT_TEMPLATE_ERROR = 'Template must have exactly one root element. was: ',\n      urlSanitizationWhitelist = /^\\s*(https?|ftp|mailto|file):/;\n\n\n  /**\n   * @ngdoc function\n   * @name ng.$compileProvider#directive\n   * @methodOf ng.$compileProvider\n   * @function\n   *\n   * @description\n   * Register a new directives with the compiler.\n   *\n   * @param {string} name Name of the directive in camel-case. (ie <code>ngBind</code> which will match as\n   *                <code>ng-bind</code>).\n   * @param {function} directiveFactory An injectable directive factory function. See {@link guide/directive} for more\n   *                info.\n   * @returns {ng.$compileProvider} Self for chaining.\n   */\n   this.directive = function registerDirective(name, directiveFactory) {\n    if (isString(name)) {\n      assertArg(directiveFactory, 'directive');\n      if (!hasDirectives.hasOwnProperty(name)) {\n        hasDirectives[name] = [];\n        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',\n          function($injector, $exceptionHandler) {\n            var directives = [];\n            forEach(hasDirectives[name], function(directiveFactory) {\n              try {\n                var directive = $injector.invoke(directiveFactory);\n                if (isFunction(directive)) {\n                  directive = { compile: valueFn(directive) };\n                } else if (!directive.compile && directive.link) {\n                  directive.compile = valueFn(directive.link);\n                }\n                directive.priority = directive.priority || 0;\n                directive.name = directive.name || name;\n                directive.require = directive.require || (directive.controller && directive.name);\n                directive.restrict = directive.restrict || 'A';\n                directives.push(directive);\n              } catch (e) {\n                $exceptionHandler(e);\n              }\n            });\n            return directives;\n          }]);\n      }\n      hasDirectives[name].push(directiveFactory);\n    } else {\n      forEach(name, reverseParams(registerDirective));\n    }\n    return this;\n  };\n\n\n  /**\n   * @ngdoc function\n   * @name ng.$compileProvider#urlSanitizationWhitelist\n   * @methodOf ng.$compileProvider\n   * @function\n   *\n   * @description\n   * Retrieves or overrides the default regular expression that is used for whitelisting of safe\n   * urls during a[href] sanitization.\n   *\n   * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n   *\n   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into an\n   * absolute url. Afterwards the url is matched against the `urlSanitizationWhitelist` regular\n   * expression. If a match is found the original url is written into the dom. Otherwise the\n   * absolute url is prefixed with `'unsafe:'` string and only then it is written into the DOM.\n   *\n   * @param {RegExp=} regexp New regexp to whitelist urls with.\n   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for\n   *    chaining otherwise.\n   */\n  this.urlSanitizationWhitelist = function(regexp) {\n    if (isDefined(regexp)) {\n      urlSanitizationWhitelist = regexp;\n      return this;\n    }\n    return urlSanitizationWhitelist;\n  };\n\n\n  this.$get = [\n            '$injector', '$interpolate', '$exceptionHandler', '$http', '$templateCache', '$parse',\n            '$controller', '$rootScope', '$document',\n    function($injector,   $interpolate,   $exceptionHandler,   $http,   $templateCache,   $parse,\n             $controller,   $rootScope,   $document) {\n\n    var Attributes = function(element, attr) {\n      this.$$element = element;\n      this.$attr = attr || {};\n    };\n\n    Attributes.prototype = {\n      $normalize: directiveNormalize,\n\n\n      /**\n       * Set a normalized attribute on the element in a way such that all directives\n       * can share the attribute. This function properly handles boolean attributes.\n       * @param {string} key Normalized key. (ie ngAttribute)\n       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.\n       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.\n       *     Defaults to true.\n       * @param {string=} attrName Optional none normalized name. Defaults to key.\n       */\n      $set: function(key, value, writeAttr, attrName) {\n        var booleanKey = getBooleanAttrName(this.$$element[0], key),\n            $$observers = this.$$observers,\n            normalizedVal;\n\n        if (booleanKey) {\n          this.$$element.prop(key, value);\n          attrName = booleanKey;\n        }\n\n        this[key] = value;\n\n        // translate normalized key to actual key\n        if (attrName) {\n          this.$attr[key] = attrName;\n        } else {\n          attrName = this.$attr[key];\n          if (!attrName) {\n            this.$attr[key] = attrName = snake_case(key, '-');\n          }\n        }\n\n\n        // sanitize a[href] values\n        if (nodeName_(this.$$element[0]) === 'A' && key === 'href') {\n          urlSanitizationNode.setAttribute('href', value);\n\n          // href property always returns normalized absolute url, so we can match against that\n          normalizedVal = urlSanitizationNode.href;\n          if (!normalizedVal.match(urlSanitizationWhitelist)) {\n            this[key] = value = 'unsafe:' + normalizedVal;\n          }\n        }\n\n\n        if (writeAttr !== false) {\n          if (value === null || value === undefined) {\n            this.$$element.removeAttr(attrName);\n          } else {\n            this.$$element.attr(attrName, value);\n          }\n        }\n\n        // fire observers\n        $$observers && forEach($$observers[key], function(fn) {\n          try {\n            fn(value);\n          } catch (e) {\n            $exceptionHandler(e);\n          }\n        });\n      },\n\n\n      /**\n       * Observe an interpolated attribute.\n       * The observer will never be called, if given attribute is not interpolated.\n       *\n       * @param {string} key Normalized key. (ie ngAttribute) .\n       * @param {function(*)} fn Function that will be called whenever the attribute value changes.\n       * @returns {function(*)} the `fn` Function passed in.\n       */\n      $observe: function(key, fn) {\n        var attrs = this,\n            $$observers = (attrs.$$observers || (attrs.$$observers = {})),\n            listeners = ($$observers[key] || ($$observers[key] = []));\n\n        listeners.push(fn);\n        $rootScope.$evalAsync(function() {\n          if (!listeners.$$inter) {\n            // no one registered attribute interpolation function, so lets call it manually\n            fn(attrs[key]);\n          }\n        });\n        return fn;\n      }\n    };\n\n    var urlSanitizationNode = $document[0].createElement('a'),\n        startSymbol = $interpolate.startSymbol(),\n        endSymbol = $interpolate.endSymbol(),\n        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')\n            ? identity\n            : function denormalizeTemplate(template) {\n              return template.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);\n        },\n        NG_ATTR_BINDING = /^ngAttr[A-Z]/;\n\n\n    return compile;\n\n    //================================\n\n    function compile($compileNodes, transcludeFn, maxPriority) {\n      if (!($compileNodes instanceof jqLite)) {\n        // jquery always rewraps, whereas we need to preserve the original selector so that we can modify it.\n        $compileNodes = jqLite($compileNodes);\n      }\n      // We can not compile top level text elements since text nodes can be merged and we will\n      // not be able to attach scope data to them, so we will wrap them in <span>\n      forEach($compileNodes, function(node, index){\n        if (node.nodeType == 3 /* text node */ && node.nodeValue.match(/\\S+/) /* non-empty */ ) {\n          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];\n        }\n      });\n      var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority);\n      return function publicLinkFn(scope, cloneConnectFn){\n        assertArg(scope, 'scope');\n        // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart\n        // and sometimes changes the structure of the DOM.\n        var $linkNode = cloneConnectFn\n          ? JQLitePrototype.clone.call($compileNodes) // IMPORTANT!!!\n          : $compileNodes;\n\n        // Attach scope only to non-text nodes.\n        for(var i = 0, ii = $linkNode.length; i<ii; i++) {\n          var node = $linkNode[i];\n          if (node.nodeType == 1 /* element */ || node.nodeType == 9 /* document */) {\n            $linkNode.eq(i).data('$scope', scope);\n          }\n        }\n        safeAddClass($linkNode, 'ng-scope');\n        if (cloneConnectFn) cloneConnectFn($linkNode, scope);\n        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode);\n        return $linkNode;\n      };\n    }\n\n    function wrongMode(localName, mode) {\n      throw Error(\"Unsupported '\" + mode + \"' for '\" + localName + \"'.\");\n    }\n\n    function safeAddClass($element, className) {\n      try {\n        $element.addClass(className);\n      } catch(e) {\n        // ignore, since it means that we are trying to set class on\n        // SVG element, where class name is read-only.\n      }\n    }\n\n    /**\n     * Compile function matches each node in nodeList against the directives. Once all directives\n     * for a particular node are collected their compile functions are executed. The compile\n     * functions return values - the linking functions - are combined into a composite linking\n     * function, which is the a linking function for the node.\n     *\n     * @param {NodeList} nodeList an array of nodes or NodeList to compile\n     * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the\n     *        scope argument is auto-generated to the new child of the transcluded parent scope.\n     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then the\n     *        rootElement must be set the jqLite collection of the compile root. This is\n     *        needed so that the jqLite collection items can be replaced with widgets.\n     * @param {number=} max directive priority\n     * @returns {?function} A composite linking function of all of the matched directives or null.\n     */\n    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority) {\n      var linkFns = [],\n          nodeLinkFn, childLinkFn, directives, attrs, linkFnFound;\n\n      for(var i = 0; i < nodeList.length; i++) {\n        attrs = new Attributes();\n\n        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.\n        directives = collectDirectives(nodeList[i], [], attrs, maxPriority);\n\n        nodeLinkFn = (directives.length)\n            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement)\n            : null;\n\n        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal || !nodeList[i].childNodes || !nodeList[i].childNodes.length)\n            ? null\n            : compileNodes(nodeList[i].childNodes,\n                 nodeLinkFn ? nodeLinkFn.transclude : transcludeFn);\n\n        linkFns.push(nodeLinkFn);\n        linkFns.push(childLinkFn);\n        linkFnFound = (linkFnFound || nodeLinkFn || childLinkFn);\n      }\n\n      // return a linking function if we have found anything, null otherwise\n      return linkFnFound ? compositeLinkFn : null;\n\n      function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {\n        var nodeLinkFn, childLinkFn, node, childScope, childTranscludeFn, i, ii, n;\n\n        // copy nodeList so that linking doesn't break due to live list updates.\n        var stableNodeList = [];\n        for (i = 0, ii = nodeList.length; i < ii; i++) {\n          stableNodeList.push(nodeList[i]);\n        }\n\n        for(i = 0, n = 0, ii = linkFns.length; i < ii; n++) {\n          node = stableNodeList[n];\n          nodeLinkFn = linkFns[i++];\n          childLinkFn = linkFns[i++];\n\n          if (nodeLinkFn) {\n            if (nodeLinkFn.scope) {\n              childScope = scope.$new(isObject(nodeLinkFn.scope));\n              jqLite(node).data('$scope', childScope);\n            } else {\n              childScope = scope;\n            }\n            childTranscludeFn = nodeLinkFn.transclude;\n            if (childTranscludeFn || (!boundTranscludeFn && transcludeFn)) {\n              nodeLinkFn(childLinkFn, childScope, node, $rootElement,\n                  (function(transcludeFn) {\n                    return function(cloneFn) {\n                      var transcludeScope = scope.$new();\n                      transcludeScope.$$transcluded = true;\n\n                      return transcludeFn(transcludeScope, cloneFn).\n                          bind('$destroy', bind(transcludeScope, transcludeScope.$destroy));\n                    };\n                  })(childTranscludeFn || transcludeFn)\n              );\n            } else {\n              nodeLinkFn(childLinkFn, childScope, node, undefined, boundTranscludeFn);\n            }\n          } else if (childLinkFn) {\n            childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);\n          }\n        }\n      }\n    }\n\n\n    /**\n     * Looks for directives on the given node and adds them to the directive collection which is\n     * sorted.\n     *\n     * @param node Node to search.\n     * @param directives An array to which the directives are added to. This array is sorted before\n     *        the function returns.\n     * @param attrs The shared attrs object which is used to populate the normalized attributes.\n     * @param {number=} maxPriority Max directive priority.\n     */\n    function collectDirectives(node, directives, attrs, maxPriority) {\n      var nodeType = node.nodeType,\n          attrsMap = attrs.$attr,\n          match,\n          className;\n\n      switch(nodeType) {\n        case 1: /* Element */\n          // use the node name: <directive>\n          addDirective(directives,\n              directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority);\n\n          // iterate over the attributes\n          for (var attr, name, nName, ngAttrName, value, nAttrs = node.attributes,\n                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {\n            attr = nAttrs[j];\n            if (attr.specified) {\n              name = attr.name;\n              // support ngAttr attribute binding\n              ngAttrName = directiveNormalize(name);\n              if (NG_ATTR_BINDING.test(ngAttrName)) {\n                name = ngAttrName.substr(6).toLowerCase();\n              }\n              nName = directiveNormalize(name.toLowerCase());\n              attrsMap[nName] = name;\n              attrs[nName] = value = trim((msie && name == 'href')\n                ? decodeURIComponent(node.getAttribute(name, 2))\n                : attr.value);\n              if (getBooleanAttrName(node, nName)) {\n                attrs[nName] = true; // presence means true\n              }\n              addAttrInterpolateDirective(node, directives, value, nName);\n              addDirective(directives, nName, 'A', maxPriority);\n            }\n          }\n\n          // use class as directive\n          className = node.className;\n          if (isString(className) && className !== '') {\n            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {\n              nName = directiveNormalize(match[2]);\n              if (addDirective(directives, nName, 'C', maxPriority)) {\n                attrs[nName] = trim(match[3]);\n              }\n              className = className.substr(match.index + match[0].length);\n            }\n          }\n          break;\n        case 3: /* Text Node */\n          addTextInterpolateDirective(directives, node.nodeValue);\n          break;\n        case 8: /* Comment */\n          try {\n            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);\n            if (match) {\n              nName = directiveNormalize(match[1]);\n              if (addDirective(directives, nName, 'M', maxPriority)) {\n                attrs[nName] = trim(match[2]);\n              }\n            }\n          } catch (e) {\n            // turns out that under some circumstances IE9 throws errors when one attempts to read comment's node value.\n            // Just ignore it and continue. (Can't seem to reproduce in test case.)\n          }\n          break;\n      }\n\n      directives.sort(byPriority);\n      return directives;\n    }\n\n\n    /**\n     * Once the directives have been collected, their compile functions are executed. This method\n     * is responsible for inlining directive templates as well as terminating the application\n     * of the directives if the terminal directive has been reached.\n     *\n     * @param {Array} directives Array of collected directives to execute their compile function.\n     *        this needs to be pre-sorted by priority order.\n     * @param {Node} compileNode The raw DOM node to apply the compile functions to\n     * @param {Object} templateAttrs The shared attribute function\n     * @param {function(angular.Scope[, cloneAttachFn]} transcludeFn A linking function, where the\n     *        scope argument is auto-generated to the new child of the transcluded parent scope.\n     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this\n     *        argument has the root jqLite array so that we can replace nodes on it.\n     * @returns linkFn\n     */\n    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection) {\n      var terminalPriority = -Number.MAX_VALUE,\n          preLinkFns = [],\n          postLinkFns = [],\n          newScopeDirective = null,\n          newIsolateScopeDirective = null,\n          templateDirective = null,\n          $compileNode = templateAttrs.$$element = jqLite(compileNode),\n          directive,\n          directiveName,\n          $template,\n          transcludeDirective,\n          childTranscludeFn = transcludeFn,\n          controllerDirectives,\n          linkFn,\n          directiveValue;\n\n      // executes all directives on the current element\n      for(var i = 0, ii = directives.length; i < ii; i++) {\n        directive = directives[i];\n        $template = undefined;\n\n        if (terminalPriority > directive.priority) {\n          break; // prevent further processing of directives\n        }\n\n        if (directiveValue = directive.scope) {\n          assertNoDuplicate('isolated scope', newIsolateScopeDirective, directive, $compileNode);\n          if (isObject(directiveValue)) {\n            safeAddClass($compileNode, 'ng-isolate-scope');\n            newIsolateScopeDirective = directive;\n          }\n          safeAddClass($compileNode, 'ng-scope');\n          newScopeDirective = newScopeDirective || directive;\n        }\n\n        directiveName = directive.name;\n\n        if (directiveValue = directive.controller) {\n          controllerDirectives = controllerDirectives || {};\n          assertNoDuplicate(\"'\" + directiveName + \"' controller\",\n              controllerDirectives[directiveName], directive, $compileNode);\n          controllerDirectives[directiveName] = directive;\n        }\n\n        if (directiveValue = directive.transclude) {\n          assertNoDuplicate('transclusion', transcludeDirective, directive, $compileNode);\n          transcludeDirective = directive;\n          terminalPriority = directive.priority;\n          if (directiveValue == 'element') {\n            $template = jqLite(compileNode);\n            $compileNode = templateAttrs.$$element =\n                jqLite(document.createComment(' ' + directiveName + ': ' + templateAttrs[directiveName] + ' '));\n            compileNode = $compileNode[0];\n            replaceWith(jqCollection, jqLite($template[0]), compileNode);\n            childTranscludeFn = compile($template, transcludeFn, terminalPriority);\n          } else {\n            $template = jqLite(JQLiteClone(compileNode)).contents();\n            $compileNode.html(''); // clear contents\n            childTranscludeFn = compile($template, transcludeFn);\n          }\n        }\n\n        if (directive.template) {\n          assertNoDuplicate('template', templateDirective, directive, $compileNode);\n          templateDirective = directive;\n\n          directiveValue = (isFunction(directive.template))\n              ? directive.template($compileNode, templateAttrs)\n              : directive.template;\n\n          directiveValue = denormalizeTemplate(directiveValue);\n\n          if (directive.replace) {\n            $template = jqLite('<div>' +\n                                 trim(directiveValue) +\n                               '</div>').contents();\n            compileNode = $template[0];\n\n            if ($template.length != 1 || compileNode.nodeType !== 1) {\n              throw new Error(MULTI_ROOT_TEMPLATE_ERROR + directiveValue);\n            }\n\n            replaceWith(jqCollection, $compileNode, compileNode);\n\n            var newTemplateAttrs = {$attr: {}};\n\n            // combine directives from the original node and from the template:\n            // - take the array of directives for this element\n            // - split it into two parts, those that were already applied and those that weren't\n            // - collect directives from the template, add them to the second group and sort them\n            // - append the second group with new directives to the first group\n            directives = directives.concat(\n                collectDirectives(\n                    compileNode,\n                    directives.splice(i + 1, directives.length - (i + 1)),\n                    newTemplateAttrs\n                )\n            );\n            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);\n\n            ii = directives.length;\n          } else {\n            $compileNode.html(directiveValue);\n          }\n        }\n\n        if (directive.templateUrl) {\n          assertNoDuplicate('template', templateDirective, directive, $compileNode);\n          templateDirective = directive;\n          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i),\n              nodeLinkFn, $compileNode, templateAttrs, jqCollection, directive.replace,\n              childTranscludeFn);\n          ii = directives.length;\n        } else if (directive.compile) {\n          try {\n            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);\n            if (isFunction(linkFn)) {\n              addLinkFns(null, linkFn);\n            } else if (linkFn) {\n              addLinkFns(linkFn.pre, linkFn.post);\n            }\n          } catch (e) {\n            $exceptionHandler(e, startingTag($compileNode));\n          }\n        }\n\n        if (directive.terminal) {\n          nodeLinkFn.terminal = true;\n          terminalPriority = Math.max(terminalPriority, directive.priority);\n        }\n\n      }\n\n      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope;\n      nodeLinkFn.transclude = transcludeDirective && childTranscludeFn;\n\n      // might be normal or delayed nodeLinkFn depending on if templateUrl is present\n      return nodeLinkFn;\n\n      ////////////////////\n\n      function addLinkFns(pre, post) {\n        if (pre) {\n          pre.require = directive.require;\n          preLinkFns.push(pre);\n        }\n        if (post) {\n          post.require = directive.require;\n          postLinkFns.push(post);\n        }\n      }\n\n\n      function getControllers(require, $element) {\n        var value, retrievalMethod = 'data', optional = false;\n        if (isString(require)) {\n          while((value = require.charAt(0)) == '^' || value == '?') {\n            require = require.substr(1);\n            if (value == '^') {\n              retrievalMethod = 'inheritedData';\n            }\n            optional = optional || value == '?';\n          }\n          value = $element[retrievalMethod]('$' + require + 'Controller');\n          if (!value && !optional) {\n            throw Error(\"No controller: \" + require);\n          }\n          return value;\n        } else if (isArray(require)) {\n          value = [];\n          forEach(require, function(require) {\n            value.push(getControllers(require, $element));\n          });\n        }\n        return value;\n      }\n\n\n      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {\n        var attrs, $element, i, ii, linkFn, controller;\n\n        if (compileNode === linkNode) {\n          attrs = templateAttrs;\n        } else {\n          attrs = shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));\n        }\n        $element = attrs.$$element;\n\n        if (newIsolateScopeDirective) {\n          var LOCAL_REGEXP = /^\\s*([@=&])(\\??)\\s*(\\w*)\\s*$/;\n\n          var parentScope = scope.$parent || scope;\n\n          forEach(newIsolateScopeDirective.scope, function(definiton, scopeName) {\n            var match = definiton.match(LOCAL_REGEXP) || [],\n                attrName = match[3] || scopeName,\n                optional = (match[2] == '?'),\n                mode = match[1], // @, =, or &\n                lastValue,\n                parentGet, parentSet;\n\n            scope.$$isolateBindings[scopeName] = mode + attrName;\n\n            switch (mode) {\n\n              case '@': {\n                attrs.$observe(attrName, function(value) {\n                  scope[scopeName] = value;\n                });\n                attrs.$$observers[attrName].$$scope = parentScope;\n                if( attrs[attrName] ) {\n                  // If the attribute has been provided then we trigger an interpolation to ensure the value is there for use in the link fn\n                  scope[scopeName] = $interpolate(attrs[attrName])(parentScope);\n                }\n                break;\n              }\n\n              case '=': {\n                if (optional && !attrs[attrName]) {\n                  return;\n                }\n                parentGet = $parse(attrs[attrName]);\n                parentSet = parentGet.assign || function() {\n                  // reset the change, or we will throw this exception on every $digest\n                  lastValue = scope[scopeName] = parentGet(parentScope);\n                  throw Error(NON_ASSIGNABLE_MODEL_EXPRESSION + attrs[attrName] +\n                      ' (directive: ' + newIsolateScopeDirective.name + ')');\n                };\n                lastValue = scope[scopeName] = parentGet(parentScope);\n                scope.$watch(function parentValueWatch() {\n                  var parentValue = parentGet(parentScope);\n\n                  if (parentValue !== scope[scopeName]) {\n                    // we are out of sync and need to copy\n                    if (parentValue !== lastValue) {\n                      // parent changed and it has precedence\n                      lastValue = scope[scopeName] = parentValue;\n                    } else {\n                      // if the parent can be assigned then do so\n                      parentSet(parentScope, parentValue = lastValue = scope[scopeName]);\n                    }\n                  }\n                  return parentValue;\n                });\n                break;\n              }\n\n              case '&': {\n                parentGet = $parse(attrs[attrName]);\n                scope[scopeName] = function(locals) {\n                  return parentGet(parentScope, locals);\n                };\n                break;\n              }\n\n              default: {\n                throw Error('Invalid isolate scope definition for directive ' +\n                    newIsolateScopeDirective.name + ': ' + definiton);\n              }\n            }\n          });\n        }\n\n        if (controllerDirectives) {\n          forEach(controllerDirectives, function(directive) {\n            var locals = {\n              $scope: scope,\n              $element: $element,\n              $attrs: attrs,\n              $transclude: boundTranscludeFn\n            };\n\n            controller = directive.controller;\n            if (controller == '@') {\n              controller = attrs[directive.name];\n            }\n\n            $element.data(\n                '$' + directive.name + 'Controller',\n                $controller(controller, locals));\n          });\n        }\n\n        // PRELINKING\n        for(i = 0, ii = preLinkFns.length; i < ii; i++) {\n          try {\n            linkFn = preLinkFns[i];\n            linkFn(scope, $element, attrs,\n                linkFn.require && getControllers(linkFn.require, $element));\n          } catch (e) {\n            $exceptionHandler(e, startingTag($element));\n          }\n        }\n\n        // RECURSION\n        childLinkFn && childLinkFn(scope, linkNode.childNodes, undefined, boundTranscludeFn);\n\n        // POSTLINKING\n        for(i = 0, ii = postLinkFns.length; i < ii; i++) {\n          try {\n            linkFn = postLinkFns[i];\n            linkFn(scope, $element, attrs,\n                linkFn.require && getControllers(linkFn.require, $element));\n          } catch (e) {\n            $exceptionHandler(e, startingTag($element));\n          }\n        }\n      }\n    }\n\n\n    /**\n     * looks up the directive and decorates it with exception handling and proper parameters. We\n     * call this the boundDirective.\n     *\n     * @param {string} name name of the directive to look up.\n     * @param {string} location The directive must be found in specific format.\n     *   String containing any of theses characters:\n     *\n     *   * `E`: element name\n     *   * `A': attribute\n     *   * `C`: class\n     *   * `M`: comment\n     * @returns true if directive was added.\n     */\n    function addDirective(tDirectives, name, location, maxPriority) {\n      var match = false;\n      if (hasDirectives.hasOwnProperty(name)) {\n        for(var directive, directives = $injector.get(name + Suffix),\n            i = 0, ii = directives.length; i<ii; i++) {\n          try {\n            directive = directives[i];\n            if ( (maxPriority === undefined || maxPriority > directive.priority) &&\n                 directive.restrict.indexOf(location) != -1) {\n              tDirectives.push(directive);\n              match = true;\n            }\n          } catch(e) { $exceptionHandler(e); }\n        }\n      }\n      return match;\n    }\n\n\n    /**\n     * When the element is replaced with HTML template then the new attributes\n     * on the template need to be merged with the existing attributes in the DOM.\n     * The desired effect is to have both of the attributes present.\n     *\n     * @param {object} dst destination attributes (original DOM)\n     * @param {object} src source attributes (from the directive template)\n     */\n    function mergeTemplateAttributes(dst, src) {\n      var srcAttr = src.$attr,\n          dstAttr = dst.$attr,\n          $element = dst.$$element;\n\n      // reapply the old attributes to the new element\n      forEach(dst, function(value, key) {\n        if (key.charAt(0) != '$') {\n          if (src[key]) {\n            value += (key === 'style' ? ';' : ' ') + src[key];\n          }\n          dst.$set(key, value, true, srcAttr[key]);\n        }\n      });\n\n      // copy the new attributes on the old attrs object\n      forEach(src, function(value, key) {\n        if (key == 'class') {\n          safeAddClass($element, value);\n          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;\n        } else if (key == 'style') {\n          $element.attr('style', $element.attr('style') + ';' + value);\n        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {\n          dst[key] = value;\n          dstAttr[key] = srcAttr[key];\n        }\n      });\n    }\n\n\n    function compileTemplateUrl(directives, beforeTemplateNodeLinkFn, $compileNode, tAttrs,\n        $rootElement, replace, childTranscludeFn) {\n      var linkQueue = [],\n          afterTemplateNodeLinkFn,\n          afterTemplateChildLinkFn,\n          beforeTemplateCompileNode = $compileNode[0],\n          origAsyncDirective = directives.shift(),\n          // The fact that we have to copy and patch the directive seems wrong!\n          derivedSyncDirective = extend({}, origAsyncDirective, {\n            controller: null, templateUrl: null, transclude: null, scope: null\n          }),\n          templateUrl = (isFunction(origAsyncDirective.templateUrl))\n              ? origAsyncDirective.templateUrl($compileNode, tAttrs)\n              : origAsyncDirective.templateUrl;\n\n      $compileNode.html('');\n\n      $http.get(templateUrl, {cache: $templateCache}).\n        success(function(content) {\n          var compileNode, tempTemplateAttrs, $template;\n\n          content = denormalizeTemplate(content);\n\n          if (replace) {\n            $template = jqLite('<div>' + trim(content) + '</div>').contents();\n            compileNode = $template[0];\n\n            if ($template.length != 1 || compileNode.nodeType !== 1) {\n              throw new Error(MULTI_ROOT_TEMPLATE_ERROR + content);\n            }\n\n            tempTemplateAttrs = {$attr: {}};\n            replaceWith($rootElement, $compileNode, compileNode);\n            collectDirectives(compileNode, directives, tempTemplateAttrs);\n            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);\n          } else {\n            compileNode = beforeTemplateCompileNode;\n            $compileNode.html(content);\n          }\n\n          directives.unshift(derivedSyncDirective);\n          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn);\n          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);\n\n\n          while(linkQueue.length) {\n            var scope = linkQueue.shift(),\n                beforeTemplateLinkNode = linkQueue.shift(),\n                linkRootElement = linkQueue.shift(),\n                controller = linkQueue.shift(),\n                linkNode = compileNode;\n\n            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {\n              // it was cloned therefore we have to clone as well.\n              linkNode = JQLiteClone(compileNode);\n              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);\n            }\n\n            afterTemplateNodeLinkFn(function() {\n              beforeTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, controller);\n            }, scope, linkNode, $rootElement, controller);\n          }\n          linkQueue = null;\n        }).\n        error(function(response, code, headers, config) {\n          throw Error('Failed to load template: ' + config.url);\n        });\n\n      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, controller) {\n        if (linkQueue) {\n          linkQueue.push(scope);\n          linkQueue.push(node);\n          linkQueue.push(rootElement);\n          linkQueue.push(controller);\n        } else {\n          afterTemplateNodeLinkFn(function() {\n            beforeTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, controller);\n          }, scope, node, rootElement, controller);\n        }\n      };\n    }\n\n\n    /**\n     * Sorting function for bound directives.\n     */\n    function byPriority(a, b) {\n      return b.priority - a.priority;\n    }\n\n\n    function assertNoDuplicate(what, previousDirective, directive, element) {\n      if (previousDirective) {\n        throw Error('Multiple directives [' + previousDirective.name + ', ' +\n          directive.name + '] asking for ' + what + ' on: ' +  startingTag(element));\n      }\n    }\n\n\n    function addTextInterpolateDirective(directives, text) {\n      var interpolateFn = $interpolate(text, true);\n      if (interpolateFn) {\n        directives.push({\n          priority: 0,\n          compile: valueFn(function textInterpolateLinkFn(scope, node) {\n            var parent = node.parent(),\n                bindings = parent.data('$binding') || [];\n            bindings.push(interpolateFn);\n            safeAddClass(parent.data('$binding', bindings), 'ng-binding');\n            scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {\n              node[0].nodeValue = value;\n            });\n          })\n        });\n      }\n    }\n\n\n    function addAttrInterpolateDirective(node, directives, value, name) {\n      var interpolateFn = $interpolate(value, true);\n\n      // no interpolation found -> ignore\n      if (!interpolateFn) return;\n\n\n      directives.push({\n        priority: 100,\n        compile: valueFn(function attrInterpolateLinkFn(scope, element, attr) {\n          var $$observers = (attr.$$observers || (attr.$$observers = {}));\n\n          // we need to interpolate again, in case the attribute value has been updated\n          // (e.g. by another directive's compile function)\n          interpolateFn = $interpolate(attr[name], true);\n\n          // if attribute was updated so that there is no interpolation going on we don't want to\n          // register any observers\n          if (!interpolateFn) return;\n\n          attr[name] = interpolateFn(scope);\n          ($$observers[name] || ($$observers[name] = [])).$$inter = true;\n          (attr.$$observers && attr.$$observers[name].$$scope || scope).\n            $watch(interpolateFn, function interpolateFnWatchAction(value) {\n              attr.$set(name, value);\n            });\n        })\n      });\n    }\n\n\n    /**\n     * This is a special jqLite.replaceWith, which can replace items which\n     * have no parents, provided that the containing jqLite collection is provided.\n     *\n     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes\n     *    in the root of the tree.\n     * @param {JqLite} $element The jqLite element which we are going to replace. We keep the shell,\n     *    but replace its DOM node reference.\n     * @param {Node} newNode The new DOM node.\n     */\n    function replaceWith($rootElement, $element, newNode) {\n      var oldNode = $element[0],\n          parent = oldNode.parentNode,\n          i, ii;\n\n      if ($rootElement) {\n        for(i = 0, ii = $rootElement.length; i < ii; i++) {\n          if ($rootElement[i] == oldNode) {\n            $rootElement[i] = newNode;\n            break;\n          }\n        }\n      }\n\n      if (parent) {\n        parent.replaceChild(newNode, oldNode);\n      }\n\n      newNode[jqLite.expando] = oldNode[jqLite.expando];\n      $element[0] = newNode;\n    }\n  }];\n}\n\nvar PREFIX_REGEXP = /^(x[\\:\\-_]|data[\\:\\-_])/i;\n/**\n * Converts all accepted directives format into proper directive name.\n * All of these will become 'myDirective':\n *   my:DiRective\n *   my-directive\n *   x-my-directive\n *   data-my:directive\n *\n * Also there is special case for Moz prefix starting with upper case letter.\n * @param name Name to normalize\n */\nfunction directiveNormalize(name) {\n  return camelCase(name.replace(PREFIX_REGEXP, ''));\n}\n\n/**\n * @ngdoc object\n * @name ng.$compile.directive.Attributes\n * @description\n *\n * A shared object between directive compile / linking functions which contains normalized DOM element\n * attributes. The the values reflect current binding state `{{ }}`. The normalization is needed\n * since all of these are treated as equivalent in Angular:\n *\n *          <span ng:bind=\"a\" ng-bind=\"a\" data-ng-bind=\"a\" x-ng-bind=\"a\">\n */\n\n/**\n * @ngdoc property\n * @name ng.$compile.directive.Attributes#$attr\n * @propertyOf ng.$compile.directive.Attributes\n * @returns {object} A map of DOM element attribute names to the normalized name. This is\n *          needed to do reverse lookup from normalized name back to actual name.\n */\n\n\n/**\n * @ngdoc function\n * @name ng.$compile.directive.Attributes#$set\n * @methodOf ng.$compile.directive.Attributes\n * @function\n *\n * @description\n * Set DOM element attribute value.\n *\n *\n * @param {string} name Normalized element attribute name of the property to modify. The name is\n *          revers translated using the {@link ng.$compile.directive.Attributes#$attr $attr}\n *          property to the original name.\n * @param {string} value Value to set the attribute to. The value can be an interpolated string.\n */\n\n\n\n/**\n * Closure compiler type information\n */\n\nfunction nodesetLinkingFn(\n  /* angular.Scope */ scope,\n  /* NodeList */ nodeList,\n  /* Element */ rootElement,\n  /* function(Function) */ boundTranscludeFn\n){}\n\nfunction directiveLinkingFn(\n  /* nodesetLinkingFn */ nodesetLinkingFn,\n  /* angular.Scope */ scope,\n  /* Node */ node,\n  /* Element */ rootElement,\n  /* function(Function) */ boundTranscludeFn\n){}\n\n/**\n * @ngdoc object\n * @name ng.$controllerProvider\n * @description\n * The {@link ng.$controller $controller service} is used by Angular to create new\n * controllers.\n *\n * This provider allows controller registration via the\n * {@link ng.$controllerProvider#register register} method.\n */\nfunction $ControllerProvider() {\n  var controllers = {},\n      CNTRL_REG = /^(\\S+)(\\s+as\\s+(\\w+))?$/;\n\n\n  /**\n   * @ngdoc function\n   * @name ng.$controllerProvider#register\n   * @methodOf ng.$controllerProvider\n   * @param {string} name Controller name\n   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI\n   *    annotations in the array notation).\n   */\n  this.register = function(name, constructor) {\n    if (isObject(name)) {\n      extend(controllers, name)\n    } else {\n      controllers[name] = constructor;\n    }\n  };\n\n\n  this.$get = ['$injector', '$window', function($injector, $window) {\n\n    /**\n     * @ngdoc function\n     * @name ng.$controller\n     * @requires $injector\n     *\n     * @param {Function|string} constructor If called with a function then it's considered to be the\n     *    controller constructor function. Otherwise it's considered to be a string which is used\n     *    to retrieve the controller constructor using the following steps:\n     *\n     *    * check if a controller with given name is registered via `$controllerProvider`\n     *    * check if evaluating the string on the current scope returns a constructor\n     *    * check `window[constructor]` on the global `window` object\n     *\n     * @param {Object} locals Injection locals for Controller.\n     * @return {Object} Instance of given controller.\n     *\n     * @description\n     * `$controller` service is responsible for instantiating controllers.\n     *\n     * It's just a simple call to {@link AUTO.$injector $injector}, but extracted into\n     * a service, so that one can override this service with {@link https://gist.github.com/1649788\n     * BC version}.\n     */\n    return function(expression, locals) {\n      var instance, match, constructor, identifier;\n\n      if(isString(expression)) {\n        match = expression.match(CNTRL_REG),\n        constructor = match[1],\n        identifier = match[3];\n        expression = controllers.hasOwnProperty(constructor)\n            ? controllers[constructor]\n            : getter(locals.$scope, constructor, true) || getter($window, constructor, true);\n\n        assertArgFn(expression, constructor, true);\n      }\n\n      instance = $injector.instantiate(expression, locals);\n\n      if (identifier) {\n        if (typeof locals.$scope !== 'object') {\n          throw new Error('Can not export controller as \"' + identifier + '\". ' +\n              'No scope object provided!');\n        }\n\n        locals.$scope[identifier] = instance;\n      }\n\n      return instance;\n    };\n  }];\n}\n\n/**\n * @ngdoc object\n * @name ng.$document\n * @requires $window\n *\n * @description\n * A {@link angular.element jQuery (lite)}-wrapped reference to the browser's `window.document`\n * element.\n */\nfunction $DocumentProvider(){\n  this.$get = ['$window', function(window){\n    return jqLite(window.document);\n  }];\n}\n\n/**\n * @ngdoc function\n * @name ng.$exceptionHandler\n * @requires $log\n *\n * @description\n * Any uncaught exception in angular expressions is delegated to this service.\n * The default implementation simply delegates to `$log.error` which logs it into\n * the browser console.\n *\n * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by\n * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.\n *\n * @param {Error} exception Exception associated with the error.\n * @param {string=} cause optional information about the context in which\n *       the error was thrown.\n *\n */\nfunction $ExceptionHandlerProvider() {\n  this.$get = ['$log', function($log) {\n    return function(exception, cause) {\n      $log.error.apply($log, arguments);\n    };\n  }];\n}\n\n/**\n * @ngdoc object\n * @name ng.$interpolateProvider\n * @function\n *\n * @description\n *\n * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.\n */\nfunction $InterpolateProvider() {\n  var startSymbol = '{{';\n  var endSymbol = '}}';\n\n  /**\n   * @ngdoc method\n   * @name ng.$interpolateProvider#startSymbol\n   * @methodOf ng.$interpolateProvider\n   * @description\n   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.\n   *\n   * @param {string=} value new value to set the starting symbol to.\n   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.\n   */\n  this.startSymbol = function(value){\n    if (value) {\n      startSymbol = value;\n      return this;\n    } else {\n      return startSymbol;\n    }\n  };\n\n  /**\n   * @ngdoc method\n   * @name ng.$interpolateProvider#endSymbol\n   * @methodOf ng.$interpolateProvider\n   * @description\n   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n   *\n   * @param {string=} value new value to set the ending symbol to.\n   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.\n   */\n  this.endSymbol = function(value){\n    if (value) {\n      endSymbol = value;\n      return this;\n    } else {\n      return endSymbol;\n    }\n  };\n\n\n  this.$get = ['$parse', '$exceptionHandler', function($parse, $exceptionHandler) {\n    var startSymbolLength = startSymbol.length,\n        endSymbolLength = endSymbol.length;\n\n    /**\n     * @ngdoc function\n     * @name ng.$interpolate\n     * @function\n     *\n     * @requires $parse\n     *\n     * @description\n     *\n     * Compiles a string with markup into an interpolation function. This service is used by the\n     * HTML {@link ng.$compile $compile} service for data binding. See\n     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the\n     * interpolation markup.\n     *\n     *\n       <pre>\n         var $interpolate = ...; // injected\n         var exp = $interpolate('Hello {{name}}!');\n         expect(exp({name:'Angular'}).toEqual('Hello Angular!');\n       </pre>\n     *\n     *\n     * @param {string} text The text with markup to interpolate.\n     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have\n     *    embedded expression in order to return an interpolation function. Strings with no\n     *    embedded expression will return null for the interpolation function.\n     * @returns {function(context)} an interpolation function which is used to compute the interpolated\n     *    string. The function has these parameters:\n     *\n     *    * `context`: an object against which any expressions embedded in the strings are evaluated\n     *      against.\n     *\n     */\n    function $interpolate(text, mustHaveExpression) {\n      var startIndex,\n          endIndex,\n          index = 0,\n          parts = [],\n          length = text.length,\n          hasInterpolation = false,\n          fn,\n          exp,\n          concat = [];\n\n      while(index < length) {\n        if ( ((startIndex = text.indexOf(startSymbol, index)) != -1) &&\n             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) ) {\n          (index != startIndex) && parts.push(text.substring(index, startIndex));\n          parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));\n          fn.exp = exp;\n          index = endIndex + endSymbolLength;\n          hasInterpolation = true;\n        } else {\n          // we did not find anything, so we have to add the remainder to the parts array\n          (index != length) && parts.push(text.substring(index));\n          index = length;\n        }\n      }\n\n      if (!(length = parts.length)) {\n        // we added, nothing, must have been an empty string.\n        parts.push('');\n        length = 1;\n      }\n\n      if (!mustHaveExpression  || hasInterpolation) {\n        concat.length = length;\n        fn = function(context) {\n          try {\n            for(var i = 0, ii = length, part; i<ii; i++) {\n              if (typeof (part = parts[i]) == 'function') {\n                part = part(context);\n                if (part == null || part == undefined) {\n                  part = '';\n                } else if (typeof part != 'string') {\n                  part = toJson(part);\n                }\n              }\n              concat[i] = part;\n            }\n            return concat.join('');\n          }\n          catch(err) {\n            var newErr = new Error('Error while interpolating: ' + text + '\\n' + err.toString());\n            $exceptionHandler(newErr);\n          }\n        };\n        fn.exp = text;\n        fn.parts = parts;\n        return fn;\n      }\n    }\n\n\n    /**\n     * @ngdoc method\n     * @name ng.$interpolate#startSymbol\n     * @methodOf ng.$interpolate\n     * @description\n     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n     *\n     * Use {@link ng.$interpolateProvider#startSymbol $interpolateProvider#startSymbol} to change\n     * the symbol.\n     *\n     * @returns {string} start symbol.\n     */\n    $interpolate.startSymbol = function() {\n      return startSymbol;\n    }\n\n\n    /**\n     * @ngdoc method\n     * @name ng.$interpolate#endSymbol\n     * @methodOf ng.$interpolate\n     * @description\n     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n     *\n     * Use {@link ng.$interpolateProvider#endSymbol $interpolateProvider#endSymbol} to change\n     * the symbol.\n     *\n     * @returns {string} start symbol.\n     */\n    $interpolate.endSymbol = function() {\n      return endSymbol;\n    }\n\n    return $interpolate;\n  }];\n}\n\nvar SERVER_MATCH = /^([^:]+):\\/\\/(\\w+:{0,1}\\w*@)?(\\{?[\\w\\.-]*\\}?)(:([0-9]+))?(\\/[^\\?#]*)?(\\?([^#]*))?(#(.*))?$/,\n    PATH_MATCH = /^([^\\?#]*)(\\?([^#]*))?(#(.*))?$/,\n    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};\n\n\n/**\n * Encode path using encodeUriSegment, ignoring forward slashes\n *\n * @param {string} path Path to encode\n * @returns {string}\n */\nfunction encodePath(path) {\n  var segments = path.split('/'),\n      i = segments.length;\n\n  while (i--) {\n    segments[i] = encodeUriSegment(segments[i]);\n  }\n\n  return segments.join('/');\n}\n\nfunction matchUrl(url, obj) {\n  var match = SERVER_MATCH.exec(url);\n\n  obj.$$protocol = match[1];\n  obj.$$host = match[3];\n  obj.$$port = int(match[5]) || DEFAULT_PORTS[match[1]] || null;\n}\n\nfunction matchAppUrl(url, obj) {\n  var match = PATH_MATCH.exec(url);\n\n  obj.$$path = decodeURIComponent(match[1]);\n  obj.$$search = parseKeyValue(match[3]);\n  obj.$$hash = decodeURIComponent(match[5] || '');\n\n  // make sure path starts with '/';\n  if (obj.$$path && obj.$$path.charAt(0) != '/') obj.$$path = '/' + obj.$$path;\n}\n\n\nfunction composeProtocolHostPort(protocol, host, port) {\n  return protocol + '://' + host + (port == DEFAULT_PORTS[protocol] ? '' : ':' + port);\n}\n\n/**\n *\n * @param {string} begin\n * @param {string} whole\n * @param {string} otherwise\n * @returns {string} returns text from whole after begin or otherwise if it does not begin with expected string.\n */\nfunction beginsWith(begin, whole, otherwise) {\n  return whole.indexOf(begin) == 0 ? whole.substr(begin.length) : otherwise;\n}\n\n\nfunction stripHash(url) {\n  var index = url.indexOf('#');\n  return index == -1 ? url : url.substr(0, index);\n}\n\n\nfunction stripFile(url) {\n  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);\n}\n\n/* return the server only */\nfunction serverBase(url) {\n  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));\n}\n\n\n/**\n * LocationHtml5Url represents an url\n * This object is exposed as $location service when HTML5 mode is enabled and supported\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} basePrefix url path prefix\n */\nfunction LocationHtml5Url(appBase, basePrefix) {\n  basePrefix = basePrefix || '';\n  var appBaseNoFile = stripFile(appBase);\n  /**\n   * Parse given html5 (regular) url string into properties\n   * @param {string} newAbsoluteUrl HTML5 url\n   * @private\n   */\n  this.$$parse = function(url) {\n    var parsed = {}\n    matchUrl(url, parsed);\n    var pathUrl = beginsWith(appBaseNoFile, url);\n    if (!isString(pathUrl)) {\n      throw Error('Invalid url \"' + url + '\", missing path prefix \"' + appBaseNoFile + '\".');\n    }\n    matchAppUrl(pathUrl, parsed);\n    extend(this, parsed);\n    if (!this.$$path) {\n      this.$$path = '/';\n    }\n\n    this.$$compose();\n  };\n\n  /**\n   * Compose url and update `absUrl` property\n   * @private\n   */\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'\n  };\n\n  this.$$rewrite = function(url) {\n    var appUrl, prevAppUrl;\n\n    if ( (appUrl = beginsWith(appBase, url)) !== undefined ) {\n      prevAppUrl = appUrl;\n      if ( (appUrl = beginsWith(basePrefix, appUrl)) !== undefined ) {\n        return appBaseNoFile + (beginsWith('/', appUrl) || appUrl);\n      } else {\n        return appBase + prevAppUrl;\n      }\n    } else if ( (appUrl = beginsWith(appBaseNoFile, url)) !== undefined ) {\n      return appBaseNoFile + appUrl;\n    } else if (appBaseNoFile == url + '/') {\n      return appBaseNoFile;\n    }\n  }\n}\n\n\n/**\n * LocationHashbangUrl represents url\n * This object is exposed as $location service when html5 history api is disabled or not supported\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} hashPrefix hashbang prefix\n */\nfunction LocationHashbangUrl(appBase, hashPrefix) {\n  var appBaseNoFile = stripFile(appBase);\n\n  /**\n   * Parse given hashbang url into properties\n   * @param {string} url Hashbang url\n   * @private\n   */\n  this.$$parse = function(url) {\n    matchUrl(url, this);\n    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);\n    if (!isString(withoutBaseUrl)) {\n      throw new Error('Invalid url \"' + url + '\", does not start with \"' + appBase +  '\".');\n    }\n    var withoutHashUrl = withoutBaseUrl.charAt(0) == '#' ? beginsWith(hashPrefix, withoutBaseUrl) : withoutBaseUrl;\n    if (!isString(withoutHashUrl)) {\n      throw new Error('Invalid url \"' + url + '\", missing hash prefix \"' + hashPrefix + '\".');\n    }\n    matchAppUrl(withoutHashUrl, this);\n    this.$$compose();\n  };\n\n  /**\n   * Compose hashbang url and update `absUrl` property\n   * @private\n   */\n  this.$$compose = function() {\n    var search = toKeyValue(this.$$search),\n        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';\n\n    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;\n    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');\n  };\n\n  this.$$rewrite = function(url) {\n    if(stripHash(appBase) == stripHash(url)) {\n      return url;\n    }\n  }\n}\n\n\n/**\n * LocationHashbangUrl represents url\n * This object is exposed as $location service when html5 history api is enabled but the browser\n * does not support it.\n *\n * @constructor\n * @param {string} appBase application base URL\n * @param {string} hashPrefix hashbang prefix\n */\nfunction LocationHashbangInHtml5Url(appBase, hashPrefix) {\n  LocationHashbangUrl.apply(this, arguments);\n\n  var appBaseNoFile = stripFile(appBase);\n\n  this.$$rewrite = function(url) {\n    var appUrl;\n\n    if ( appBase == stripHash(url) ) {\n      return url;\n    } else if ( (appUrl = beginsWith(appBaseNoFile, url)) ) {\n      return appBase + hashPrefix + appUrl;\n    } else if ( appBaseNoFile === url + '/') {\n      return appBaseNoFile;\n    }\n  }\n}\n\n\nLocationHashbangInHtml5Url.prototype =\n  LocationHashbangUrl.prototype =\n  LocationHtml5Url.prototype = {\n\n  /**\n   * Has any change been replacing ?\n   * @private\n   */\n  $$replace: false,\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#absUrl\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return full url representation with all segments encoded according to rules specified in\n   * {@link http://www.ietf.org/rfc/rfc3986.txt RFC 3986}.\n   *\n   * @return {string} full url\n   */\n  absUrl: locationGetter('$$absUrl'),\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#url\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.\n   *\n   * Change path, search and hash, when called with parameter and return `$location`.\n   *\n   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)\n   * @return {string} url\n   */\n  url: function(url, replace) {\n    if (isUndefined(url))\n      return this.$$url;\n\n    var match = PATH_MATCH.exec(url);\n    if (match[1]) this.path(decodeURIComponent(match[1]));\n    if (match[2] || match[1]) this.search(match[3] || '');\n    this.hash(match[5] || '', replace);\n\n    return this;\n  },\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#protocol\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return protocol of current url.\n   *\n   * @return {string} protocol of current url\n   */\n  protocol: locationGetter('$$protocol'),\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#host\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return host of current url.\n   *\n   * @return {string} host of current url.\n   */\n  host: locationGetter('$$host'),\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#port\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter only.\n   *\n   * Return port of current url.\n   *\n   * @return {Number} port\n   */\n  port: locationGetter('$$port'),\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#path\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return path of current url when called without any parameter.\n   *\n   * Change path when called with parameter and return `$location`.\n   *\n   * Note: Path should always begin with forward slash (/), this method will add the forward slash\n   * if it is missing.\n   *\n   * @param {string=} path New path\n   * @return {string} path\n   */\n  path: locationGetterSetter('$$path', function(path) {\n    return path.charAt(0) == '/' ? path : '/' + path;\n  }),\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#search\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return search part (as object) of current url when called without any parameter.\n   *\n   * Change search part when called with parameter and return `$location`.\n   *\n   * @param {string|object<string,string>=} search New search params - string or hash object\n   * @param {string=} paramValue If `search` is a string, then `paramValue` will override only a\n   *    single search parameter. If the value is `null`, the parameter will be deleted.\n   *\n   * @return {string} search\n   */\n  search: function(search, paramValue) {\n    if (isUndefined(search))\n      return this.$$search;\n\n    if (isDefined(paramValue)) {\n      if (paramValue === null) {\n        delete this.$$search[search];\n      } else {\n        this.$$search[search] = paramValue;\n      }\n    } else {\n      this.$$search = isString(search) ? parseKeyValue(search) : search;\n    }\n\n    this.$$compose();\n    return this;\n  },\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#hash\n   * @methodOf ng.$location\n   *\n   * @description\n   * This method is getter / setter.\n   *\n   * Return hash fragment when called without any parameter.\n   *\n   * Change hash fragment when called with parameter and return `$location`.\n   *\n   * @param {string=} hash New hash fragment\n   * @return {string} hash\n   */\n  hash: locationGetterSetter('$$hash', identity),\n\n  /**\n   * @ngdoc method\n   * @name ng.$location#replace\n   * @methodOf ng.$location\n   *\n   * @description\n   * If called, all changes to $location during current `$digest` will be replacing current history\n   * record, instead of adding new one.\n   */\n  replace: function() {\n    this.$$replace = true;\n    return this;\n  }\n};\n\nfunction locationGetter(property) {\n  return function() {\n    return this[property];\n  };\n}\n\n\nfunction locationGetterSetter(property, preprocess) {\n  return function(value) {\n    if (isUndefined(value))\n      return this[property];\n\n    this[property] = preprocess(value);\n    this.$$compose();\n\n    return this;\n  };\n}\n\n\n/**\n * @ngdoc object\n * @name ng.$location\n *\n * @requires $browser\n * @requires $sniffer\n * @requires $rootElement\n *\n * @description\n * The $location service parses the URL in the browser address bar (based on the\n * {@link https://developer.mozilla.org/en/window.location window.location}) and makes the URL\n * available to your application. Changes to the URL in the address bar are reflected into\n * $location service and changes to $location are reflected into the browser address bar.\n *\n * **The $location service:**\n *\n * - Exposes the current URL in the browser address bar, so you can\n *   - Watch and observe the URL.\n *   - Change the URL.\n * - Synchronizes the URL with the browser when the user\n *   - Changes the address bar.\n *   - Clicks the back or forward button (or clicks a History link).\n *   - Clicks on a link.\n * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).\n *\n * For more information see {@link guide/dev_guide.services.$location Developer Guide: Angular\n * Services: Using $location}\n */\n\n/**\n * @ngdoc object\n * @name ng.$locationProvider\n * @description\n * Use the `$locationProvider` to configure how the application deep linking paths are stored.\n */\nfunction $LocationProvider(){\n  var hashPrefix = '',\n      html5Mode = false;\n\n  /**\n   * @ngdoc property\n   * @name ng.$locationProvider#hashPrefix\n   * @methodOf ng.$locationProvider\n   * @description\n   * @param {string=} prefix Prefix for hash part (containing path and search)\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   */\n  this.hashPrefix = function(prefix) {\n    if (isDefined(prefix)) {\n      hashPrefix = prefix;\n      return this;\n    } else {\n      return hashPrefix;\n    }\n  };\n\n  /**\n   * @ngdoc property\n   * @name ng.$locationProvider#html5Mode\n   * @methodOf ng.$locationProvider\n   * @description\n   * @param {string=} mode Use HTML5 strategy if available.\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   */\n  this.html5Mode = function(mode) {\n    if (isDefined(mode)) {\n      html5Mode = mode;\n      return this;\n    } else {\n      return html5Mode;\n    }\n  };\n\n  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement',\n      function( $rootScope,   $browser,   $sniffer,   $rootElement) {\n    var $location,\n        LocationMode,\n        baseHref = $browser.baseHref(),\n        initialUrl = $browser.url(),\n        appBase;\n\n    if (html5Mode) {\n      appBase = baseHref ? serverBase(initialUrl) + baseHref : initialUrl;\n      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;\n    } else {\n      appBase = stripHash(initialUrl);\n      LocationMode = LocationHashbangUrl;\n    }\n    $location = new LocationMode(appBase, '#' + hashPrefix);\n    $location.$$parse($location.$$rewrite(initialUrl));\n\n    $rootElement.bind('click', function(event) {\n      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)\n      // currently we open nice url link and redirect then\n\n      if (event.ctrlKey || event.metaKey || event.which == 2) return;\n\n      var elm = jqLite(event.target);\n\n      // traverse the DOM up to find first A tag\n      while (lowercase(elm[0].nodeName) !== 'a') {\n        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)\n        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;\n      }\n\n      var absHref = elm.prop('href');\n      var rewrittenUrl = $location.$$rewrite(absHref);\n\n      if (absHref && !elm.attr('target') && rewrittenUrl && !event.isDefaultPrevented()) {\n        event.preventDefault();\n        if (rewrittenUrl != $browser.url()) {\n          // update location manually\n          $location.$$parse(rewrittenUrl);\n          $rootScope.$apply();\n          // hack to work around FF6 bug 684208 when scenario runner clicks on links\n          window.angular['ff-684208-preventDefault'] = true;\n        }\n      }\n    });\n\n\n    // rewrite hashbang url <> html5 url\n    if ($location.absUrl() != initialUrl) {\n      $browser.url($location.absUrl(), true);\n    }\n\n    // update $location when $browser url changes\n    $browser.onUrlChange(function(newUrl) {\n      if ($location.absUrl() != newUrl) {\n        if ($rootScope.$broadcast('$locationChangeStart', newUrl, $location.absUrl()).defaultPrevented) {\n          $browser.url($location.absUrl());\n          return;\n        }\n        $rootScope.$evalAsync(function() {\n          var oldUrl = $location.absUrl();\n\n          $location.$$parse(newUrl);\n          afterLocationChange(oldUrl);\n        });\n        if (!$rootScope.$$phase) $rootScope.$digest();\n      }\n    });\n\n    // update browser\n    var changeCounter = 0;\n    $rootScope.$watch(function $locationWatch() {\n      var oldUrl = $browser.url();\n      var currentReplace = $location.$$replace;\n\n      if (!changeCounter || oldUrl != $location.absUrl()) {\n        changeCounter++;\n        $rootScope.$evalAsync(function() {\n          if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).\n              defaultPrevented) {\n            $location.$$parse(oldUrl);\n          } else {\n            $browser.url($location.absUrl(), currentReplace);\n            afterLocationChange(oldUrl);\n          }\n        });\n      }\n      $location.$$replace = false;\n\n      return changeCounter;\n    });\n\n    return $location;\n\n    function afterLocationChange(oldUrl) {\n      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);\n    }\n}];\n}\n\n/**\n * @ngdoc object\n * @name ng.$log\n * @requires $window\n *\n * @description\n * Simple service for logging. Default implementation writes the message\n * into the browser's console (if present).\n *\n * The main purpose of this service is to simplify debugging and troubleshooting.\n *\n * @example\n   <example>\n     <file name=\"script.js\">\n       function LogCtrl($scope, $log) {\n         $scope.$log = $log;\n         $scope.message = 'Hello World!';\n       }\n     </file>\n     <file name=\"index.html\">\n       <div ng-controller=\"LogCtrl\">\n         <p>Reload this page with open console, enter text and hit the log button...</p>\n         Message:\n         <input type=\"text\" ng-model=\"message\"/>\n         <button ng-click=\"$log.log(message)\">log</button>\n         <button ng-click=\"$log.warn(message)\">warn</button>\n         <button ng-click=\"$log.info(message)\">info</button>\n         <button ng-click=\"$log.error(message)\">error</button>\n       </div>\n     </file>\n   </example>\n */\n\n/**\n * @ngdoc object\n * @name ng.$logProvider\n * @description\n * Use the `$logProvider` to configure how the application logs messages\n */\nfunction $LogProvider(){\n  var debug = true,\n      self = this;\n  \n  /**\n   * @ngdoc property\n   * @name ng.$logProvider#debugEnabled\n   * @methodOf ng.$logProvider\n   * @description\n   * @param {string=} flag enable or disable debug level messages\n   * @returns {*} current value if used as getter or itself (chaining) if used as setter\n   */\n  this.debugEnabled = function(flag) {\n\t  if (isDefined(flag)) {\n\t\t  debug = flag;\n\t\t  return this;\n\t  } else {\n\t\t  return debug;\n\t  }\n  };\n  \n  this.$get = ['$window', function($window){\n    return {\n      /**\n       * @ngdoc method\n       * @name ng.$log#log\n       * @methodOf ng.$log\n       *\n       * @description\n       * Write a log message\n       */\n      log: consoleLog('log'),\n\n      /**\n       * @ngdoc method\n       * @name ng.$log#warn\n       * @methodOf ng.$log\n       *\n       * @description\n       * Write a warning message\n       */\n      warn: consoleLog('warn'),\n\n      /**\n       * @ngdoc method\n       * @name ng.$log#info\n       * @methodOf ng.$log\n       *\n       * @description\n       * Write an information message\n       */\n      info: consoleLog('info'),\n\n      /**\n       * @ngdoc method\n       * @name ng.$log#error\n       * @methodOf ng.$log\n       *\n       * @description\n       * Write an error message\n       */\n      error: consoleLog('error'),\n      \n      /**\n       * @ngdoc method\n       * @name ng.$log#debug\n       * @methodOf ng.$log\n       * \n       * @description\n       * Write a debug message\n       */\n      debug: (function () {\n    \tvar fn = consoleLog('debug');\n    \t\n    \treturn function() {\n    \t\tif (debug) {\n    \t\t\tfn.apply(self, arguments);\n    \t\t}\n    \t}\n      }())\n    };\n\n    function formatError(arg) {\n      if (arg instanceof Error) {\n        if (arg.stack) {\n          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)\n              ? 'Error: ' + arg.message + '\\n' + arg.stack\n              : arg.stack;\n        } else if (arg.sourceURL) {\n          arg = arg.message + '\\n' + arg.sourceURL + ':' + arg.line;\n        }\n      }\n      return arg;\n    }\n\n    function consoleLog(type) {\n      var console = $window.console || {},\n          logFn = console[type] || console.log || noop;\n\n      if (logFn.apply) {\n        return function() {\n          var args = [];\n          forEach(arguments, function(arg) {\n            args.push(formatError(arg));\n          });\n          return logFn.apply(console, args);\n        };\n      }\n\n      // we are IE which either doesn't have window.console => this is noop and we do nothing,\n      // or we are IE where console.log doesn't have apply so we log at least first 2 args\n      return function(arg1, arg2) {\n        logFn(arg1, arg2);\n      }\n    }\n  }];\n}\n\nvar OPERATORS = {\n    'null':function(){return null;},\n    'true':function(){return true;},\n    'false':function(){return false;},\n    undefined:noop,\n    '+':function(self, locals, a,b){\n      a=a(self, locals); b=b(self, locals);\n      if (isDefined(a)) {\n        if (isDefined(b)) {\n          return a + b;\n        }\n        return a;\n      }\n      return isDefined(b)?b:undefined;},\n    '-':function(self, locals, a,b){a=a(self, locals); b=b(self, locals); return (isDefined(a)?a:0)-(isDefined(b)?b:0);},\n    '*':function(self, locals, a,b){return a(self, locals)*b(self, locals);},\n    '/':function(self, locals, a,b){return a(self, locals)/b(self, locals);},\n    '%':function(self, locals, a,b){return a(self, locals)%b(self, locals);},\n    '^':function(self, locals, a,b){return a(self, locals)^b(self, locals);},\n    '=':noop,\n    '===':function(self, locals, a, b){return a(self, locals)===b(self, locals);},\n    '!==':function(self, locals, a, b){return a(self, locals)!==b(self, locals);},\n    '==':function(self, locals, a,b){return a(self, locals)==b(self, locals);},\n    '!=':function(self, locals, a,b){return a(self, locals)!=b(self, locals);},\n    '<':function(self, locals, a,b){return a(self, locals)<b(self, locals);},\n    '>':function(self, locals, a,b){return a(self, locals)>b(self, locals);},\n    '<=':function(self, locals, a,b){return a(self, locals)<=b(self, locals);},\n    '>=':function(self, locals, a,b){return a(self, locals)>=b(self, locals);},\n    '&&':function(self, locals, a,b){return a(self, locals)&&b(self, locals);},\n    '||':function(self, locals, a,b){return a(self, locals)||b(self, locals);},\n    '&':function(self, locals, a,b){return a(self, locals)&b(self, locals);},\n//    '|':function(self, locals, a,b){return a|b;},\n    '|':function(self, locals, a,b){return b(self, locals)(self, locals, a(self, locals));},\n    '!':function(self, locals, a){return !a(self, locals);}\n};\nvar ESCAPE = {\"n\":\"\\n\", \"f\":\"\\f\", \"r\":\"\\r\", \"t\":\"\\t\", \"v\":\"\\v\", \"'\":\"'\", '\"':'\"'};\n\nfunction lex(text, csp){\n  var tokens = [],\n      token,\n      index = 0,\n      json = [],\n      ch,\n      lastCh = ':'; // can start regexp\n\n  while (index < text.length) {\n    ch = text.charAt(index);\n    if (is('\"\\'')) {\n      readString(ch);\n    } else if (isNumber(ch) || is('.') && isNumber(peek())) {\n      readNumber();\n    } else if (isIdent(ch)) {\n      readIdent();\n      // identifiers can only be if the preceding char was a { or ,\n      if (was('{,') && json[0]=='{' &&\n         (token=tokens[tokens.length-1])) {\n        token.json = token.text.indexOf('.') == -1;\n      }\n    } else if (is('(){}[].,;:?')) {\n      tokens.push({\n        index:index,\n        text:ch,\n        json:(was(':[,') && is('{[')) || is('}]:,')\n      });\n      if (is('{[')) json.unshift(ch);\n      if (is('}]')) json.shift();\n      index++;\n    } else if (isWhitespace(ch)) {\n      index++;\n      continue;\n    } else {\n      var ch2 = ch + peek(),\n          ch3 = ch2 + peek(2),\n          fn = OPERATORS[ch],\n          fn2 = OPERATORS[ch2],\n          fn3 = OPERATORS[ch3];\n      if (fn3) {\n        tokens.push({index:index, text:ch3, fn:fn3});\n        index += 3;\n      } else if (fn2) {\n        tokens.push({index:index, text:ch2, fn:fn2});\n        index += 2;\n      } else if (fn) {\n        tokens.push({index:index, text:ch, fn:fn, json: was('[,:') && is('+-')});\n        index += 1;\n      } else {\n        throwError(\"Unexpected next character \", index, index+1);\n      }\n    }\n    lastCh = ch;\n  }\n  return tokens;\n\n  function is(chars) {\n    return chars.indexOf(ch) != -1;\n  }\n\n  function was(chars) {\n    return chars.indexOf(lastCh) != -1;\n  }\n\n  function peek(i) {\n    var num = i || 1;\n    return index + num < text.length ? text.charAt(index + num) : false;\n  }\n  function isNumber(ch) {\n    return '0' <= ch && ch <= '9';\n  }\n  function isWhitespace(ch) {\n    return ch == ' ' || ch == '\\r' || ch == '\\t' ||\n           ch == '\\n' || ch == '\\v' || ch == '\\u00A0'; // IE treats non-breaking space as \\u00A0\n  }\n  function isIdent(ch) {\n    return 'a' <= ch && ch <= 'z' ||\n           'A' <= ch && ch <= 'Z' ||\n           '_' == ch || ch == '$';\n  }\n  function isExpOperator(ch) {\n    return ch == '-' || ch == '+' || isNumber(ch);\n  }\n\n  function throwError(error, start, end) {\n    end = end || index;\n    throw Error(\"Lexer Error: \" + error + \" at column\" +\n        (isDefined(start)\n            ? \"s \" + start +  \"-\" + index + \" [\" + text.substring(start, end) + \"]\"\n            : \" \" + end) +\n        \" in expression [\" + text + \"].\");\n  }\n\n  function readNumber() {\n    var number = \"\";\n    var start = index;\n    while (index < text.length) {\n      var ch = lowercase(text.charAt(index));\n      if (ch == '.' || isNumber(ch)) {\n        number += ch;\n      } else {\n        var peekCh = peek();\n        if (ch == 'e' && isExpOperator(peekCh)) {\n          number += ch;\n        } else if (isExpOperator(ch) &&\n            peekCh && isNumber(peekCh) &&\n            number.charAt(number.length - 1) == 'e') {\n          number += ch;\n        } else if (isExpOperator(ch) &&\n            (!peekCh || !isNumber(peekCh)) &&\n            number.charAt(number.length - 1) == 'e') {\n          throwError('Invalid exponent');\n        } else {\n          break;\n        }\n      }\n      index++;\n    }\n    number = 1 * number;\n    tokens.push({index:start, text:number, json:true,\n      fn:function() {return number;}});\n  }\n  function readIdent() {\n    var ident = \"\",\n        start = index,\n        lastDot, peekIndex, methodName, ch;\n\n    while (index < text.length) {\n      ch = text.charAt(index);\n      if (ch == '.' || isIdent(ch) || isNumber(ch)) {\n        if (ch == '.') lastDot = index;\n        ident += ch;\n      } else {\n        break;\n      }\n      index++;\n    }\n\n    //check if this is not a method invocation and if it is back out to last dot\n    if (lastDot) {\n      peekIndex = index;\n      while(peekIndex < text.length) {\n        ch = text.charAt(peekIndex);\n        if (ch == '(') {\n          methodName = ident.substr(lastDot - start + 1);\n          ident = ident.substr(0, lastDot - start);\n          index = peekIndex;\n          break;\n        }\n        if(isWhitespace(ch)) {\n          peekIndex++;\n        } else {\n          break;\n        }\n      }\n    }\n\n\n    var token = {\n      index:start,\n      text:ident\n    };\n\n    if (OPERATORS.hasOwnProperty(ident)) {\n      token.fn = token.json = OPERATORS[ident];\n    } else {\n      var getter = getterFn(ident, csp);\n      token.fn = extend(function(self, locals) {\n        return (getter(self, locals));\n      }, {\n        assign: function(self, value) {\n          return setter(self, ident, value);\n        }\n      });\n    }\n\n    tokens.push(token);\n\n    if (methodName) {\n      tokens.push({\n        index:lastDot,\n        text: '.',\n        json: false\n      });\n      tokens.push({\n        index: lastDot + 1,\n        text: methodName,\n        json: false\n      });\n    }\n  }\n\n  function readString(quote) {\n    var start = index;\n    index++;\n    var string = \"\";\n    var rawString = quote;\n    var escape = false;\n    while (index < text.length) {\n      var ch = text.charAt(index);\n      rawString += ch;\n      if (escape) {\n        if (ch == 'u') {\n          var hex = text.substring(index + 1, index + 5);\n          if (!hex.match(/[\\da-f]{4}/i))\n            throwError( \"Invalid unicode escape [\\\\u\" + hex + \"]\");\n          index += 4;\n          string += String.fromCharCode(parseInt(hex, 16));\n        } else {\n          var rep = ESCAPE[ch];\n          if (rep) {\n            string += rep;\n          } else {\n            string += ch;\n          }\n        }\n        escape = false;\n      } else if (ch == '\\\\') {\n        escape = true;\n      } else if (ch == quote) {\n        index++;\n        tokens.push({\n          index:start,\n          text:rawString,\n          string:string,\n          json:true,\n          fn:function() { return string; }\n        });\n        return;\n      } else {\n        string += ch;\n      }\n      index++;\n    }\n    throwError(\"Unterminated quote\", start);\n  }\n}\n\n/////////////////////////////////////////\n\nfunction parser(text, json, $filter, csp){\n  var ZERO = valueFn(0),\n      value,\n      tokens = lex(text, csp),\n      assignment = _assignment,\n      functionCall = _functionCall,\n      fieldAccess = _fieldAccess,\n      objectIndex = _objectIndex,\n      filterChain = _filterChain;\n\n  if(json){\n    // The extra level of aliasing is here, just in case the lexer misses something, so that\n    // we prevent any accidental execution in JSON.\n    assignment = logicalOR;\n    functionCall =\n      fieldAccess =\n      objectIndex =\n      filterChain =\n        function() { throwError(\"is not valid json\", {text:text, index:0}); };\n    value = primary();\n  } else {\n    value = statements();\n  }\n  if (tokens.length !== 0) {\n    throwError(\"is an unexpected token\", tokens[0]);\n  }\n  value.literal = !!value.literal;\n  value.constant = !!value.constant;\n  return value;\n\n  ///////////////////////////////////\n  function throwError(msg, token) {\n    throw Error(\"Syntax Error: Token '\" + token.text +\n      \"' \" + msg + \" at column \" +\n      (token.index + 1) + \" of the expression [\" +\n      text + \"] starting at [\" + text.substring(token.index) + \"].\");\n  }\n\n  function peekToken() {\n    if (tokens.length === 0)\n      throw Error(\"Unexpected end of expression: \" + text);\n    return tokens[0];\n  }\n\n  function peek(e1, e2, e3, e4) {\n    if (tokens.length > 0) {\n      var token = tokens[0];\n      var t = token.text;\n      if (t==e1 || t==e2 || t==e3 || t==e4 ||\n          (!e1 && !e2 && !e3 && !e4)) {\n        return token;\n      }\n    }\n    return false;\n  }\n\n  function expect(e1, e2, e3, e4){\n    var token = peek(e1, e2, e3, e4);\n    if (token) {\n      if (json && !token.json) {\n        throwError(\"is not valid json\", token);\n      }\n      tokens.shift();\n      return token;\n    }\n    return false;\n  }\n\n  function consume(e1){\n    if (!expect(e1)) {\n      throwError(\"is unexpected, expecting [\" + e1 + \"]\", peek());\n    }\n  }\n\n  function unaryFn(fn, right) {\n    return extend(function(self, locals) {\n      return fn(self, locals, right);\n    }, {\n      constant:right.constant\n    });\n  }\n\n  function ternaryFn(left, middle, right){\n    return extend(function(self, locals){\n      return left(self, locals) ? middle(self, locals) : right(self, locals);\n    }, {\n      constant: left.constant && middle.constant && right.constant\n    });\n  }\n  \n  function binaryFn(left, fn, right) {\n    return extend(function(self, locals) {\n      return fn(self, locals, left, right);\n    }, {\n      constant:left.constant && right.constant\n    });\n  }\n\n  function statements() {\n    var statements = [];\n    while(true) {\n      if (tokens.length > 0 && !peek('}', ')', ';', ']'))\n        statements.push(filterChain());\n      if (!expect(';')) {\n        // optimize for the common case where there is only one statement.\n        // TODO(size): maybe we should not support multiple statements?\n        return statements.length == 1\n          ? statements[0]\n          : function(self, locals){\n            var value;\n            for ( var i = 0; i < statements.length; i++) {\n              var statement = statements[i];\n              if (statement)\n                value = statement(self, locals);\n            }\n            return value;\n          };\n      }\n    }\n  }\n\n  function _filterChain() {\n    var left = expression();\n    var token;\n    while(true) {\n      if ((token = expect('|'))) {\n        left = binaryFn(left, token.fn, filter());\n      } else {\n        return left;\n      }\n    }\n  }\n\n  function filter() {\n    var token = expect();\n    var fn = $filter(token.text);\n    var argsFn = [];\n    while(true) {\n      if ((token = expect(':'))) {\n        argsFn.push(expression());\n      } else {\n        var fnInvoke = function(self, locals, input){\n          var args = [input];\n          for ( var i = 0; i < argsFn.length; i++) {\n            args.push(argsFn[i](self, locals));\n          }\n          return fn.apply(self, args);\n        };\n        return function() {\n          return fnInvoke;\n        };\n      }\n    }\n  }\n\n  function expression() {\n    return assignment();\n  }\n\n  function _assignment() {\n    var left = ternary();\n    var right;\n    var token;\n    if ((token = expect('='))) {\n      if (!left.assign) {\n        throwError(\"implies assignment but [\" +\n          text.substring(0, token.index) + \"] can not be assigned to\", token);\n      }\n      right = ternary();\n      return function(scope, locals){\n        return left.assign(scope, right(scope, locals), locals);\n      };\n    } else {\n      return left;\n    }\n  }\n\n  function ternary() {\n    var left = logicalOR();\n    var middle;\n    var token;\n    if((token = expect('?'))){\n      middle = ternary();\n      if((token = expect(':'))){\n        return ternaryFn(left, middle, ternary());\n      }\n      else {\n        throwError('expected :', token);\n      }\n    }\n    else {\n      return left;\n    }\n  }\n  \n  function logicalOR() {\n    var left = logicalAND();\n    var token;\n    while(true) {\n      if ((token = expect('||'))) {\n        left = binaryFn(left, token.fn, logicalAND());\n      } else {\n        return left;\n      }\n    }\n  }\n\n  function logicalAND() {\n    var left = equality();\n    var token;\n    if ((token = expect('&&'))) {\n      left = binaryFn(left, token.fn, logicalAND());\n    }\n    return left;\n  }\n\n  function equality() {\n    var left = relational();\n    var token;\n    if ((token = expect('==','!=','===','!=='))) {\n      left = binaryFn(left, token.fn, equality());\n    }\n    return left;\n  }\n\n  function relational() {\n    var left = additive();\n    var token;\n    if ((token = expect('<', '>', '<=', '>='))) {\n      left = binaryFn(left, token.fn, relational());\n    }\n    return left;\n  }\n\n  function additive() {\n    var left = multiplicative();\n    var token;\n    while ((token = expect('+','-'))) {\n      left = binaryFn(left, token.fn, multiplicative());\n    }\n    return left;\n  }\n\n  function multiplicative() {\n    var left = unary();\n    var token;\n    while ((token = expect('*','/','%'))) {\n      left = binaryFn(left, token.fn, unary());\n    }\n    return left;\n  }\n\n  function unary() {\n    var token;\n    if (expect('+')) {\n      return primary();\n    } else if ((token = expect('-'))) {\n      return binaryFn(ZERO, token.fn, unary());\n    } else if ((token = expect('!'))) {\n      return unaryFn(token.fn, unary());\n    } else {\n      return primary();\n    }\n  }\n\n\n  function primary() {\n    var primary;\n    if (expect('(')) {\n      primary = filterChain();\n      consume(')');\n    } else if (expect('[')) {\n      primary = arrayDeclaration();\n    } else if (expect('{')) {\n      primary = object();\n    } else {\n      var token = expect();\n      primary = token.fn;\n      if (!primary) {\n        throwError(\"not a primary expression\", token);\n      }\n      if (token.json) {\n        primary.constant = primary.literal = true;\n      }\n    }\n\n    var next, context;\n    while ((next = expect('(', '[', '.'))) {\n      if (next.text === '(') {\n        primary = functionCall(primary, context);\n        context = null;\n      } else if (next.text === '[') {\n        context = primary;\n        primary = objectIndex(primary);\n      } else if (next.text === '.') {\n        context = primary;\n        primary = fieldAccess(primary);\n      } else {\n        throwError(\"IMPOSSIBLE\");\n      }\n    }\n    return primary;\n  }\n\n  function _fieldAccess(object) {\n    var field = expect().text;\n    var getter = getterFn(field, csp);\n    return extend(\n        function(scope, locals, self) {\n          return getter(self || object(scope, locals), locals);\n        },\n        {\n          assign:function(scope, value, locals) {\n            return setter(object(scope, locals), field, value);\n          }\n        }\n    );\n  }\n\n  function _objectIndex(obj) {\n    var indexFn = expression();\n    consume(']');\n    return extend(\n      function(self, locals){\n        var o = obj(self, locals),\n            i = indexFn(self, locals),\n            v, p;\n\n        if (!o) return undefined;\n        v = o[i];\n        if (v && v.then) {\n          p = v;\n          if (!('$$v' in v)) {\n            p.$$v = undefined;\n            p.then(function(val) { p.$$v = val; });\n          }\n          v = v.$$v;\n        }\n        return v;\n      }, {\n        assign:function(self, value, locals){\n          return obj(self, locals)[indexFn(self, locals)] = value;\n        }\n      });\n  }\n\n  function _functionCall(fn, contextGetter) {\n    var argsFn = [];\n    if (peekToken().text != ')') {\n      do {\n        argsFn.push(expression());\n      } while (expect(','));\n    }\n    consume(')');\n    return function(scope, locals){\n      var args = [],\n          context = contextGetter ? contextGetter(scope, locals) : scope;\n\n      for ( var i = 0; i < argsFn.length; i++) {\n        args.push(argsFn[i](scope, locals));\n      }\n      var fnPtr = fn(scope, locals, context) || noop;\n      // IE stupidity!\n      return fnPtr.apply\n          ? fnPtr.apply(context, args)\n          : fnPtr(args[0], args[1], args[2], args[3], args[4]);\n    };\n  }\n\n  // This is used with json array declaration\n  function arrayDeclaration () {\n    var elementFns = [];\n    var allConstant = true;\n    if (peekToken().text != ']') {\n      do {\n        var elementFn = expression();\n        elementFns.push(elementFn);\n        if (!elementFn.constant) {\n          allConstant = false;\n        }\n      } while (expect(','));\n    }\n    consume(']');\n    return extend(function(self, locals){\n      var array = [];\n      for ( var i = 0; i < elementFns.length; i++) {\n        array.push(elementFns[i](self, locals));\n      }\n      return array;\n    }, {\n      literal:true,\n      constant:allConstant\n    });\n  }\n\n  function object () {\n    var keyValues = [];\n    var allConstant = true;\n    if (peekToken().text != '}') {\n      do {\n        var token = expect(),\n        key = token.string || token.text;\n        consume(\":\");\n        var value = expression();\n        keyValues.push({key:key, value:value});\n        if (!value.constant) {\n          allConstant = false;\n        }\n      } while (expect(','));\n    }\n    consume('}');\n    return extend(function(self, locals){\n      var object = {};\n      for ( var i = 0; i < keyValues.length; i++) {\n        var keyValue = keyValues[i];\n        object[keyValue.key] = keyValue.value(self, locals);\n      }\n      return object;\n    }, {\n      literal:true,\n      constant:allConstant\n    });\n  }\n}\n\n//////////////////////////////////////////////////\n// Parser helper functions\n//////////////////////////////////////////////////\n\nfunction setter(obj, path, setValue) {\n  var element = path.split('.');\n  for (var i = 0; element.length > 1; i++) {\n    var key = element.shift();\n    var propertyObj = obj[key];\n    if (!propertyObj) {\n      propertyObj = {};\n      obj[key] = propertyObj;\n    }\n    obj = propertyObj;\n  }\n  obj[element.shift()] = setValue;\n  return setValue;\n}\n\n/**\n * Return the value accessible from the object by path. Any undefined traversals are ignored\n * @param {Object} obj starting object\n * @param {string} path path to traverse\n * @param {boolean=true} bindFnToScope\n * @returns value as accessible by path\n */\n//TODO(misko): this function needs to be removed\nfunction getter(obj, path, bindFnToScope) {\n  if (!path) return obj;\n  var keys = path.split('.');\n  var key;\n  var lastInstance = obj;\n  var len = keys.length;\n\n  for (var i = 0; i < len; i++) {\n    key = keys[i];\n    if (obj) {\n      obj = (lastInstance = obj)[key];\n    }\n  }\n  if (!bindFnToScope && isFunction(obj)) {\n    return bind(lastInstance, obj);\n  }\n  return obj;\n}\n\nvar getterFnCache = {};\n\n/**\n * Implementation of the \"Black Hole\" variant from:\n * - http://jsperf.com/angularjs-parse-getter/4\n * - http://jsperf.com/path-evaluation-simplified/7\n */\nfunction cspSafeGetterFn(key0, key1, key2, key3, key4) {\n  return function(scope, locals) {\n    var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope,\n        promise;\n\n    if (pathVal === null || pathVal === undefined) return pathVal;\n\n    pathVal = pathVal[key0];\n    if (pathVal && pathVal.then) {\n      if (!(\"$$v\" in pathVal)) {\n        promise = pathVal;\n        promise.$$v = undefined;\n        promise.then(function(val) { promise.$$v = val; });\n      }\n      pathVal = pathVal.$$v;\n    }\n    if (!key1 || pathVal === null || pathVal === undefined) return pathVal;\n\n    pathVal = pathVal[key1];\n    if (pathVal && pathVal.then) {\n      if (!(\"$$v\" in pathVal)) {\n        promise = pathVal;\n        promise.$$v = undefined;\n        promise.then(function(val) { promise.$$v = val; });\n      }\n      pathVal = pathVal.$$v;\n    }\n    if (!key2 || pathVal === null || pathVal === undefined) return pathVal;\n\n    pathVal = pathVal[key2];\n    if (pathVal && pathVal.then) {\n      if (!(\"$$v\" in pathVal)) {\n        promise = pathVal;\n        promise.$$v = undefined;\n        promise.then(function(val) { promise.$$v = val; });\n      }\n      pathVal = pathVal.$$v;\n    }\n    if (!key3 || pathVal === null || pathVal === undefined) return pathVal;\n\n    pathVal = pathVal[key3];\n    if (pathVal && pathVal.then) {\n      if (!(\"$$v\" in pathVal)) {\n        promise = pathVal;\n        promise.$$v = undefined;\n        promise.then(function(val) { promise.$$v = val; });\n      }\n      pathVal = pathVal.$$v;\n    }\n    if (!key4 || pathVal === null || pathVal === undefined) return pathVal;\n\n    pathVal = pathVal[key4];\n    if (pathVal && pathVal.then) {\n      if (!(\"$$v\" in pathVal)) {\n        promise = pathVal;\n        promise.$$v = undefined;\n        promise.then(function(val) { promise.$$v = val; });\n      }\n      pathVal = pathVal.$$v;\n    }\n    return pathVal;\n  };\n}\n\nfunction getterFn(path, csp) {\n  if (getterFnCache.hasOwnProperty(path)) {\n    return getterFnCache[path];\n  }\n\n  var pathKeys = path.split('.'),\n      pathKeysLength = pathKeys.length,\n      fn;\n\n  if (csp) {\n    fn = (pathKeysLength < 6)\n        ? cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4])\n        : function(scope, locals) {\n          var i = 0, val;\n          do {\n            val = cspSafeGetterFn(\n                    pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++]\n                  )(scope, locals);\n\n            locals = undefined; // clear after first iteration\n            scope = val;\n          } while (i < pathKeysLength);\n          return val;\n        }\n  } else {\n    var code = 'var l, fn, p;\\n';\n    forEach(pathKeys, function(key, index) {\n      code += 'if(s === null || s === undefined) return s;\\n' +\n              'l=s;\\n' +\n              's='+ (index\n                      // we simply dereference 's' on any .dot notation\n                      ? 's'\n                      // but if we are first then we check locals first, and if so read it first\n                      : '((k&&k.hasOwnProperty(\"' + key + '\"))?k:s)') + '[\"' + key + '\"]' + ';\\n' +\n              'if (s && s.then) {\\n' +\n                ' if (!(\"$$v\" in s)) {\\n' +\n                  ' p=s;\\n' +\n                  ' p.$$v = undefined;\\n' +\n                  ' p.then(function(v) {p.$$v=v;});\\n' +\n                  '}\\n' +\n                ' s=s.$$v\\n' +\n              '}\\n';\n    });\n    code += 'return s;';\n    fn = Function('s', 'k', code); // s=scope, k=locals\n    fn.toString = function() { return code; };\n  }\n\n  return getterFnCache[path] = fn;\n}\n\n///////////////////////////////////\n\n/**\n * @ngdoc function\n * @name ng.$parse\n * @function\n *\n * @description\n *\n * Converts Angular {@link guide/expression expression} into a function.\n *\n * <pre>\n *   var getter = $parse('user.name');\n *   var setter = getter.assign;\n *   var context = {user:{name:'angular'}};\n *   var locals = {user:{name:'local'}};\n *\n *   expect(getter(context)).toEqual('angular');\n *   setter(context, 'newValue');\n *   expect(context.user.name).toEqual('newValue');\n *   expect(getter(context, locals)).toEqual('local');\n * </pre>\n *\n *\n * @param {string} expression String expression to compile.\n * @returns {function(context, locals)} a function which represents the compiled expression:\n *\n *    * `context` – `{object}` – an object against which any expressions embedded in the strings\n *      are evaluated against (typically a scope object).\n *    * `locals` – `{object=}` – local variables context object, useful for overriding values in\n *      `context`.\n *\n *    The returned function also has the following properties:\n *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript\n *        literal.\n *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript\n *        constant literals.\n *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be\n *        set to a function to change its value on the given context.\n *\n */\nfunction $ParseProvider() {\n  var cache = {};\n  this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {\n    return function(exp) {\n      switch(typeof exp) {\n        case 'string':\n          return cache.hasOwnProperty(exp)\n            ? cache[exp]\n            : cache[exp] =  parser(exp, false, $filter, $sniffer.csp);\n        case 'function':\n          return exp;\n        default:\n          return noop;\n      }\n    };\n  }];\n}\n\n/**\n * @ngdoc service\n * @name ng.$q\n * @requires $rootScope\n *\n * @description\n * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).\n *\n * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an\n * interface for interacting with an object that represents the result of an action that is\n * performed asynchronously, and may or may not be finished at any given point in time.\n *\n * From the perspective of dealing with error handling, deferred and promise APIs are to\n * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.\n *\n * <pre>\n *   // for the purpose of this example let's assume that variables `$q` and `scope` are\n *   // available in the current lexical scope (they could have been injected or passed in).\n *\n *   function asyncGreet(name) {\n *     var deferred = $q.defer();\n *\n *     setTimeout(function() {\n *       // since this fn executes async in a future turn of the event loop, we need to wrap\n *       // our code into an $apply call so that the model changes are properly observed.\n *       scope.$apply(function() {\n *         if (okToGreet(name)) {\n *           deferred.resolve('Hello, ' + name + '!');\n *         } else {\n *           deferred.reject('Greeting ' + name + ' is not allowed.');\n *         }\n *       });\n *     }, 1000);\n *\n *     return deferred.promise;\n *   }\n *\n *   var promise = asyncGreet('Robin Hood');\n *   promise.then(function(greeting) {\n *     alert('Success: ' + greeting);\n *   }, function(reason) {\n *     alert('Failed: ' + reason);\n *   });\n * </pre>\n *\n * At first it might not be obvious why this extra complexity is worth the trouble. The payoff\n * comes in the way of\n * [guarantees that promise and deferred APIs make](https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md).\n *\n * Additionally the promise api allows for composition that is very hard to do with the\n * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.\n * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the\n * section on serial or parallel joining of promises.\n *\n *\n * # The Deferred API\n *\n * A new instance of deferred is constructed by calling `$q.defer()`.\n *\n * The purpose of the deferred object is to expose the associated Promise instance as well as APIs\n * that can be used for signaling the successful or unsuccessful completion of the task.\n *\n * **Methods**\n *\n * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection\n *   constructed via `$q.reject`, the promise will be rejected instead.\n * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to\n *   resolving it with a rejection constructed via `$q.reject`.\n *\n * **Properties**\n *\n * - promise – `{Promise}` – promise object associated with this deferred.\n *\n *\n * # The Promise API\n *\n * A new promise instance is created when a deferred instance is created and can be retrieved by\n * calling `deferred.promise`.\n *\n * The purpose of the promise object is to allow for interested parties to get access to the result\n * of the deferred task when it completes.\n *\n * **Methods**\n *\n * - `then(successCallback, errorCallback)` – regardless of when the promise was or will be resolved\n *   or rejected calls one of the success or error callbacks asynchronously as soon as the result\n *   is available. The callbacks are called with a single argument the result or rejection reason.\n *\n *   This method *returns a new promise* which is resolved or rejected via the return value of the\n *   `successCallback` or `errorCallback`.\n *\n * - `always(callback)` – allows you to observe either the fulfillment or rejection of a promise,\n *   but to do so without modifying the final value. This is useful to release resources or do some\n *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full\n *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for\n *   more information.\n *\n * # Chaining promises\n *\n * Because calling `then` api of a promise returns a new derived promise, it is easily possible\n * to create a chain of promises:\n *\n * <pre>\n *   promiseB = promiseA.then(function(result) {\n *     return result + 1;\n *   });\n *\n *   // promiseB will be resolved immediately after promiseA is resolved and its value will be\n *   // the result of promiseA incremented by 1\n * </pre>\n *\n * It is possible to create chains of any length and since a promise can be resolved with another\n * promise (which will defer its resolution further), it is possible to pause/defer resolution of\n * the promises at any point in the chain. This makes it possible to implement powerful apis like\n * $http's response interceptors.\n *\n *\n * # Differences between Kris Kowal's Q and $q\n *\n *  There are three main differences:\n *\n * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation\n *   mechanism in angular, which means faster propagation of resolution or rejection into your\n *   models and avoiding unnecessary browser repaints, which would result in flickering UI.\n * - $q promises are recognized by the templating engine in angular, which means that in templates\n *   you can treat promises attached to a scope as if they were the resulting values.\n * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains\n *   all the important functionality needed for common async tasks.\n * \n *  # Testing\n * \n *  <pre>\n *    it('should simulate promise', inject(function($q, $rootScope) {\n *      var deferred = $q.defer();\n *      var promise = deferred.promise;\n *      var resolvedValue;\n * \n *      promise.then(function(value) { resolvedValue = value; });\n *      expect(resolvedValue).toBeUndefined();\n * \n *      // Simulate resolving of promise\n *      deferred.resolve(123);\n *      // Note that the 'then' function does not get called synchronously.\n *      // This is because we want the promise API to always be async, whether or not\n *      // it got called synchronously or asynchronously.\n *      expect(resolvedValue).toBeUndefined();\n * \n *      // Propagate promise resolution to 'then' functions using $apply().\n *      $rootScope.$apply();\n *      expect(resolvedValue).toEqual(123);\n *    });\n *  </pre>\n */\nfunction $QProvider() {\n\n  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {\n    return qFactory(function(callback) {\n      $rootScope.$evalAsync(callback);\n    }, $exceptionHandler);\n  }];\n}\n\n\n/**\n * Constructs a promise manager.\n *\n * @param {function(function)} nextTick Function for executing functions in the next turn.\n * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for\n *     debugging purposes.\n * @returns {object} Promise manager.\n */\nfunction qFactory(nextTick, exceptionHandler) {\n\n  /**\n   * @ngdoc\n   * @name ng.$q#defer\n   * @methodOf ng.$q\n   * @description\n   * Creates a `Deferred` object which represents a task which will finish in the future.\n   *\n   * @returns {Deferred} Returns a new instance of deferred.\n   */\n  var defer = function() {\n    var pending = [],\n        value, deferred;\n\n    deferred = {\n\n      resolve: function(val) {\n        if (pending) {\n          var callbacks = pending;\n          pending = undefined;\n          value = ref(val);\n\n          if (callbacks.length) {\n            nextTick(function() {\n              var callback;\n              for (var i = 0, ii = callbacks.length; i < ii; i++) {\n                callback = callbacks[i];\n                value.then(callback[0], callback[1]);\n              }\n            });\n          }\n        }\n      },\n\n\n      reject: function(reason) {\n        deferred.resolve(reject(reason));\n      },\n\n\n      promise: {\n        then: function(callback, errback) {\n          var result = defer();\n\n          var wrappedCallback = function(value) {\n            try {\n              result.resolve((callback || defaultCallback)(value));\n            } catch(e) {\n              exceptionHandler(e);\n              result.reject(e);\n            }\n          };\n\n          var wrappedErrback = function(reason) {\n            try {\n              result.resolve((errback || defaultErrback)(reason));\n            } catch(e) {\n              exceptionHandler(e);\n              result.reject(e);\n            }\n          };\n\n          if (pending) {\n            pending.push([wrappedCallback, wrappedErrback]);\n          } else {\n            value.then(wrappedCallback, wrappedErrback);\n          }\n\n          return result.promise;\n        },\n        always: function(callback) {\n          \n          function makePromise(value, resolved) {\n            var result = defer();\n            if (resolved) {\n              result.resolve(value);\n            } else {\n              result.reject(value);\n            }\n            return result.promise;\n          }\n          \n          function handleCallback(value, isResolved) {\n            var callbackOutput = null;            \n            try {\n              callbackOutput = (callback ||defaultCallback)();\n            } catch(e) {\n              return makePromise(e, false);\n            }            \n            if (callbackOutput && callbackOutput.then) {\n              return callbackOutput.then(function() {\n                return makePromise(value, isResolved);\n              }, function(error) {\n                return makePromise(error, false);\n              });\n            } else {\n              return makePromise(value, isResolved);\n            }\n          }\n          \n          return this.then(function(value) {\n            return handleCallback(value, true);\n          }, function(error) {\n            return handleCallback(error, false);\n          });\n        }\n      }\n    };\n\n    return deferred;\n  };\n\n\n  var ref = function(value) {\n    if (value && value.then) return value;\n    return {\n      then: function(callback) {\n        var result = defer();\n        nextTick(function() {\n          result.resolve(callback(value));\n        });\n        return result.promise;\n      }\n    };\n  };\n\n\n  /**\n   * @ngdoc\n   * @name ng.$q#reject\n   * @methodOf ng.$q\n   * @description\n   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be\n   * used to forward rejection in a chain of promises. If you are dealing with the last promise in\n   * a promise chain, you don't need to worry about it.\n   *\n   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of\n   * `reject` as the `throw` keyword in JavaScript. This also means that if you \"catch\" an error via\n   * a promise error callback and you want to forward the error to the promise derived from the\n   * current promise, you have to \"rethrow\" the error by returning a rejection constructed via\n   * `reject`.\n   *\n   * <pre>\n   *   promiseB = promiseA.then(function(result) {\n   *     // success: do something and resolve promiseB\n   *     //          with the old or a new result\n   *     return result;\n   *   }, function(reason) {\n   *     // error: handle the error if possible and\n   *     //        resolve promiseB with newPromiseOrValue,\n   *     //        otherwise forward the rejection to promiseB\n   *     if (canHandle(reason)) {\n   *      // handle the error and recover\n   *      return newPromiseOrValue;\n   *     }\n   *     return $q.reject(reason);\n   *   });\n   * </pre>\n   *\n   * @param {*} reason Constant, message, exception or an object representing the rejection reason.\n   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.\n   */\n  var reject = function(reason) {\n    return {\n      then: function(callback, errback) {\n        var result = defer();\n        nextTick(function() {\n          result.resolve((errback || defaultErrback)(reason));\n        });\n        return result.promise;\n      }\n    };\n  };\n\n\n  /**\n   * @ngdoc\n   * @name ng.$q#when\n   * @methodOf ng.$q\n   * @description\n   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.\n   * This is useful when you are dealing with an object that might or might not be a promise, or if\n   * the promise comes from a source that can't be trusted.\n   *\n   * @param {*} value Value or a promise\n   * @returns {Promise} Returns a promise of the passed value or promise\n   */\n  var when = function(value, callback, errback) {\n    var result = defer(),\n        done;\n\n    var wrappedCallback = function(value) {\n      try {\n        return (callback || defaultCallback)(value);\n      } catch (e) {\n        exceptionHandler(e);\n        return reject(e);\n      }\n    };\n\n    var wrappedErrback = function(reason) {\n      try {\n        return (errback || defaultErrback)(reason);\n      } catch (e) {\n        exceptionHandler(e);\n        return reject(e);\n      }\n    };\n\n    nextTick(function() {\n      ref(value).then(function(value) {\n        if (done) return;\n        done = true;\n        result.resolve(ref(value).then(wrappedCallback, wrappedErrback));\n      }, function(reason) {\n        if (done) return;\n        done = true;\n        result.resolve(wrappedErrback(reason));\n      });\n    });\n\n    return result.promise;\n  };\n\n\n  function defaultCallback(value) {\n    return value;\n  }\n\n\n  function defaultErrback(reason) {\n    return reject(reason);\n  }\n\n\n  /**\n   * @ngdoc\n   * @name ng.$q#all\n   * @methodOf ng.$q\n   * @description\n   * Combines multiple promises into a single promise that is resolved when all of the input\n   * promises are resolved.\n   *\n   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.\n   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,\n   *   each value corresponding to the promise at the same index/key in the `promises` array/hash. If any of\n   *   the promises is resolved with a rejection, this resulting promise will be resolved with the\n   *   same rejection.\n   */\n  function all(promises) {\n    var deferred = defer(),\n        counter = 0,\n        results = isArray(promises) ? [] : {};\n\n    forEach(promises, function(promise, key) {\n      counter++;\n      ref(promise).then(function(value) {\n        if (results.hasOwnProperty(key)) return;\n        results[key] = value;\n        if (!(--counter)) deferred.resolve(results);\n      }, function(reason) {\n        if (results.hasOwnProperty(key)) return;\n        deferred.reject(reason);\n      });\n    });\n\n    if (counter === 0) {\n      deferred.resolve(results);\n    }\n\n    return deferred.promise;\n  }\n\n  return {\n    defer: defer,\n    reject: reject,\n    when: when,\n    all: all\n  };\n}\n\n/**\n * @ngdoc object\n * @name ng.$routeProvider\n * @function\n *\n * @description\n *\n * Used for configuring routes. See {@link ng.$route $route} for an example.\n */\nfunction $RouteProvider(){\n  var routes = {};\n\n  /**\n   * @ngdoc method\n   * @name ng.$routeProvider#when\n   * @methodOf ng.$routeProvider\n   *\n   * @param {string} path Route path (matched against `$location.path`). If `$location.path`\n   *    contains redundant trailing slash or is missing one, the route will still match and the\n   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\n   *    route definition.\n   *\n   *      * `path` can contain named groups starting with a colon (`:name`). All characters up\n   *        to the next slash are matched and stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *      * `path` can contain named groups starting with a star (`*name`). All characters are\n   *        eagerly stored in `$routeParams` under the given `name` when the route matches.\n   *\n   *    For example, routes like `/color/:color/largecode/*largecode/edit` will match\n   *    `/color/brown/largecode/code/with/slashs/edit` and extract:\n   *\n   *      * `color: brown`\n   *      * `largecode: code/with/slashs`.\n   *\n   *\n   * @param {Object} route Mapping information to be assigned to `$route.current` on route\n   *    match.\n   *\n   *    Object properties:\n   *\n   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with newly\n   *      created scope or the name of a {@link angular.Module#controller registered controller}\n   *      if passed as a string.\n   *    - `controllerAs` – `{string=}` – A controller alias name. If present the controller will be\n   *      published to scope under the `controllerAs` name.\n   *    - `template` – `{string=|function()=}` – html template as a string or function that returns\n   *      an html template as a string which should be used by {@link ng.directive:ngView ngView} or\n   *      {@link ng.directive:ngInclude ngInclude} directives.\n   *      This property takes precedence over `templateUrl`.\n   *\n   *      If `template` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n   *      template that should be used by {@link ng.directive:ngView ngView}.\n   *\n   *      If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n   *      be injected into the controller. If any of these dependencies are promises, they will be\n   *      resolved and converted to a value before the controller is instantiated and the\n   *      `$routeChangeSuccess` event is fired. The map object is:\n   *\n   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n   *        Otherwise if function, then it is {@link api/AUTO.$injector#invoke injected}\n   *        and the return value is treated as the dependency. If the result is a promise, it is resolved\n   *        before its value is injected into the controller.\n   *\n   *    - `redirectTo` – {(string|function())=} – value to update\n   *      {@link ng.$location $location} path with and trigger route redirection.\n   *\n   *      If `redirectTo` is a function, it will be called with the following parameters:\n   *\n   *      - `{Object.<string>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route templateUrl.\n   *      - `{string}` - current `$location.path()`\n   *      - `{Object}` - current `$location.search()`\n   *\n   *      The custom `redirectTo` function is expected to return a string which will be used\n   *      to update `$location.path()` and `$location.search()`.\n   *\n   *    - `[reloadOnSearch=true]` - {boolean=} - reload route when only $location.search()\n   *    changes.\n   *\n   *      If the option is set to `false` and url in the browser changes, then\n   *      `$routeUpdate` event is broadcasted on the root scope.\n   *\n   *    - `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive\n   *\n   *      If the option is set to `true`, then the particular route can be matched without being\n   *      case sensitive\n   *\n   * @returns {Object} self\n   *\n   * @description\n   * Adds a new route definition to the `$route` service.\n   */\n  this.when = function(path, route) {\n    routes[path] = extend({reloadOnSearch: true, caseInsensitiveMatch: false}, route);\n\n    // create redirection for trailing slashes\n    if (path) {\n      var redirectPath = (path[path.length-1] == '/')\n          ? path.substr(0, path.length-1)\n          : path +'/';\n\n      routes[redirectPath] = {redirectTo: path};\n    }\n\n    return this;\n  };\n\n  /**\n   * @ngdoc method\n   * @name ng.$routeProvider#otherwise\n   * @methodOf ng.$routeProvider\n   *\n   * @description\n   * Sets route definition that will be used on route change when no other route definition\n   * is matched.\n   *\n   * @param {Object} params Mapping information to be assigned to `$route.current`.\n   * @returns {Object} self\n   */\n  this.otherwise = function(params) {\n    this.when(null, params);\n    return this;\n  };\n\n\n  this.$get = ['$rootScope', '$location', '$routeParams', '$q', '$injector', '$http', '$templateCache',\n      function( $rootScope,   $location,   $routeParams,   $q,   $injector,   $http,   $templateCache) {\n\n    /**\n     * @ngdoc object\n     * @name ng.$route\n     * @requires $location\n     * @requires $routeParams\n     *\n     * @property {Object} current Reference to the current route definition.\n     * The route definition contains:\n     *\n     *   - `controller`: The controller constructor as define in route definition.\n     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\n     *     controller instantiation. The `locals` contain\n     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\n     *\n     *     - `$scope` - The current route scope.\n     *     - `$template` - The current route template HTML.\n     *\n     * @property {Array.<Object>} routes Array of all configured routes.\n     *\n     * @description\n     * Is used for deep-linking URLs to controllers and views (HTML partials).\n     * It watches `$location.url()` and tries to map the path to an existing route definition.\n     *\n     * You can define routes through {@link ng.$routeProvider $routeProvider}'s API.\n     *\n     * The `$route` service is typically used in conjunction with {@link ng.directive:ngView ngView}\n     * directive and the {@link ng.$routeParams $routeParams} service.\n     *\n     * @example\n       This example shows how changing the URL hash causes the `$route` to match a route against the\n       URL, and the `ngView` pulls in the partial.\n\n       Note that this example is using {@link ng.directive:script inlined templates}\n       to get it working on jsfiddle as well.\n\n     <example module=\"ngView\">\n       <file name=\"index.html\">\n         <div ng-controller=\"MainCntl\">\n           Choose:\n           <a href=\"Book/Moby\">Moby</a> |\n           <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n           <a href=\"Book/Gatsby\">Gatsby</a> |\n           <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n           <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n           <div ng-view></div>\n           <hr />\n\n           <pre>$location.path() = {{$location.path()}}</pre>\n           <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n           <pre>$route.current.params = {{$route.current.params}}</pre>\n           <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n           <pre>$routeParams = {{$routeParams}}</pre>\n         </div>\n       </file>\n\n       <file name=\"book.html\">\n         controller: {{name}}<br />\n         Book Id: {{params.bookId}}<br />\n       </file>\n\n       <file name=\"chapter.html\">\n         controller: {{name}}<br />\n         Book Id: {{params.bookId}}<br />\n         Chapter Id: {{params.chapterId}}\n       </file>\n\n       <file name=\"script.js\">\n         angular.module('ngView', [], function($routeProvider, $locationProvider) {\n           $routeProvider.when('/Book/:bookId', {\n             templateUrl: 'book.html',\n             controller: BookCntl,\n             resolve: {\n               // I will cause a 1 second delay\n               delay: function($q, $timeout) {\n                 var delay = $q.defer();\n                 $timeout(delay.resolve, 1000);\n                 return delay.promise;\n               }\n             }\n           });\n           $routeProvider.when('/Book/:bookId/ch/:chapterId', {\n             templateUrl: 'chapter.html',\n             controller: ChapterCntl\n           });\n\n           // configure html5 to get links working on jsfiddle\n           $locationProvider.html5Mode(true);\n         });\n\n         function MainCntl($scope, $route, $routeParams, $location) {\n           $scope.$route = $route;\n           $scope.$location = $location;\n           $scope.$routeParams = $routeParams;\n         }\n\n         function BookCntl($scope, $routeParams) {\n           $scope.name = \"BookCntl\";\n           $scope.params = $routeParams;\n         }\n\n         function ChapterCntl($scope, $routeParams) {\n           $scope.name = \"ChapterCntl\";\n           $scope.params = $routeParams;\n         }\n       </file>\n\n       <file name=\"scenario.js\">\n         it('should load and compile correct template', function() {\n           element('a:contains(\"Moby: Ch1\")').click();\n           var content = element('.doc-example-live [ng-view]').text();\n           expect(content).toMatch(/controller\\: ChapterCntl/);\n           expect(content).toMatch(/Book Id\\: Moby/);\n           expect(content).toMatch(/Chapter Id\\: 1/);\n\n           element('a:contains(\"Scarlet\")').click();\n           sleep(2); // promises are not part of scenario waiting\n           content = element('.doc-example-live [ng-view]').text();\n           expect(content).toMatch(/controller\\: BookCntl/);\n           expect(content).toMatch(/Book Id\\: Scarlet/);\n         });\n       </file>\n     </example>\n     */\n\n    /**\n     * @ngdoc event\n     * @name ng.$route#$routeChangeStart\n     * @eventOf ng.$route\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted before a route change. At this  point the route services starts\n     * resolving all of the dependencies needed for the route change to occurs.\n     * Typically this involves fetching the view template as well as any dependencies\n     * defined in `resolve` route property. Once  all of the dependencies are resolved\n     * `$routeChangeSuccess` is fired.\n     *\n     * @param {Route} next Future route information.\n     * @param {Route} current Current route information.\n     */\n\n    /**\n     * @ngdoc event\n     * @name ng.$route#$routeChangeSuccess\n     * @eventOf ng.$route\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted after a route dependencies are resolved.\n     * {@link ng.directive:ngView ngView} listens for the directive\n     * to instantiate the controller and render the view.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} current Current route information.\n     * @param {Route|Undefined} previous Previous route information, or undefined if current is first route entered.\n     */\n\n    /**\n     * @ngdoc event\n     * @name ng.$route#$routeChangeError\n     * @eventOf ng.$route\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted if any of the resolve promises are rejected.\n     *\n     * @param {Route} current Current route information.\n     * @param {Route} previous Previous route information.\n     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.\n     */\n\n    /**\n     * @ngdoc event\n     * @name ng.$route#$routeUpdate\n     * @eventOf ng.$route\n     * @eventType broadcast on root scope\n     * @description\n     *\n     * The `reloadOnSearch` property has been set to false, and we are reusing the same\n     * instance of the Controller.\n     */\n\n    var forceReload = false,\n        $route = {\n          routes: routes,\n\n          /**\n           * @ngdoc method\n           * @name ng.$route#reload\n           * @methodOf ng.$route\n           *\n           * @description\n           * Causes `$route` service to reload the current route even if\n           * {@link ng.$location $location} hasn't changed.\n           *\n           * As a result of that, {@link ng.directive:ngView ngView}\n           * creates new scope, reinstantiates the controller.\n           */\n          reload: function() {\n            forceReload = true;\n            $rootScope.$evalAsync(updateRoute);\n          }\n        };\n\n    $rootScope.$on('$locationChangeSuccess', updateRoute);\n\n    return $route;\n\n    /////////////////////////////////////////////////////\n\n    /**\n     * @param on {string} current url\n     * @param when {string} route when template to match the url against\n     * @param whenProperties {Object} properties to define when's matching behavior\n     * @return {?Object}\n     */\n    function switchRouteMatcher(on, when, whenProperties) {\n      // TODO(i): this code is convoluted and inefficient, we should construct the route matching\n      //   regex only once and then reuse it\n\n      // Escape regexp special characters.\n      when = '^' + when.replace(/[-\\/\\\\^$:*+?.()|[\\]{}]/g, \"\\\\$&\") + '$';\n\n      var regex = '',\n          params = [],\n          dst = {};\n\n      var re = /\\\\([:*])(\\w+)/g,\n          paramMatch,\n          lastMatchedIndex = 0;\n\n      while ((paramMatch = re.exec(when)) !== null) {\n        // Find each :param in `when` and replace it with a capturing group.\n        // Append all other sections of when unchanged.\n        regex += when.slice(lastMatchedIndex, paramMatch.index);\n        switch(paramMatch[1]) {\n          case ':':\n            regex += '([^\\\\/]*)';\n            break;\n          case '*':\n            regex += '(.*)';\n            break;\n        }\n        params.push(paramMatch[2]);\n        lastMatchedIndex = re.lastIndex;\n      }\n      // Append trailing path part.\n      regex += when.substr(lastMatchedIndex);\n\n      var match = on.match(new RegExp(regex, whenProperties.caseInsensitiveMatch ? 'i' : ''));\n      if (match) {\n        forEach(params, function(name, index) {\n          dst[name] = match[index + 1];\n        });\n      }\n      return match ? dst : null;\n    }\n\n    function updateRoute() {\n      var next = parseRoute(),\n          last = $route.current;\n\n      if (next && last && next.$$route === last.$$route\n          && equals(next.pathParams, last.pathParams) && !next.reloadOnSearch && !forceReload) {\n        last.params = next.params;\n        copy(last.params, $routeParams);\n        $rootScope.$broadcast('$routeUpdate', last);\n      } else if (next || last) {\n        forceReload = false;\n        $rootScope.$broadcast('$routeChangeStart', next, last);\n        $route.current = next;\n        if (next) {\n          if (next.redirectTo) {\n            if (isString(next.redirectTo)) {\n              $location.path(interpolate(next.redirectTo, next.params)).search(next.params)\n                       .replace();\n            } else {\n              $location.url(next.redirectTo(next.pathParams, $location.path(), $location.search()))\n                       .replace();\n            }\n          }\n        }\n\n        $q.when(next).\n          then(function() {\n            if (next) {\n              var locals = extend({}, next.resolve),\n                  template;\n\n              forEach(locals, function(value, key) {\n                locals[key] = isString(value) ? $injector.get(value) : $injector.invoke(value);\n              });\n\n              if (isDefined(template = next.template)) {\n                if (isFunction(template)) {\n                  template = template(next.params);\n                }\n              } else if (isDefined(template = next.templateUrl)) {\n                if (isFunction(template)) {\n                  template = template(next.params);\n                }\n                if (isDefined(template)) {\n                  next.loadedTemplateUrl = template;\n                  template = $http.get(template, {cache: $templateCache}).\n                      then(function(response) { return response.data; });\n                }\n              }\n              if (isDefined(template)) {\n                locals['$template'] = template;\n              }\n              return $q.all(locals);\n            }\n          }).\n          // after route change\n          then(function(locals) {\n            if (next == $route.current) {\n              if (next) {\n                next.locals = locals;\n                copy(next.params, $routeParams);\n              }\n              $rootScope.$broadcast('$routeChangeSuccess', next, last);\n            }\n          }, function(error) {\n            if (next == $route.current) {\n              $rootScope.$broadcast('$routeChangeError', next, last, error);\n            }\n          });\n      }\n    }\n\n\n    /**\n     * @returns the current active route, by matching it against the URL\n     */\n    function parseRoute() {\n      // Match a route\n      var params, match;\n      forEach(routes, function(route, path) {\n        if (!match && (params = switchRouteMatcher($location.path(), path, route))) {\n          match = inherit(route, {\n            params: extend({}, $location.search(), params),\n            pathParams: params});\n          match.$$route = route;\n        }\n      });\n      // No route matched; fallback to \"otherwise\" route\n      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});\n    }\n\n    /**\n     * @returns interpolation of the redirect path with the parameters\n     */\n    function interpolate(string, params) {\n      var result = [];\n      forEach((string||'').split(':'), function(segment, i) {\n        if (i == 0) {\n          result.push(segment);\n        } else {\n          var segmentMatch = segment.match(/(\\w+)(.*)/);\n          var key = segmentMatch[1];\n          result.push(params[key]);\n          result.push(segmentMatch[2] || '');\n          delete params[key];\n        }\n      });\n      return result.join('');\n    }\n  }];\n}\n\n/**\n * @ngdoc object\n * @name ng.$routeParams\n * @requires $route\n *\n * @description\n * Current set of route parameters. The route parameters are a combination of the\n * {@link ng.$location $location} `search()`, and `path()`. The `path` parameters\n * are extracted when the {@link ng.$route $route} path is matched.\n *\n * In case of parameter name collision, `path` params take precedence over `search` params.\n *\n * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n * (but its properties will likely change) even when a route change occurs.\n *\n * @example\n * <pre>\n *  // Given:\n *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n *  // Route: /Chapter/:chapterId/Section/:sectionId\n *  //\n *  // Then\n *  $routeParams ==> {chapterId:1, sectionId:2, search:'moby'}\n * </pre>\n */\nfunction $RouteParamsProvider() {\n  this.$get = valueFn({});\n}\n\n/**\n * DESIGN NOTES\n *\n * The design decisions behind the scope are heavily favored for speed and memory consumption.\n *\n * The typical use of scope is to watch the expressions, which most of the time return the same\n * value as last time so we optimize the operation.\n *\n * Closures construction is expensive in terms of speed as well as memory:\n *   - No closures, instead use prototypical inheritance for API\n *   - Internal state needs to be stored on scope directly, which means that private state is\n *     exposed as $$____ properties\n *\n * Loop operations are optimized by using while(count--) { ... }\n *   - this means that in order to keep the same order of execution as addition we have to add\n *     items to the array at the beginning (shift) instead of at the end (push)\n *\n * Child scopes are created and removed often\n *   - Using an array would be slow since inserts in middle are expensive so we use linked list\n *\n * There are few watches then a lot of observers. This is why you don't want the observer to be\n * implemented in the same way as watch. Watch requires return of initialization function which\n * are expensive to construct.\n */\n\n\n/**\n * @ngdoc object\n * @name ng.$rootScopeProvider\n * @description\n *\n * Provider for the $rootScope service.\n */\n\n/**\n * @ngdoc function\n * @name ng.$rootScopeProvider#digestTtl\n * @methodOf ng.$rootScopeProvider\n * @description\n *\n * Sets the number of digest iterations the scope should attempt to execute before giving up and\n * assuming that the model is unstable.\n *\n * The current default is 10 iterations.\n *\n * @param {number} limit The number of digest iterations.\n */\n\n\n/**\n * @ngdoc object\n * @name ng.$rootScope\n * @description\n *\n * Every application has a single root {@link ng.$rootScope.Scope scope}.\n * All other scopes are child scopes of the root scope. Scopes provide mechanism for watching the model and provide\n * event processing life-cycle. See {@link guide/scope developer guide on scopes}.\n */\nfunction $RootScopeProvider(){\n  var TTL = 10;\n\n  this.digestTtl = function(value) {\n    if (arguments.length) {\n      TTL = value;\n    }\n    return TTL;\n  };\n\n  this.$get = ['$injector', '$exceptionHandler', '$parse',\n      function( $injector,   $exceptionHandler,   $parse) {\n\n    /**\n     * @ngdoc function\n     * @name ng.$rootScope.Scope\n     *\n     * @description\n     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the\n     * {@link AUTO.$injector $injector}. Child scopes are created using the\n     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when\n     * compiled HTML template is executed.)\n     *\n     * Here is a simple scope snippet to show how you can interact with the scope.\n     * <pre>\n     * <file src=\"./test/ng/rootScopeSpec.js\" tag=\"docs1\" />\n     * </pre>\n     *\n     * # Inheritance\n     * A scope can inherit from a parent scope, as in this example:\n     * <pre>\n         var parent = $rootScope;\n         var child = parent.$new();\n\n         parent.salutation = \"Hello\";\n         child.name = \"World\";\n         expect(child.salutation).toEqual('Hello');\n\n         child.salutation = \"Welcome\";\n         expect(child.salutation).toEqual('Welcome');\n         expect(parent.salutation).toEqual('Hello');\n     * </pre>\n     *\n     *\n     * @param {Object.<string, function()>=} providers Map of service factory which need to be provided\n     *     for the current scope. Defaults to {@link ng}.\n     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should\n     *     append/override services provided by `providers`. This is handy when unit-testing and having\n     *     the need to override a default service.\n     * @returns {Object} Newly created scope.\n     *\n     */\n    function Scope() {\n      this.$id = nextUid();\n      this.$$phase = this.$parent = this.$$watchers =\n                     this.$$nextSibling = this.$$prevSibling =\n                     this.$$childHead = this.$$childTail = null;\n      this['this'] = this.$root =  this;\n      this.$$destroyed = false;\n      this.$$asyncQueue = [];\n      this.$$listeners = {};\n      this.$$isolateBindings = {};\n    }\n\n    /**\n     * @ngdoc property\n     * @name ng.$rootScope.Scope#$id\n     * @propertyOf ng.$rootScope.Scope\n     * @returns {number} Unique scope ID (monotonically increasing alphanumeric sequence) useful for\n     *   debugging.\n     */\n\n\n    Scope.prototype = {\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$new\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Creates a new child {@link ng.$rootScope.Scope scope}.\n       *\n       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} and\n       * {@link ng.$rootScope.Scope#$digest $digest()} events. The scope can be removed from the scope\n       * hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.\n       *\n       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is desired for\n       * the scope and its child scopes to be permanently detached from the parent and thus stop\n       * participating in model change detection and listener notification by invoking.\n       *\n       * @param {boolean} isolate if true then the scope does not prototypically inherit from the\n       *         parent scope. The scope is isolated, as it can not see parent scope properties.\n       *         When creating widgets it is useful for the widget to not accidentally read parent\n       *         state.\n       *\n       * @returns {Object} The newly created child scope.\n       *\n       */\n      $new: function(isolate) {\n        var Child,\n            child;\n\n        if (isFunction(isolate)) {\n          // TODO: remove at some point\n          throw Error('API-CHANGE: Use $controller to instantiate controllers.');\n        }\n        if (isolate) {\n          child = new Scope();\n          child.$root = this.$root;\n        } else {\n          Child = function() {}; // should be anonymous; This is so that when the minifier munges\n            // the name it does not become random set of chars. These will then show up as class\n            // name in the debugger.\n          Child.prototype = this;\n          child = new Child();\n          child.$id = nextUid();\n        }\n        child['this'] = child;\n        child.$$listeners = {};\n        child.$parent = this;\n        child.$$watchers = child.$$nextSibling = child.$$childHead = child.$$childTail = null;\n        child.$$prevSibling = this.$$childTail;\n        if (this.$$childHead) {\n          this.$$childTail.$$nextSibling = child;\n          this.$$childTail = child;\n        } else {\n          this.$$childHead = this.$$childTail = child;\n        }\n        return child;\n      },\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$watch\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.\n       *\n       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest $digest()} and\n       *   should return the value which will be watched. (Since {@link ng.$rootScope.Scope#$digest $digest()}\n       *   reruns when it detects changes the `watchExpression` can execute multiple times per\n       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)\n       * - The `listener` is called only when the value from the current `watchExpression` and the\n       *   previous call to `watchExpression` are not equal (with the exception of the initial run,\n       *   see below). The inequality is determined according to\n       *   {@link angular.equals} function. To save the value of the object for later comparison, the\n       *   {@link angular.copy} function is used. It also means that watching complex options will\n       *   have adverse memory and performance implications.\n       * - The watch `listener` may change the model, which may trigger other `listener`s to fire. This\n       *   is achieved by rerunning the watchers until no changes are detected. The rerun iteration\n       *   limit is 10 to prevent an infinite loop deadlock.\n       *\n       *\n       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,\n       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`\n       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a change is\n       * detected, be prepared for multiple calls to your listener.)\n       *\n       * After a watcher is registered with the scope, the `listener` fn is called asynchronously\n       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the\n       * watcher. In rare cases, this is undesirable because the listener is called when the result\n       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you\n       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the\n       * listener was called due to initialization.\n       *\n       *\n       * # Example\n       * <pre>\n           // let's assume that scope was dependency injected as the $rootScope\n           var scope = $rootScope;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) { scope.counter = scope.counter + 1; });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // no variable change\n           expect(scope.counter).toEqual(0);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(1);\n       * </pre>\n       *\n       *\n       *\n       * @param {(function()|string)} watchExpression Expression that is evaluated on each\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers a\n       *    call to the `listener`.\n       *\n       *    - `string`: Evaluated as {@link guide/expression expression}\n       *    - `function(scope)`: called with current `scope` as a parameter.\n       * @param {(function()|string)=} listener Callback called whenever the return value of\n       *   the `watchExpression` changes.\n       *\n       *    - `string`: Evaluated as {@link guide/expression expression}\n       *    - `function(newValue, oldValue, scope)`: called with current and previous values as parameters.\n       *\n       * @param {boolean=} objectEquality Compare object for equality rather than for reference.\n       * @returns {function()} Returns a deregistration function for this listener.\n       */\n      $watch: function(watchExp, listener, objectEquality) {\n        var scope = this,\n            get = compileToFn(watchExp, 'watch'),\n            array = scope.$$watchers,\n            watcher = {\n              fn: listener,\n              last: initWatchVal,\n              get: get,\n              exp: watchExp,\n              eq: !!objectEquality\n            };\n\n        // in the case user pass string, we need to compile it, do we really need this ?\n        if (!isFunction(listener)) {\n          var listenFn = compileToFn(listener || noop, 'listener');\n          watcher.fn = function(newVal, oldVal, scope) {listenFn(scope);};\n        }\n\n        if (typeof watchExp == 'string' && get.constant) {\n          var originalFn = watcher.fn;\n          watcher.fn = function(newVal, oldVal, scope) {\n            originalFn.call(this, newVal, oldVal, scope);\n            arrayRemove(array, watcher);\n          };\n        }\n\n        if (!array) {\n          array = scope.$$watchers = [];\n        }\n        // we use unshift since we use a while loop in $digest for speed.\n        // the while loop reads in reverse order.\n        array.unshift(watcher);\n\n        return function() {\n          arrayRemove(array, watcher);\n        };\n      },\n\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$watchCollection\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Shallow watches the properties of an object and fires whenever any of the properties change\n       * (for arrays this implies watching the array items, for object maps this implies watching the properties).\n       * If a change is detected the `listener` callback is fired.\n       *\n       * - The `obj` collection is observed via standard $watch operation and is examined on every call to $digest() to\n       *   see if any items have been added, removed, or moved.\n       * - The `listener` is called whenever anything within the `obj` has changed. Examples include adding new items\n       *   into the object or array, removing and moving items around.\n       *\n       *\n       * # Example\n       * <pre>\n          $scope.names = ['igor', 'matias', 'misko', 'james'];\n          $scope.dataCount = 4;\n\n          $scope.$watchCollection('names', function(newNames, oldNames) {\n            $scope.dataCount = newNames.length;\n          });\n\n          expect($scope.dataCount).toEqual(4);\n          $scope.$digest();\n\n          //still at 4 ... no changes\n          expect($scope.dataCount).toEqual(4);\n\n          $scope.names.pop();\n          $scope.$digest();\n\n          //now there's been a change\n          expect($scope.dataCount).toEqual(3);\n       * </pre>\n       *\n       *\n       * @param {string|Function(scope)} obj Evaluated as {@link guide/expression expression}. The expression value\n       *    should evaluate to an object or an array which is observed on each\n       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the collection will trigger\n       *    a call to the `listener`.\n       *\n       * @param {function(newCollection, oldCollection, scope)} listener a callback function that is fired with both\n       *    the `newCollection` and `oldCollection` as parameters.\n       *    The `newCollection` object is the newly modified data obtained from the `obj` expression and the\n       *    `oldCollection` object is a copy of the former collection data.\n       *    The `scope` refers to the current scope.\n       *\n       * @returns {function()} Returns a de-registration function for this listener. When the de-registration function is executed\n       * then the internal watch operation is terminated.\n       */\n      $watchCollection: function(obj, listener) {\n        var self = this;\n        var oldValue;\n        var newValue;\n        var changeDetected = 0;\n        var objGetter = $parse(obj);\n        var internalArray = [];\n        var internalObject = {};\n        var oldLength = 0;\n\n        function $watchCollectionWatch() {\n          newValue = objGetter(self);\n          var newLength, key;\n\n          if (!isObject(newValue)) {\n            if (oldValue !== newValue) {\n              oldValue = newValue;\n              changeDetected++;\n            }\n          } else if (isArrayLike(newValue)) {\n            if (oldValue !== internalArray) {\n              // we are transitioning from something which was not an array into array.\n              oldValue = internalArray;\n              oldLength = oldValue.length = 0;\n              changeDetected++;\n            }\n\n            newLength = newValue.length;\n\n            if (oldLength !== newLength) {\n              // if lengths do not match we need to trigger change notification\n              changeDetected++;\n              oldValue.length = oldLength = newLength;\n            }\n            // copy the items to oldValue and look for changes.\n            for (var i = 0; i < newLength; i++) {\n              if (oldValue[i] !== newValue[i]) {\n                changeDetected++;\n                oldValue[i] = newValue[i];\n              }\n            }\n          } else {\n            if (oldValue !== internalObject) {\n              // we are transitioning from something which was not an object into object.\n              oldValue = internalObject = {};\n              oldLength = 0;\n              changeDetected++;\n            }\n            // copy the items to oldValue and look for changes.\n            newLength = 0;\n            for (key in newValue) {\n              if (newValue.hasOwnProperty(key)) {\n                newLength++;\n                if (oldValue.hasOwnProperty(key)) {\n                  if (oldValue[key] !== newValue[key]) {\n                    changeDetected++;\n                    oldValue[key] = newValue[key];\n                  }\n                } else {\n                  oldLength++;\n                  oldValue[key] = newValue[key];\n                  changeDetected++;\n                }\n              }\n            }\n            if (oldLength > newLength) {\n              // we used to have more keys, need to find them and destroy them.\n              changeDetected++;\n              for(key in oldValue) {\n                if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {\n                  oldLength--;\n                  delete oldValue[key];\n                }\n              }\n            }\n          }\n          return changeDetected;\n        }\n\n        function $watchCollectionAction() {\n          listener(newValue, oldValue, self);\n        }\n\n        return this.$watch($watchCollectionWatch, $watchCollectionAction);\n      },\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$digest\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and its children.\n       * Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change the model, the\n       * `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers} until no more listeners are\n       * firing. This means that it is possible to get into an infinite loop. This function will throw\n       * `'Maximum iteration limit exceeded.'` if the number of iterations exceeds 10.\n       *\n       * Usually you don't call `$digest()` directly in\n       * {@link ng.directive:ngController controllers} or in\n       * {@link ng.$compileProvider#directive directives}.\n       * Instead a call to {@link ng.$rootScope.Scope#$apply $apply()} (typically from within a\n       * {@link ng.$compileProvider#directive directives}) will force a `$digest()`.\n       *\n       * If you want to be notified whenever `$digest()` is called,\n       * you can register a `watchExpression` function  with {@link ng.$rootScope.Scope#$watch $watch()}\n       * with no `listener`.\n       *\n       * You may have a need to call `$digest()` from within unit-tests, to simulate the scope\n       * life-cycle.\n       *\n       * # Example\n       * <pre>\n           var scope = ...;\n           scope.name = 'misko';\n           scope.counter = 0;\n\n           expect(scope.counter).toEqual(0);\n           scope.$watch('name', function(newValue, oldValue) {\n             scope.counter = scope.counter + 1;\n           });\n           expect(scope.counter).toEqual(0);\n\n           scope.$digest();\n           // no variable change\n           expect(scope.counter).toEqual(0);\n\n           scope.name = 'adam';\n           scope.$digest();\n           expect(scope.counter).toEqual(1);\n       * </pre>\n       *\n       */\n      $digest: function() {\n        var watch, value, last,\n            watchers,\n            asyncQueue = this.$$asyncQueue,\n            length,\n            dirty, ttl = TTL,\n            next, current, target = this,\n            watchLog = [],\n            logIdx, logMsg;\n\n        beginPhase('$digest');\n\n        do { // \"while dirty\" loop\n          dirty = false;\n          current = target;\n\n          while(asyncQueue.length) {\n            try {\n              current.$eval(asyncQueue.shift());\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          }\n\n          do { // \"traverse the scopes\" loop\n            if ((watchers = current.$$watchers)) {\n              // process our watches\n              length = watchers.length;\n              while (length--) {\n                try {\n                  watch = watchers[length];\n                  // Most common watches are on primitives, in which case we can short\n                  // circuit it with === operator, only when === fails do we use .equals\n                  if ((value = watch.get(current)) !== (last = watch.last) &&\n                      !(watch.eq\n                          ? equals(value, last)\n                          : (typeof value == 'number' && typeof last == 'number'\n                             && isNaN(value) && isNaN(last)))) {\n                    dirty = true;\n                    watch.last = watch.eq ? copy(value) : value;\n                    watch.fn(value, ((last === initWatchVal) ? value : last), current);\n                    if (ttl < 5) {\n                      logIdx = 4 - ttl;\n                      if (!watchLog[logIdx]) watchLog[logIdx] = [];\n                      logMsg = (isFunction(watch.exp))\n                          ? 'fn: ' + (watch.exp.name || watch.exp.toString())\n                          : watch.exp;\n                      logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);\n                      watchLog[logIdx].push(logMsg);\n                    }\n                  }\n                } catch (e) {\n                  $exceptionHandler(e);\n                }\n              }\n            }\n\n            // Insanity Warning: scope depth-first traversal\n            // yes, this code is a bit crazy, but it works and we have tests to prove it!\n            // this piece should be kept in sync with the traversal in $broadcast\n            if (!(next = (current.$$childHead || (current !== target && current.$$nextSibling)))) {\n              while(current !== target && !(next = current.$$nextSibling)) {\n                current = current.$parent;\n              }\n            }\n          } while ((current = next));\n\n          if(dirty && !(ttl--)) {\n            clearPhase();\n            throw Error(TTL + ' $digest() iterations reached. Aborting!\\n' +\n                'Watchers fired in the last 5 iterations: ' + toJson(watchLog));\n          }\n        } while (dirty || asyncQueue.length);\n\n        clearPhase();\n      },\n\n\n      /**\n       * @ngdoc event\n       * @name ng.$rootScope.Scope#$destroy\n       * @eventOf ng.$rootScope.Scope\n       * @eventType broadcast on scope being destroyed\n       *\n       * @description\n       * Broadcasted when a scope and its children are being destroyed.\n       */\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$destroy\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Removes the current scope (and all of its children) from the parent scope. Removal implies\n       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer\n       * propagate to the current scope and its children. Removal also implies that the current\n       * scope is eligible for garbage collection.\n       *\n       * The `$destroy()` is usually used by directives such as\n       * {@link ng.directive:ngRepeat ngRepeat} for managing the\n       * unrolling of the loop.\n       *\n       * Just before a scope is destroyed a `$destroy` event is broadcasted on this scope.\n       * Application code can register a `$destroy` event handler that will give it chance to\n       * perform any necessary cleanup.\n       */\n      $destroy: function() {\n        // we can't destroy the root scope or a scope that has been already destroyed\n        if ($rootScope == this || this.$$destroyed) return;\n        var parent = this.$parent;\n\n        this.$broadcast('$destroy');\n        this.$$destroyed = true;\n\n        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;\n        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;\n        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;\n        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;\n\n        // This is bogus code that works around Chrome's GC leak\n        // see: https://github.com/angular/angular.js/issues/1313#issuecomment-10378451\n        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =\n            this.$$childTail = null;\n      },\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$eval\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Executes the `expression` on the current scope returning the result. Any exceptions in the\n       * expression are propagated (uncaught). This is useful when evaluating Angular expressions.\n       *\n       * # Example\n       * <pre>\n           var scope = ng.$rootScope.Scope();\n           scope.a = 1;\n           scope.b = 2;\n\n           expect(scope.$eval('a+b')).toEqual(3);\n           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);\n       * </pre>\n       *\n       * @param {(string|function())=} expression An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with the current `scope` parameter.\n       *\n       * @returns {*} The result of evaluating the expression.\n       */\n      $eval: function(expr, locals) {\n        return $parse(expr)(this, locals);\n      },\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$evalAsync\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Executes the expression on the current scope at a later point in time.\n       *\n       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only that:\n       *\n       *   - it will execute in the current script execution context (before any DOM rendering).\n       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after\n       *     `expression` execution.\n       *\n       * Any exceptions from the execution of the expression are forwarded to the\n       * {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {(string|function())=} expression An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with the current `scope` parameter.\n       *\n       */\n      $evalAsync: function(expr) {\n        this.$$asyncQueue.push(expr);\n      },\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$apply\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * `$apply()` is used to execute an expression in angular from outside of the angular framework.\n       * (For example from browser DOM events, setTimeout, XHR or third party libraries).\n       * Because we are calling into the angular framework we need to perform proper scope life-cycle\n       * of {@link ng.$exceptionHandler exception handling},\n       * {@link ng.$rootScope.Scope#$digest executing watches}.\n       *\n       * ## Life cycle\n       *\n       * # Pseudo-Code of `$apply()`\n       * <pre>\n           function $apply(expr) {\n             try {\n               return $eval(expr);\n             } catch (e) {\n               $exceptionHandler(e);\n             } finally {\n               $root.$digest();\n             }\n           }\n       * </pre>\n       *\n       *\n       * Scope's `$apply()` method transitions through the following stages:\n       *\n       * 1. The {@link guide/expression expression} is executed using the\n       *    {@link ng.$rootScope.Scope#$eval $eval()} method.\n       * 2. Any exceptions from the execution of the expression are forwarded to the\n       *    {@link ng.$exceptionHandler $exceptionHandler} service.\n       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the expression\n       *    was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.\n       *\n       *\n       * @param {(string|function())=} exp An angular expression to be executed.\n       *\n       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.\n       *    - `function(scope)`: execute the function with current `scope` parameter.\n       *\n       * @returns {*} The result of evaluating the expression.\n       */\n      $apply: function(expr) {\n        try {\n          beginPhase('$apply');\n          return this.$eval(expr);\n        } catch (e) {\n          $exceptionHandler(e);\n        } finally {\n          clearPhase();\n          try {\n            $rootScope.$digest();\n          } catch (e) {\n            $exceptionHandler(e);\n            throw e;\n          }\n        }\n      },\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$on\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for discussion of\n       * event life cycle.\n       *\n       * The event listener function format is: `function(event, args...)`. The `event` object\n       * passed into the listener has the following attributes:\n       *\n       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or `$broadcast`-ed.\n       *   - `currentScope` - `{Scope}`: the current scope which is handling the event.\n       *   - `name` - `{string}`: Name of the event.\n       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel further event\n       *     propagation (available only for events that were `$emit`-ed).\n       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag to true.\n       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.\n       *\n       * @param {string} name Event name to listen on.\n       * @param {function(event, args...)} listener Function to call when the event is emitted.\n       * @returns {function()} Returns a deregistration function for this listener.\n       */\n      $on: function(name, listener) {\n        var namedListeners = this.$$listeners[name];\n        if (!namedListeners) {\n          this.$$listeners[name] = namedListeners = [];\n        }\n        namedListeners.push(listener);\n\n        return function() {\n          namedListeners[indexOf(namedListeners, listener)] = null;\n        };\n      },\n\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$emit\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Dispatches an event `name` upwards through the scope hierarchy notifying the\n       * registered {@link ng.$rootScope.Scope#$on} listeners.\n       *\n       * The event life cycle starts at the scope on which `$emit` was called. All\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.\n       * Afterwards, the event traverses upwards toward the root scope and calls all registered\n       * listeners along the way. The event will stop propagating if one of the listeners cancels it.\n       *\n       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {string} name Event name to emit.\n       * @param {...*} args Optional set of arguments which will be passed onto the event listeners.\n       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}\n       */\n      $emit: function(name, args) {\n        var empty = [],\n            namedListeners,\n            scope = this,\n            stopPropagation = false,\n            event = {\n              name: name,\n              targetScope: scope,\n              stopPropagation: function() {stopPropagation = true;},\n              preventDefault: function() {\n                event.defaultPrevented = true;\n              },\n              defaultPrevented: false\n            },\n            listenerArgs = concat([event], arguments, 1),\n            i, length;\n\n        do {\n          namedListeners = scope.$$listeners[name] || empty;\n          event.currentScope = scope;\n          for (i=0, length=namedListeners.length; i<length; i++) {\n\n            // if listeners were deregistered, defragment the array\n            if (!namedListeners[i]) {\n              namedListeners.splice(i, 1);\n              i--;\n              length--;\n              continue;\n            }\n            try {\n              namedListeners[i].apply(null, listenerArgs);\n              if (stopPropagation) return event;\n            } catch (e) {\n              $exceptionHandler(e);\n            }\n          }\n          //traverse upwards\n          scope = scope.$parent;\n        } while (scope);\n\n        return event;\n      },\n\n\n      /**\n       * @ngdoc function\n       * @name ng.$rootScope.Scope#$broadcast\n       * @methodOf ng.$rootScope.Scope\n       * @function\n       *\n       * @description\n       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the\n       * registered {@link ng.$rootScope.Scope#$on} listeners.\n       *\n       * The event life cycle starts at the scope on which `$broadcast` was called. All\n       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get notified.\n       * Afterwards, the event propagates to all direct and indirect scopes of the current scope and\n       * calls all registered listeners along the way. The event cannot be canceled.\n       *\n       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed\n       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.\n       *\n       * @param {string} name Event name to broadcast.\n       * @param {...*} args Optional set of arguments which will be passed onto the event listeners.\n       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}\n       */\n      $broadcast: function(name, args) {\n        var target = this,\n            current = target,\n            next = target,\n            event = {\n              name: name,\n              targetScope: target,\n              preventDefault: function() {\n                event.defaultPrevented = true;\n              },\n              defaultPrevented: false\n            },\n            listenerArgs = concat([event], arguments, 1),\n            listeners, i, length;\n\n        //down while you can, then up and next sibling or up and next sibling until back at root\n        do {\n          current = next;\n          event.currentScope = current;\n          listeners = current.$$listeners[name] || [];\n          for (i=0, length = listeners.length; i<length; i++) {\n            // if listeners were deregistered, defragment the array\n            if (!listeners[i]) {\n              listeners.splice(i, 1);\n              i--;\n              length--;\n              continue;\n            }\n\n            try {\n              listeners[i].apply(null, listenerArgs);\n            } catch(e) {\n              $exceptionHandler(e);\n            }\n          }\n\n          // Insanity Warning: scope depth-first traversal\n          // yes, this code is a bit crazy, but it works and we have tests to prove it!\n          // this piece should be kept in sync with the traversal in $digest\n          if (!(next = (current.$$childHead || (current !== target && current.$$nextSibling)))) {\n            while(current !== target && !(next = current.$$nextSibling)) {\n              current = current.$parent;\n            }\n          }\n        } while ((current = next));\n\n        return event;\n      }\n    };\n\n    var $rootScope = new Scope();\n\n    return $rootScope;\n\n\n    function beginPhase(phase) {\n      if ($rootScope.$$phase) {\n        throw Error($rootScope.$$phase + ' already in progress');\n      }\n\n      $rootScope.$$phase = phase;\n    }\n\n    function clearPhase() {\n      $rootScope.$$phase = null;\n    }\n\n    function compileToFn(exp, name) {\n      var fn = $parse(exp);\n      assertArgFn(fn, name);\n      return fn;\n    }\n\n    /**\n     * function used as an initial value for watchers.\n     * because it's unique we can easily tell it apart from other values\n     */\n    function initWatchVal() {}\n  }];\n}\n\n/**\n * !!! This is an undocumented \"private\" service !!!\n *\n * @name ng.$sniffer\n * @requires $window\n * @requires $document\n *\n * @property {boolean} history Does the browser support html5 history api ?\n * @property {boolean} hashchange Does the browser support hashchange event ?\n * @property {boolean} transitions Does the browser support CSS transition events ?\n * @property {boolean} animations Does the browser support CSS animation events ?\n *\n * @description\n * This is very simple implementation of testing browser's features.\n */\nfunction $SnifferProvider() {\n  this.$get = ['$window', '$document', function($window, $document) {\n    var eventSupport = {},\n        android = int((/android (\\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),\n        document = $document[0] || {},\n        vendorPrefix,\n        vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/,\n        bodyStyle = document.body && document.body.style,\n        transitions = false,\n        animations = false,\n        match;\n\n    if (bodyStyle) {\n      for(var prop in bodyStyle) {\n        if(match = vendorRegex.exec(prop)) {\n          vendorPrefix = match[0];\n          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);\n          break;\n        }\n      }\n      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));\n      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));\n    }\n\n\n    return {\n      // Android has history.pushState, but it does not update location correctly\n      // so let's not use the history API at all.\n      // http://code.google.com/p/android/issues/detail?id=17471\n      // https://github.com/angular/angular.js/issues/904\n      history: !!($window.history && $window.history.pushState && !(android < 4)),\n      hashchange: 'onhashchange' in $window &&\n                  // IE8 compatible mode lies\n                  (!document.documentMode || document.documentMode > 7),\n      hasEvent: function(event) {\n        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have\n        // it. In particular the event is not fired when backspace or delete key are pressed or\n        // when cut operation is performed.\n        if (event == 'input' && msie == 9) return false;\n\n        if (isUndefined(eventSupport[event])) {\n          var divElm = document.createElement('div');\n          eventSupport[event] = 'on' + event in divElm;\n        }\n\n        return eventSupport[event];\n      },\n      csp: document.securityPolicy ? document.securityPolicy.isActive : false,\n      vendorPrefix: vendorPrefix,\n      transitions : transitions,\n      animations : animations\n    };\n  }];\n}\n\n/**\n * @ngdoc object\n * @name ng.$window\n *\n * @description\n * A reference to the browser's `window` object. While `window`\n * is globally available in JavaScript, it causes testability problems, because\n * it is a global variable. In angular we always refer to it through the\n * `$window` service, so it may be overridden, removed or mocked for testing.\n *\n * All expressions are evaluated with respect to current scope so they don't\n * suffer from window globality.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope, $window) {\n           $scope.$window = $window;\n           $scope.greeting = 'Hello, World!';\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <input type=\"text\" ng-model=\"greeting\" />\n         <button ng-click=\"$window.alert(greeting)\">ALERT</button>\n       </div>\n     </doc:source>\n     <doc:scenario>\n      it('should display the greeting in the input box', function() {\n       input('greeting').enter('Hello, E2E Tests');\n       // If we click the button it will block the test runner\n       // element(':button').click();\n      });\n     </doc:scenario>\n   </doc:example>\n */\nfunction $WindowProvider(){\n  this.$get = valueFn(window);\n}\n\n/**\n * Parse headers into key value object\n *\n * @param {string} headers Raw headers as a string\n * @returns {Object} Parsed headers as key value object\n */\nfunction parseHeaders(headers) {\n  var parsed = {}, key, val, i;\n\n  if (!headers) return parsed;\n\n  forEach(headers.split('\\n'), function(line) {\n    i = line.indexOf(':');\n    key = lowercase(trim(line.substr(0, i)));\n    val = trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key]) {\n        parsed[key] += ', ' + val;\n      } else {\n        parsed[key] = val;\n      }\n    }\n  });\n\n  return parsed;\n}\n\n\nvar IS_SAME_DOMAIN_URL_MATCH = /^(([^:]+):)?\\/\\/(\\w+:{0,1}\\w*@)?([\\w\\.-]*)?(:([0-9]+))?(.*)$/;\n\n\n/**\n * Parse a request and location URL and determine whether this is a same-domain request.\n *\n * @param {string} requestUrl The url of the request.\n * @param {string} locationUrl The current browser location url.\n * @returns {boolean} Whether the request is for the same domain.\n */\nfunction isSameDomain(requestUrl, locationUrl) {\n  var match = IS_SAME_DOMAIN_URL_MATCH.exec(requestUrl);\n  // if requestUrl is relative, the regex does not match.\n  if (match == null) return true;\n\n  var domain1 = {\n      protocol: match[2],\n      host: match[4],\n      port: int(match[6]) || DEFAULT_PORTS[match[2]] || null,\n      // IE8 sets unmatched groups to '' instead of undefined.\n      relativeProtocol: match[2] === undefined || match[2] === ''\n    };\n\n  match = SERVER_MATCH.exec(locationUrl);\n  var domain2 = {\n      protocol: match[1],\n      host: match[3],\n      port: int(match[5]) || DEFAULT_PORTS[match[1]] || null\n    };\n\n  return (domain1.protocol == domain2.protocol || domain1.relativeProtocol) &&\n         domain1.host == domain2.host &&\n         (domain1.port == domain2.port || (domain1.relativeProtocol &&\n             domain2.port == DEFAULT_PORTS[domain2.protocol]));\n}\n\n\n/**\n * Returns a function that provides access to parsed headers.\n *\n * Headers are lazy parsed when first requested.\n * @see parseHeaders\n *\n * @param {(string|Object)} headers Headers to provide access to.\n * @returns {function(string=)} Returns a getter function which if called with:\n *\n *   - if called with single an argument returns a single header value or null\n *   - if called with no arguments returns an object containing all headers.\n */\nfunction headersGetter(headers) {\n  var headersObj = isObject(headers) ? headers : undefined;\n\n  return function(name) {\n    if (!headersObj) headersObj =  parseHeaders(headers);\n\n    if (name) {\n      return headersObj[lowercase(name)] || null;\n    }\n\n    return headersObj;\n  };\n}\n\n\n/**\n * Chain all given functions\n *\n * This function is used for both request and response transforming\n *\n * @param {*} data Data to transform.\n * @param {function(string=)} headers Http headers getter fn.\n * @param {(function|Array.<function>)} fns Function or an array of functions.\n * @returns {*} Transformed data.\n */\nfunction transformData(data, headers, fns) {\n  if (isFunction(fns))\n    return fns(data, headers);\n\n  forEach(fns, function(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n}\n\n\nfunction isSuccess(status) {\n  return 200 <= status && status < 300;\n}\n\n\nfunction $HttpProvider() {\n  var JSON_START = /^\\s*(\\[|\\{[^\\{])/,\n      JSON_END = /[\\}\\]]\\s*$/,\n      PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/,\n      CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': 'application/json;charset=utf-8'};\n\n  var defaults = this.defaults = {\n    // transform incoming response data\n    transformResponse: [function(data) {\n      if (isString(data)) {\n        // strip json vulnerability protection prefix\n        data = data.replace(PROTECTION_PREFIX, '');\n        if (JSON_START.test(data) && JSON_END.test(data))\n          data = fromJson(data, true);\n      }\n      return data;\n    }],\n\n    // transform outgoing request data\n    transformRequest: [function(d) {\n      return isObject(d) && !isFile(d) ? toJson(d) : d;\n    }],\n\n    // default headers\n    headers: {\n      common: {\n        'Accept': 'application/json, text/plain, */*'\n      },\n      post:   CONTENT_TYPE_APPLICATION_JSON,\n      put:    CONTENT_TYPE_APPLICATION_JSON,\n      patch:  CONTENT_TYPE_APPLICATION_JSON\n    },\n\n    xsrfCookieName: 'XSRF-TOKEN',\n    xsrfHeaderName: 'X-XSRF-TOKEN'\n  };\n\n  /**\n   * Are order by request. I.E. they are applied in the same order as\n   * array on request, but revers order on response.\n   */\n  var interceptorFactories = this.interceptors = [];\n  /**\n   * For historical reasons, response interceptors ordered by the order in which\n   * they are applied to response. (This is in revers to interceptorFactories)\n   */\n  var responseInterceptorFactories = this.responseInterceptors = [];\n\n  this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',\n      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {\n\n    var defaultCache = $cacheFactory('$http');\n\n    /**\n     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.\n     * The reversal is needed so that we can build up the interception chain around the\n     * server request.\n     */\n    var reversedInterceptors = [];\n\n    forEach(interceptorFactories, function(interceptorFactory) {\n      reversedInterceptors.unshift(isString(interceptorFactory)\n          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));\n    });\n\n    forEach(responseInterceptorFactories, function(interceptorFactory, index) {\n      var responseFn = isString(interceptorFactory)\n          ? $injector.get(interceptorFactory)\n          : $injector.invoke(interceptorFactory);\n\n      /**\n       * Response interceptors go before \"around\" interceptors (no real reason, just\n       * had to pick one.) But they are already revesed, so we can't use unshift, hence\n       * the splice.\n       */\n      reversedInterceptors.splice(index, 0, {\n        response: function(response) {\n          return responseFn($q.when(response));\n        },\n        responseError: function(response) {\n          return responseFn($q.reject(response));\n        }\n      });\n    });\n\n\n    /**\n     * @ngdoc function\n     * @name ng.$http\n     * @requires $httpBackend\n     * @requires $browser\n     * @requires $cacheFactory\n     * @requires $rootScope\n     * @requires $q\n     * @requires $injector\n     *\n     * @description\n     * The `$http` service is a core Angular service that facilitates communication with the remote\n     * HTTP servers via the browser's {@link https://developer.mozilla.org/en/xmlhttprequest\n     * XMLHttpRequest} object or via {@link http://en.wikipedia.org/wiki/JSONP JSONP}.\n     *\n     * For unit testing applications that use `$http` service, see\n     * {@link ngMock.$httpBackend $httpBackend mock}.\n     *\n     * For a higher level of abstraction, please check out the {@link ngResource.$resource\n     * $resource} service.\n     *\n     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by\n     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage\n     * it is important to familiarize yourself with these APIs and the guarantees they provide.\n     *\n     *\n     * # General usage\n     * The `$http` service is a function which takes a single argument — a configuration object —\n     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}\n     * with two $http specific methods: `success` and `error`.\n     *\n     * <pre>\n     *   $http({method: 'GET', url: '/someUrl'}).\n     *     success(function(data, status, headers, config) {\n     *       // this callback will be called asynchronously\n     *       // when the response is available\n     *     }).\n     *     error(function(data, status, headers, config) {\n     *       // called asynchronously if an error occurs\n     *       // or server returns response with an error status.\n     *     });\n     * </pre>\n     *\n     * Since the returned value of calling the $http function is a `promise`, you can also use\n     * the `then` method to register callbacks, and these callbacks will receive a single argument –\n     * an object representing the response. See the API signature and type info below for more\n     * details.\n     *\n     * A response status code between 200 and 299 is considered a success status and\n     * will result in the success callback being called. Note that if the response is a redirect,\n     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be\n     * called for such responses.\n     *\n     * # Shortcut methods\n     *\n     * Since all invocations of the $http service require passing in an HTTP method and URL, and\n     * POST/PUT requests require request data to be provided as well, shortcut methods\n     * were created:\n     *\n     * <pre>\n     *   $http.get('/someUrl').success(successCallback);\n     *   $http.post('/someUrl', data).success(successCallback);\n     * </pre>\n     *\n     * Complete list of shortcut methods:\n     *\n     * - {@link ng.$http#get $http.get}\n     * - {@link ng.$http#head $http.head}\n     * - {@link ng.$http#post $http.post}\n     * - {@link ng.$http#put $http.put}\n     * - {@link ng.$http#delete $http.delete}\n     * - {@link ng.$http#jsonp $http.jsonp}\n     *\n     *\n     * # Setting HTTP Headers\n     *\n     * The $http service will automatically add certain HTTP headers to all requests. These defaults\n     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration\n     * object, which currently contains this default configuration:\n     *\n     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):\n     *   - `Accept: application/json, text/plain, * / *`\n     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)\n     *   - `Content-Type: application/json`\n     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)\n     *   - `Content-Type: application/json`\n     *\n     * To add or overwrite these defaults, simply add or remove a property from these configuration\n     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object\n     * with the lowercased HTTP method name as the key, e.g.\n     * `$httpProvider.defaults.headers.get['My-Header']='value'`.\n     *\n     * Additionally, the defaults can be set at runtime via the `$http.defaults` object in the same\n     * fashion.\n     *\n     *\n     * # Transforming Requests and Responses\n     *\n     * Both requests and responses can be transformed using transform functions. By default, Angular\n     * applies these transformations:\n     *\n     * Request transformations:\n     *\n     * - If the `data` property of the request configuration object contains an object, serialize it into\n     *   JSON format.\n     *\n     * Response transformations:\n     *\n     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).\n     *  - If JSON response is detected, deserialize it using a JSON parser.\n     *\n     * To globally augment or override the default transforms, modify the `$httpProvider.defaults.transformRequest` and\n     * `$httpProvider.defaults.transformResponse` properties. These properties are by default an\n     * array of transform functions, which allows you to `push` or `unshift` a new transformation function into the\n     * transformation chain. You can also decide to completely override any default transformations by assigning your\n     * transformation functions to these properties directly without the array wrapper.\n     *\n     * Similarly, to locally override the request/response transforms, augment the `transformRequest` and/or\n     * `transformResponse` properties of the configuration object passed into `$http`.\n     *\n     *\n     * # Caching\n     *\n     * To enable caching, set the configuration property `cache` to `true`. When the cache is\n     * enabled, `$http` stores the response from the server in local cache. Next time the\n     * response is served from the cache without sending a request to the server.\n     *\n     * Note that even if the response is served from cache, delivery of the data is asynchronous in\n     * the same way that real requests are.\n     *\n     * If there are multiple GET requests for the same URL that should be cached using the same\n     * cache, but the cache is not populated yet, only one request to the server will be made and\n     * the remaining requests will be fulfilled using the response from the first request.\n     *\n     * A custom default cache built with $cacheFactory can be provided in $http.defaults.cache.\n     * To skip it, set configuration property `cache` to `false`.\n     *\n     *\n     * # Interceptors\n     *\n     * Before you start creating interceptors, be sure to understand the\n     * {@link ng.$q $q and deferred/promise APIs}.\n     *\n     * For purposes of global error handling, authentication, or any kind of synchronous or\n     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be\n     * able to intercept requests before they are handed to the server and\n     * responses before they are handed over to the application code that\n     * initiated these requests. The interceptors leverage the {@link ng.$q\n     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.\n     *\n     * The interceptors are service factories that are registered with the `$httpProvider` by\n     * adding them to the `$httpProvider.interceptors` array. The factory is called and\n     * injected with dependencies (if specified) and returns the interceptor.\n     *\n     * There are two kinds of interceptors (and two kinds of rejection interceptors):\n     *\n     *   * `request`: interceptors get called with http `config` object. The function is free to modify\n     *     the `config` or create a new one. The function needs to return the `config` directly or as a\n     *     promise.\n     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or resolved\n     *      with a rejection.\n     *   * `response`: interceptors get called with http `response` object. The function is free to modify\n     *     the `response` or create a new one. The function needs to return the `response` directly or as a\n     *     promise.\n     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or resolved\n     *      with a rejection.\n     *\n     *\n     * <pre>\n     *   // register the interceptor as a service\n     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n     *     return {\n     *       // optional method\n     *       'request': function(config) {\n     *         // do something on success\n     *         return config || $q.when(config);\n     *       },\n     *\n     *       // optional method\n     *      'requestError': function(rejection) {\n     *         // do something on error\n     *         if (canRecover(rejection)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(rejection);\n     *       },\n     *\n     *\n     *\n     *       // optional method\n     *       'response': function(response) {\n     *         // do something on success\n     *         return response || $q.when(response);\n     *       },\n     *\n     *       // optional method\n     *      'responseError': function(rejection) {\n     *         // do something on error\n     *         if (canRecover(rejection)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(rejection);\n     *       };\n     *     }\n     *   });\n     *\n     *   $httpProvider.interceptors.push('myHttpInterceptor');\n     *\n     *\n     *   // register the interceptor via an anonymous factory\n     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {\n     *     return {\n     *      'request': function(config) {\n     *          // same as above\n     *       },\n     *       'response': function(response) {\n     *          // same as above\n     *       }\n     *   });\n     * </pre>\n     *\n     * # Response interceptors (DEPRECATED)\n     *\n     * Before you start creating interceptors, be sure to understand the\n     * {@link ng.$q $q and deferred/promise APIs}.\n     *\n     * For purposes of global error handling, authentication or any kind of synchronous or\n     * asynchronous preprocessing of received responses, it is desirable to be able to intercept\n     * responses for http requests before they are handed over to the application code that\n     * initiated these requests. The response interceptors leverage the {@link ng.$q\n     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.\n     *\n     * The interceptors are service factories that are registered with the $httpProvider by\n     * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and\n     * injected with dependencies (if specified) and returns the interceptor  — a function that\n     * takes a {@link ng.$q promise} and returns the original or a new promise.\n     *\n     * <pre>\n     *   // register the interceptor as a service\n     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {\n     *     return function(promise) {\n     *       return promise.then(function(response) {\n     *         // do something on success\n     *       }, function(response) {\n     *         // do something on error\n     *         if (canRecover(response)) {\n     *           return responseOrNewPromise\n     *         }\n     *         return $q.reject(response);\n     *       });\n     *     }\n     *   });\n     *\n     *   $httpProvider.responseInterceptors.push('myHttpInterceptor');\n     *\n     *\n     *   // register the interceptor via an anonymous factory\n     *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {\n     *     return function(promise) {\n     *       // same as above\n     *     }\n     *   });\n     * </pre>\n     *\n     *\n     * # Security Considerations\n     *\n     * When designing web applications, consider security threats from:\n     *\n     * - {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\n     *   JSON vulnerability}\n     * - {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF}\n     *\n     * Both server and the client must cooperate in order to eliminate these threats. Angular comes\n     * pre-configured with strategies that address these issues, but for this to work backend server\n     * cooperation is required.\n     *\n     * ## JSON Vulnerability Protection\n     *\n     * A {@link http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx\n     * JSON vulnerability} allows third party website to turn your JSON resource URL into\n     * {@link http://en.wikipedia.org/wiki/JSONP JSONP} request under some conditions. To\n     * counter this your server can prefix all JSON requests with following string `\")]}',\\n\"`.\n     * Angular will automatically strip the prefix before processing it as JSON.\n     *\n     * For example if your server needs to return:\n     * <pre>\n     * ['one','two']\n     * </pre>\n     *\n     * which is vulnerable to attack, your server can return:\n     * <pre>\n     * )]}',\n     * ['one','two']\n     * </pre>\n     *\n     * Angular will strip the prefix, before processing the JSON.\n     *\n     *\n     * ## Cross Site Request Forgery (XSRF) Protection\n     *\n     * {@link http://en.wikipedia.org/wiki/Cross-site_request_forgery XSRF} is a technique by which\n     * an unauthorized site can gain your user's private data. Angular provides a mechanism\n     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie\n     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only\n     * JavaScript that runs on your domain could read the cookie, your server can be assured that\n     * the XHR came from JavaScript running on your domain. The header will not be set for\n     * cross-domain requests.\n     *\n     * To take advantage of this, your server needs to set a token in a JavaScript readable session\n     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the\n     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure\n     * that only JavaScript running on your domain could have sent the request. The token must be\n     * unique for each user and must be verifiable by the server (to prevent the JavaScript from making\n     * up its own tokens). We recommend that the token is a digest of your site's authentication\n     * cookie with a {@link https://en.wikipedia.org/wiki/Salt_(cryptography) salt} for added security.\n     *\n     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName\n     * properties of either $httpProvider.defaults, or the per-request config object.\n     *\n     *\n     * @param {object} config Object describing the request to be made and how it should be\n     *    processed. The object has following properties:\n     *\n     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)\n     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.\n     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned to\n     *      `?key1=value1&key2=value2` after the url. If the value is not a string, it will be JSONified.\n     *    - **data** – `{string|Object}` – Data to be sent as the request message data.\n     *    - **headers** – `{Object}` – Map of strings representing HTTP headers to send to the server.\n     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.\n     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.\n     *    - **transformRequest** – `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     *      transform function or an array of such functions. The transform function takes the http\n     *      request body and headers and returns its transformed (typically serialized) version.\n     *    - **transformResponse** – `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n     *      transform function or an array of such functions. The transform function takes the http\n     *      response body and headers and returns its transformed (typically deserialized) version.\n     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n     *      GET request, otherwise if a cache instance built with\n     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n     *      caching.\n     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}\n     *      that should abort the request when resolved.\n     *    - **withCredentials** - `{boolean}` - whether to to set the `withCredentials` flag on the\n     *      XHR object. See {@link https://developer.mozilla.org/en/http_access_control#section_5\n     *      requests with credentials} for more information.\n     *    - **responseType** - `{string}` - see {@link\n     *      https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType requestType}.\n     *\n     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the\n     *   standard `then` method and two http specific methods: `success` and `error`. The `then`\n     *   method takes two arguments a success and an error callback which will be called with a\n     *   response object. The `success` and `error` methods take a single argument - a function that\n     *   will be called when the request succeeds or fails respectively. The arguments passed into\n     *   these functions are destructured representation of the response object passed into the\n     *   `then` method. The response object has these properties:\n     *\n     *   - **data** – `{string|Object}` – The response body transformed with the transform functions.\n     *   - **status** – `{number}` – HTTP status code of the response.\n     *   - **headers** – `{function([headerName])}` – Header getter function.\n     *   - **config** – `{Object}` – The configuration object that was used to generate the request.\n     *\n     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending\n     *   requests. This is primarily meant to be used for debugging purposes.\n     *\n     *\n     * @example\n      <example>\n        <file name=\"index.html\">\n          <div ng-controller=\"FetchCtrl\">\n            <select ng-model=\"method\">\n              <option>GET</option>\n              <option>JSONP</option>\n            </select>\n            <input type=\"text\" ng-model=\"url\" size=\"80\"/>\n            <button ng-click=\"fetch()\">fetch</button><br>\n            <button ng-click=\"updateModel('GET', 'http-hello.html')\">Sample GET</button>\n            <button ng-click=\"updateModel('JSONP', 'http://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')\">Sample JSONP</button>\n            <button ng-click=\"updateModel('JSONP', 'http://angularjs.org/doesntexist&callback=JSON_CALLBACK')\">Invalid JSONP</button>\n            <pre>http status code: {{status}}</pre>\n            <pre>http response data: {{data}}</pre>\n          </div>\n        </file>\n        <file name=\"script.js\">\n          function FetchCtrl($scope, $http, $templateCache) {\n            $scope.method = 'GET';\n            $scope.url = 'http-hello.html';\n\n            $scope.fetch = function() {\n              $scope.code = null;\n              $scope.response = null;\n\n              $http({method: $scope.method, url: $scope.url, cache: $templateCache}).\n                success(function(data, status) {\n                  $scope.status = status;\n                  $scope.data = data;\n                }).\n                error(function(data, status) {\n                  $scope.data = data || \"Request failed\";\n                  $scope.status = status;\n              });\n            };\n\n            $scope.updateModel = function(method, url) {\n              $scope.method = method;\n              $scope.url = url;\n            };\n          }\n        </file>\n        <file name=\"http-hello.html\">\n          Hello, $http!\n        </file>\n        <file name=\"scenario.js\">\n          it('should make an xhr GET request', function() {\n            element(':button:contains(\"Sample GET\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('200');\n            expect(binding('data')).toMatch(/Hello, \\$http!/);\n          });\n\n          it('should make a JSONP request to angularjs.org', function() {\n            element(':button:contains(\"Sample JSONP\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('200');\n            expect(binding('data')).toMatch(/Super Hero!/);\n          });\n\n          it('should make JSONP request to invalid URL and invoke the error handler',\n              function() {\n            element(':button:contains(\"Invalid JSONP\")').click();\n            element(':button:contains(\"fetch\")').click();\n            expect(binding('status')).toBe('0');\n            expect(binding('data')).toBe('Request failed');\n          });\n        </file>\n      </example>\n     */\n    function $http(requestConfig) {\n      var config = {\n        transformRequest: defaults.transformRequest,\n        transformResponse: defaults.transformResponse\n      };\n      var headers = {};\n\n      extend(config, requestConfig);\n      config.headers = headers;\n      config.method = uppercase(config.method);\n\n      extend(headers,\n          defaults.headers.common,\n          defaults.headers[lowercase(config.method)],\n          requestConfig.headers);\n\n      var xsrfValue = isSameDomain(config.url, $browser.url())\n          ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]\n          : undefined;\n      if (xsrfValue) {\n        headers[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;\n      }\n\n\n      var serverRequest = function(config) {\n        var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);\n\n        // strip content-type if data is undefined\n        if (isUndefined(config.data)) {\n          delete headers['Content-Type'];\n        }\n\n        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {\n          config.withCredentials = defaults.withCredentials;\n        }\n\n        // send request\n        return sendReq(config, reqData, headers).then(transformResponse, transformResponse);\n      };\n\n      var chain = [serverRequest, undefined];\n      var promise = $q.when(config);\n\n      // apply interceptors\n      forEach(reversedInterceptors, function(interceptor) {\n        if (interceptor.request || interceptor.requestError) {\n          chain.unshift(interceptor.request, interceptor.requestError);\n        }\n        if (interceptor.response || interceptor.responseError) {\n          chain.push(interceptor.response, interceptor.responseError);\n        }\n      });\n\n      while(chain.length) {\n        var thenFn = chain.shift();\n        var rejectFn = chain.shift();\n\n        promise = promise.then(thenFn, rejectFn);\n      }\n\n      promise.success = function(fn) {\n        promise.then(function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      promise.error = function(fn) {\n        promise.then(null, function(response) {\n          fn(response.data, response.status, response.headers, config);\n        });\n        return promise;\n      };\n\n      return promise;\n\n      function transformResponse(response) {\n        // make a copy since the response must be cacheable\n        var resp = extend({}, response, {\n          data: transformData(response.data, response.headers, config.transformResponse)\n        });\n        return (isSuccess(response.status))\n          ? resp\n          : $q.reject(resp);\n      }\n    }\n\n    $http.pendingRequests = [];\n\n    /**\n     * @ngdoc method\n     * @name ng.$http#get\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `GET` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name ng.$http#delete\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `DELETE` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name ng.$http#head\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `HEAD` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name ng.$http#jsonp\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `JSONP` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request.\n     *                     Should contain `JSON_CALLBACK` string.\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n    createShortMethods('get', 'delete', 'head', 'jsonp');\n\n    /**\n     * @ngdoc method\n     * @name ng.$http#post\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `POST` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {*} data Request content\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n\n    /**\n     * @ngdoc method\n     * @name ng.$http#put\n     * @methodOf ng.$http\n     *\n     * @description\n     * Shortcut method to perform `PUT` request.\n     *\n     * @param {string} url Relative or absolute URL specifying the destination of the request\n     * @param {*} data Request content\n     * @param {Object=} config Optional configuration object\n     * @returns {HttpPromise} Future object\n     */\n    createShortMethodsWithData('post', 'put');\n\n        /**\n         * @ngdoc property\n         * @name ng.$http#defaults\n         * @propertyOf ng.$http\n         *\n         * @description\n         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\n         * default headers, withCredentials as well as request and response transformations.\n         *\n         * See \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.\n         */\n    $http.defaults = defaults;\n\n\n    return $http;\n\n\n    function createShortMethods(names) {\n      forEach(arguments, function(name) {\n        $http[name] = function(url, config) {\n          return $http(extend(config || {}, {\n            method: name,\n            url: url\n          }));\n        };\n      });\n    }\n\n\n    function createShortMethodsWithData(name) {\n      forEach(arguments, function(name) {\n        $http[name] = function(url, data, config) {\n          return $http(extend(config || {}, {\n            method: name,\n            url: url,\n            data: data\n          }));\n        };\n      });\n    }\n\n\n    /**\n     * Makes the request.\n     *\n     * !!! ACCESSES CLOSURE VARS:\n     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests\n     */\n    function sendReq(config, reqData, reqHeaders) {\n      var deferred = $q.defer(),\n          promise = deferred.promise,\n          cache,\n          cachedResp,\n          url = buildUrl(config.url, config.params);\n\n      $http.pendingRequests.push(config);\n      promise.then(removePendingReq, removePendingReq);\n\n\n      if ((config.cache || defaults.cache) && config.cache !== false && config.method == 'GET') {\n        cache = isObject(config.cache) ? config.cache\n              : isObject(defaults.cache) ? defaults.cache\n              : defaultCache;\n      }\n\n      if (cache) {\n        cachedResp = cache.get(url);\n        if (cachedResp) {\n          if (cachedResp.then) {\n            // cached request has already been sent, but there is no response yet\n            cachedResp.then(removePendingReq, removePendingReq);\n            return cachedResp;\n          } else {\n            // serving from cache\n            if (isArray(cachedResp)) {\n              resolvePromise(cachedResp[1], cachedResp[0], copy(cachedResp[2]));\n            } else {\n              resolvePromise(cachedResp, 200, {});\n            }\n          }\n        } else {\n          // put the promise for the non-transformed response into cache as a placeholder\n          cache.put(url, promise);\n        }\n      }\n\n      // if we won't have the response in cache, send the request to the backend\n      if (!cachedResp) {\n        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,\n            config.withCredentials, config.responseType);\n      }\n\n      return promise;\n\n\n      /**\n       * Callback registered to $httpBackend():\n       *  - caches the response if desired\n       *  - resolves the raw $http promise\n       *  - calls $apply\n       */\n      function done(status, response, headersString) {\n        if (cache) {\n          if (isSuccess(status)) {\n            cache.put(url, [status, response, parseHeaders(headersString)]);\n          } else {\n            // remove promise from the cache\n            cache.remove(url);\n          }\n        }\n\n        resolvePromise(response, status, headersString);\n        if (!$rootScope.$$phase) $rootScope.$apply();\n      }\n\n\n      /**\n       * Resolves the raw $http promise.\n       */\n      function resolvePromise(response, status, headers) {\n        // normalize internal statuses to 0\n        status = Math.max(status, 0);\n\n        (isSuccess(status) ? deferred.resolve : deferred.reject)({\n          data: response,\n          status: status,\n          headers: headersGetter(headers),\n          config: config\n        });\n      }\n\n\n      function removePendingReq() {\n        var idx = indexOf($http.pendingRequests, config);\n        if (idx !== -1) $http.pendingRequests.splice(idx, 1);\n      }\n    }\n\n\n    function buildUrl(url, params) {\n          if (!params) return url;\n          var parts = [];\n          forEachSorted(params, function(value, key) {\n            if (value == null || value == undefined) return;\n            if (!isArray(value)) value = [value];\n\n            forEach(value, function(v) {\n              if (isObject(v)) {\n                v = toJson(v);\n              }\n              parts.push(encodeUriQuery(key) + '=' +\n                         encodeUriQuery(v));\n            });\n          });\n          return url + ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');\n        }\n\n\n  }];\n}\n\nvar XHR = window.XMLHttpRequest || function() {\n  try { return new ActiveXObject(\"Msxml2.XMLHTTP.6.0\"); } catch (e1) {}\n  try { return new ActiveXObject(\"Msxml2.XMLHTTP.3.0\"); } catch (e2) {}\n  try { return new ActiveXObject(\"Msxml2.XMLHTTP\"); } catch (e3) {}\n  throw new Error(\"This browser does not support XMLHttpRequest.\");\n};\n\n\n/**\n * @ngdoc object\n * @name ng.$httpBackend\n * @requires $browser\n * @requires $window\n * @requires $document\n *\n * @description\n * HTTP backend used by the {@link ng.$http service} that delegates to\n * XMLHttpRequest object or JSONP and deals with browser incompatibilities.\n *\n * You should never need to use this service directly, instead use the higher-level abstractions:\n * {@link ng.$http $http} or {@link ngResource.$resource $resource}.\n *\n * During testing this implementation is swapped with {@link ngMock.$httpBackend mock\n * $httpBackend} which can be trained with responses.\n */\nfunction $HttpBackendProvider() {\n  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {\n    return createHttpBackend($browser, XHR, $browser.defer, $window.angular.callbacks,\n        $document[0], $window.location.protocol.replace(':', ''));\n  }];\n}\n\nfunction createHttpBackend($browser, XHR, $browserDefer, callbacks, rawDocument, locationProtocol) {\n  // TODO(vojta): fix the signature\n  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {\n    var status;\n    $browser.$$incOutstandingRequestCount();\n    url = url || $browser.url();\n\n    if (lowercase(method) == 'jsonp') {\n      var callbackId = '_' + (callbacks.counter++).toString(36);\n      callbacks[callbackId] = function(data) {\n        callbacks[callbackId].data = data;\n      };\n\n      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),\n          function() {\n        if (callbacks[callbackId].data) {\n          completeRequest(callback, 200, callbacks[callbackId].data);\n        } else {\n          completeRequest(callback, status || -2);\n        }\n        delete callbacks[callbackId];\n      });\n    } else {\n      var xhr = new XHR();\n      xhr.open(method, url, true);\n      forEach(headers, function(value, key) {\n        if (value) xhr.setRequestHeader(key, value);\n      });\n\n      // In IE6 and 7, this might be called synchronously when xhr.send below is called and the\n      // response is in the cache. the promise api will ensure that to the app code the api is\n      // always async\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState == 4) {\n          var responseHeaders = xhr.getAllResponseHeaders();\n\n          // TODO(vojta): remove once Firefox 21 gets released.\n          // begin: workaround to overcome Firefox CORS http response headers bug\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=608735\n          // Firefox already patched in nightly. Should land in Firefox 21.\n\n          // CORS \"simple response headers\" http://www.w3.org/TR/cors/\n          var value,\n              simpleHeaders = [\"Cache-Control\", \"Content-Language\", \"Content-Type\",\n                                  \"Expires\", \"Last-Modified\", \"Pragma\"];\n          if (!responseHeaders) {\n            responseHeaders = \"\";\n            forEach(simpleHeaders, function (header) {\n              var value = xhr.getResponseHeader(header);\n              if (value) {\n                  responseHeaders += header + \": \" + value + \"\\n\";\n              }\n            });\n          }\n          // end of the workaround.\n\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response and responseType properties were introduced in XHR Level2 spec (supported by IE10)\n          completeRequest(callback,\n              status || xhr.status,\n              (xhr.responseType ? xhr.response : xhr.responseText),\n              responseHeaders);\n        }\n      };\n\n      if (withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      if (responseType) {\n        xhr.responseType = responseType;\n      }\n\n      xhr.send(post || '');\n    }\n\n    if (timeout > 0) {\n      var timeoutId = $browserDefer(timeoutRequest, timeout);\n    } else if (timeout && timeout.then) {\n      timeout.then(timeoutRequest);\n    }\n\n\n    function timeoutRequest() {\n      status = -1;\n      jsonpDone && jsonpDone();\n      xhr && xhr.abort();\n    }\n\n    function completeRequest(callback, status, response, headersString) {\n      // URL_MATCH is defined in src/service/location.js\n      var protocol = (url.match(SERVER_MATCH) || ['', locationProtocol])[1];\n\n      // cancel timeout and subsequent timeout promise resolution\n      timeoutId && $browserDefer.cancel(timeoutId);\n      jsonpDone = xhr = null;\n\n      // fix status code for file protocol (it's always 0)\n      status = (protocol == 'file') ? (response ? 200 : 404) : status;\n\n      // normalize IE bug (http://bugs.jquery.com/ticket/1450)\n      status = status == 1223 ? 204 : status;\n\n      callback(status, response, headersString);\n      $browser.$$completeOutstandingRequest(noop);\n    }\n  };\n\n  function jsonpReq(url, done) {\n    // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:\n    // - fetches local scripts via XHR and evals them\n    // - adds and immediately removes script elements from the document\n    var script = rawDocument.createElement('script'),\n        doneWrapper = function() {\n          rawDocument.body.removeChild(script);\n          if (done) done();\n        };\n\n    script.type = 'text/javascript';\n    script.src = url;\n\n    if (msie) {\n      script.onreadystatechange = function() {\n        if (/loaded|complete/.test(script.readyState)) doneWrapper();\n      };\n    } else {\n      script.onload = script.onerror = doneWrapper;\n    }\n\n    rawDocument.body.appendChild(script);\n    return doneWrapper;\n  }\n}\n\n/**\n * @ngdoc object\n * @name ng.$locale\n *\n * @description\n * $locale service provides localization rules for various Angular components. As of right now the\n * only public api is:\n *\n * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)\n */\nfunction $LocaleProvider(){\n  this.$get = function() {\n    return {\n      id: 'en-us',\n\n      NUMBER_FORMATS: {\n        DECIMAL_SEP: '.',\n        GROUP_SEP: ',',\n        PATTERNS: [\n          { // Decimal Pattern\n            minInt: 1,\n            minFrac: 0,\n            maxFrac: 3,\n            posPre: '',\n            posSuf: '',\n            negPre: '-',\n            negSuf: '',\n            gSize: 3,\n            lgSize: 3\n          },{ //Currency Pattern\n            minInt: 1,\n            minFrac: 2,\n            maxFrac: 2,\n            posPre: '\\u00A4',\n            posSuf: '',\n            negPre: '(\\u00A4',\n            negSuf: ')',\n            gSize: 3,\n            lgSize: 3\n          }\n        ],\n        CURRENCY_SYM: '$'\n      },\n\n      DATETIME_FORMATS: {\n        MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'\n                .split(','),\n        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),\n        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),\n        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),\n        AMPMS: ['AM','PM'],\n        medium: 'MMM d, y h:mm:ss a',\n        short: 'M/d/yy h:mm a',\n        fullDate: 'EEEE, MMMM d, y',\n        longDate: 'MMMM d, y',\n        mediumDate: 'MMM d, y',\n        shortDate: 'M/d/yy',\n        mediumTime: 'h:mm:ss a',\n        shortTime: 'h:mm a'\n      },\n\n      pluralCat: function(num) {\n        if (num === 1) {\n          return 'one';\n        }\n        return 'other';\n      }\n    };\n  };\n}\n\nfunction $TimeoutProvider() {\n  this.$get = ['$rootScope', '$browser', '$q', '$exceptionHandler',\n       function($rootScope,   $browser,   $q,   $exceptionHandler) {\n    var deferreds = {};\n\n\n     /**\n      * @ngdoc function\n      * @name ng.$timeout\n      * @requires $browser\n      *\n      * @description\n      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch\n      * block and delegates any exceptions to\n      * {@link ng.$exceptionHandler $exceptionHandler} service.\n      *\n      * The return value of registering a timeout function is a promise, which will be resolved when\n      * the timeout is reached and the timeout function is executed.\n      *\n      * To cancel a timeout request, call `$timeout.cancel(promise)`.\n      *\n      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to\n      * synchronously flush the queue of deferred functions.\n      *\n      * @param {function()} fn A function, whose execution should be delayed.\n      * @param {number=} [delay=0] Delay in milliseconds.\n      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\n      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\n      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this\n      *   promise will be resolved with is the return value of the `fn` function.\n      */\n    function timeout(fn, delay, invokeApply) {\n      var deferred = $q.defer(),\n          promise = deferred.promise,\n          skipApply = (isDefined(invokeApply) && !invokeApply),\n          timeoutId, cleanup;\n\n      timeoutId = $browser.defer(function() {\n        try {\n          deferred.resolve(fn());\n        } catch(e) {\n          deferred.reject(e);\n          $exceptionHandler(e);\n        }\n\n        if (!skipApply) $rootScope.$apply();\n      }, delay);\n\n      cleanup = function() {\n        delete deferreds[promise.$$timeoutId];\n      };\n\n      promise.$$timeoutId = timeoutId;\n      deferreds[timeoutId] = deferred;\n      promise.then(cleanup, cleanup);\n\n      return promise;\n    }\n\n\n     /**\n      * @ngdoc function\n      * @name ng.$timeout#cancel\n      * @methodOf ng.$timeout\n      *\n      * @description\n      * Cancels a task associated with the `promise`. As a result of this, the promise will be\n      * resolved with a rejection.\n      *\n      * @param {Promise=} promise Promise returned by the `$timeout` function.\n      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully\n      *   canceled.\n      */\n    timeout.cancel = function(promise) {\n      if (promise && promise.$$timeoutId in deferreds) {\n        deferreds[promise.$$timeoutId].reject('canceled');\n        return $browser.defer.cancel(promise.$$timeoutId);\n      }\n      return false;\n    };\n\n    return timeout;\n  }];\n}\n\n/**\n * @ngdoc object\n * @name ng.$filterProvider\n * @description\n *\n * Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To\n * achieve this a filter definition consists of a factory function which is annotated with dependencies and is\n * responsible for creating a filter function.\n *\n * <pre>\n *   // Filter registration\n *   function MyModule($provide, $filterProvider) {\n *     // create a service to demonstrate injection (not always needed)\n *     $provide.value('greet', function(name){\n *       return 'Hello ' + name + '!';\n *     });\n *\n *     // register a filter factory which uses the\n *     // greet service to demonstrate DI.\n *     $filterProvider.register('greet', function(greet){\n *       // return the filter function which uses the greet service\n *       // to generate salutation\n *       return function(text) {\n *         // filters need to be forgiving so check input validity\n *         return text && greet(text) || text;\n *       };\n *     });\n *   }\n * </pre>\n *\n * The filter function is registered with the `$injector` under the filter name suffixe with `Filter`.\n * <pre>\n *   it('should be the same instance', inject(\n *     function($filterProvider) {\n *       $filterProvider.register('reverse', function(){\n *         return ...;\n *       });\n *     },\n *     function($filter, reverseFilter) {\n *       expect($filter('reverse')).toBe(reverseFilter);\n *     });\n * </pre>\n *\n *\n * For more information about how angular filters work, and how to create your own filters, see\n * {@link guide/dev_guide.templates.filters Understanding Angular Filters} in the angular Developer\n * Guide.\n */\n/**\n * @ngdoc method\n * @name ng.$filterProvider#register\n * @methodOf ng.$filterProvider\n * @description\n * Register filter factory function.\n *\n * @param {String} name Name of the filter.\n * @param {function} fn The filter factory function which is injectable.\n */\n\n\n/**\n * @ngdoc function\n * @name ng.$filter\n * @function\n * @description\n * Filters are used for formatting data displayed to the user.\n *\n * The general syntax in templates is as follows:\n *\n *         {{ expression [| filter_name[:parameter_value] ... ] }}\n *\n * @param {String} name Name of the filter function to retrieve\n * @return {Function} the filter function\n */\n$FilterProvider.$inject = ['$provide'];\nfunction $FilterProvider($provide) {\n  var suffix = 'Filter';\n\n  function register(name, factory) {\n    return $provide.factory(name + suffix, factory);\n  }\n  this.register = register;\n\n  this.$get = ['$injector', function($injector) {\n    return function(name) {\n      return $injector.get(name + suffix);\n    }\n  }];\n\n  ////////////////////////////////////////\n\n  register('currency', currencyFilter);\n  register('date', dateFilter);\n  register('filter', filterFilter);\n  register('json', jsonFilter);\n  register('limitTo', limitToFilter);\n  register('lowercase', lowercaseFilter);\n  register('number', numberFilter);\n  register('orderBy', orderByFilter);\n  register('uppercase', uppercaseFilter);\n}\n\n/**\n * @ngdoc filter\n * @name ng.filter:filter\n * @function\n *\n * @description\n * Selects a subset of items from `array` and returns it as a new array.\n *\n * Note: This function is used to augment the `Array` type in Angular expressions. See\n * {@link ng.$filter} for more information about Angular arrays.\n *\n * @param {Array} array The source array.\n * @param {string|Object|function()} expression The predicate to be used for selecting items from\n *   `array`.\n *\n *   Can be one of:\n *\n *   - `string`: Predicate that results in a substring match using the value of `expression`\n *     string. All strings or objects with string properties in `array` that contain this string\n *     will be returned. The predicate can be negated by prefixing the string with `!`.\n *\n *   - `Object`: A pattern object can be used to filter specific properties on objects contained\n *     by `array`. For example `{name:\"M\", phone:\"1\"}` predicate will return an array of items\n *     which have property `name` containing \"M\" and property `phone` containing \"1\". A special\n *     property name `$` can be used (as in `{$:\"text\"}`) to accept a match against any\n *     property of the object. That's equivalent to the simple substring match with a `string`\n *     as described above.\n *\n *   - `function`: A predicate function can be used to write arbitrary filters. The function is\n *     called for each element of `array`. The final result is an array of those elements that\n *     the predicate returned true for.\n *\n * @param {function(expected, actual)|true|undefined} comparator Comparator which is used in\n *     determining if the expected value (from the filter expression) and actual value (from\n *     the object in the array) should be considered a match.\n *\n *   Can be one of:\n *\n *     - `function(expected, actual)`:\n *       The function will be given the object value and the predicate value to compare and\n *       should return true if the item should be included in filtered result.\n *\n *     - `true`: A shorthand for `function(expected, actual) { return angular.equals(expected, actual)}`.\n *       this is essentially strict comparison of expected and actual.\n *\n *     - `false|undefined`: A short hand for a function which will look for a substring match in case\n *       insensitive way.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <div ng-init=\"friends = [{name:'John', phone:'555-1276'},\n                                {name:'Mary', phone:'800-BIG-MARY'},\n                                {name:'Mike', phone:'555-4321'},\n                                {name:'Adam', phone:'555-5678'},\n                                {name:'Julie', phone:'555-8765'},\n                                {name:'Juliette', phone:'555-5678'}]\"></div>\n\n       Search: <input ng-model=\"searchText\">\n       <table id=\"searchTextResults\">\n         <tr><th>Name</th><th>Phone</th></tr>\n         <tr ng-repeat=\"friend in friends | filter:searchText\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n         </tr>\n       </table>\n       <hr>\n       Any: <input ng-model=\"search.$\"> <br>\n       Name only <input ng-model=\"search.name\"><br>\n       Phone only <input ng-model=\"search.phone\"><br>\n       Equality <input type=\"checkbox\" ng-model=\"strict\"><br>\n       <table id=\"searchObjResults\">\n         <tr><th>Name</th><th>Phone</th></tr>\n         <tr ng-repeat=\"friend in friends | filter:search:strict\">\n           <td>{{friend.name}}</td>\n           <td>{{friend.phone}}</td>\n         </tr>\n       </table>\n     </doc:source>\n     <doc:scenario>\n       it('should search across all fields when filtering with a string', function() {\n         input('searchText').enter('m');\n         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Mike', 'Adam']);\n\n         input('searchText').enter('76');\n         expect(repeater('#searchTextResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['John', 'Julie']);\n       });\n\n       it('should search in specific fields when filtering with a predicate object', function() {\n         input('search.$').enter('i');\n         expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Mike', 'Julie', 'Juliette']);\n       });\n       it('should use a equal comparison when comparator is true', function() {\n         input('search.name').enter('Julie');\n         input('strict').check();\n         expect(repeater('#searchObjResults tr', 'friend in friends').column('friend.name')).\n           toEqual(['Julie']);\n       });\n     </doc:scenario>\n   </doc:example>\n */\nfunction filterFilter() {\n  return function(array, expression, comperator) {\n    if (!isArray(array)) return array;\n    var predicates = [];\n    predicates.check = function(value) {\n      for (var j = 0; j < predicates.length; j++) {\n        if(!predicates[j](value)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    switch(typeof comperator) {\n      case \"function\":\n        break;\n      case \"boolean\":\n        if(comperator == true) {\n          comperator = function(obj, text) {\n            return angular.equals(obj, text);\n          }\n          break;\n        }\n      default:\n        comperator = function(obj, text) {\n          text = (''+text).toLowerCase();\n          return (''+obj).toLowerCase().indexOf(text) > -1\n        };\n    }\n    var search = function(obj, text){\n      if (typeof text == 'string' && text.charAt(0) === '!') {\n        return !search(obj, text.substr(1));\n      }\n      switch (typeof obj) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          return comperator(obj, text);\n        case \"object\":\n          switch (typeof text) {\n            case \"object\":\n              return comperator(obj, text);\n              break;\n            default:\n              for ( var objKey in obj) {\n                if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {\n                  return true;\n                }\n              }\n              break;\n          }\n          return false;\n        case \"array\":\n          for ( var i = 0; i < obj.length; i++) {\n            if (search(obj[i], text)) {\n              return true;\n            }\n          }\n          return false;\n        default:\n          return false;\n      }\n    };\n    switch (typeof expression) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        expression = {$:expression};\n      case \"object\":\n        for (var key in expression) {\n          if (key == '$') {\n            (function() {\n              if (!expression[key]) return;\n              var path = key\n              predicates.push(function(value) {\n                return search(value, expression[path]);\n              });\n            })();\n          } else {\n            (function() {\n              if (!expression[key]) return;\n              var path = key;\n              predicates.push(function(value) {\n                return search(getter(value,path), expression[path]);\n              });\n            })();\n          }\n        }\n        break;\n      case 'function':\n        predicates.push(expression);\n        break;\n      default:\n        return array;\n    }\n    var filtered = [];\n    for ( var j = 0; j < array.length; j++) {\n      var value = array[j];\n      if (predicates.check(value)) {\n        filtered.push(value);\n      }\n    }\n    return filtered;\n  }\n}\n\n/**\n * @ngdoc filter\n * @name ng.filter:currency\n * @function\n *\n * @description\n * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default\n * symbol for current locale is used.\n *\n * @param {number} amount Input to filter.\n * @param {string=} symbol Currency symbol or identifier to be displayed.\n * @returns {string} Formatted number.\n *\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.amount = 1234.56;\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <input type=\"number\" ng-model=\"amount\"> <br>\n         default currency symbol ($): {{amount | currency}}<br>\n         custom currency identifier (USD$): {{amount | currency:\"USD$\"}}\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should init with 1234.56', function() {\n         expect(binding('amount | currency')).toBe('$1,234.56');\n         expect(binding('amount | currency:\"USD$\"')).toBe('USD$1,234.56');\n       });\n       it('should update', function() {\n         input('amount').enter('-1234');\n         expect(binding('amount | currency')).toBe('($1,234.00)');\n         expect(binding('amount | currency:\"USD$\"')).toBe('(USD$1,234.00)');\n       });\n     </doc:scenario>\n   </doc:example>\n */\ncurrencyFilter.$inject = ['$locale'];\nfunction currencyFilter($locale) {\n  var formats = $locale.NUMBER_FORMATS;\n  return function(amount, currencySymbol){\n    if (isUndefined(currencySymbol)) currencySymbol = formats.CURRENCY_SYM;\n    return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).\n                replace(/\\u00A4/g, currencySymbol);\n  };\n}\n\n/**\n * @ngdoc filter\n * @name ng.filter:number\n * @function\n *\n * @description\n * Formats a number as text.\n *\n * If the input is not a number an empty string is returned.\n *\n * @param {number|string} number Number to format.\n * @param {(number|string)=} [fractionSize=2] Number of decimal places to round the number to.\n * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.val = 1234.56789;\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         Enter number: <input ng-model='val'><br>\n         Default formatting: {{val | number}}<br>\n         No fractions: {{val | number:0}}<br>\n         Negative number: {{-val | number:4}}\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should format numbers', function() {\n         expect(binding('val | number')).toBe('1,234.568');\n         expect(binding('val | number:0')).toBe('1,235');\n         expect(binding('-val | number:4')).toBe('-1,234.5679');\n       });\n\n       it('should update', function() {\n         input('val').enter('3374.333');\n         expect(binding('val | number')).toBe('3,374.333');\n         expect(binding('val | number:0')).toBe('3,374');\n         expect(binding('-val | number:4')).toBe('-3,374.3330');\n       });\n     </doc:scenario>\n   </doc:example>\n */\n\n\nnumberFilter.$inject = ['$locale'];\nfunction numberFilter($locale) {\n  var formats = $locale.NUMBER_FORMATS;\n  return function(number, fractionSize) {\n    return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,\n      fractionSize);\n  };\n}\n\nvar DECIMAL_SEP = '.';\nfunction formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {\n  if (isNaN(number) || !isFinite(number)) return '';\n\n  var isNegative = number < 0;\n  number = Math.abs(number);\n  var numStr = number + '',\n      formatedText = '',\n      parts = [];\n\n  var hasExponent = false;\n  if (numStr.indexOf('e') !== -1) {\n    var match = numStr.match(/([\\d\\.]+)e(-?)(\\d+)/);\n    if (match && match[2] == '-' && match[3] > fractionSize + 1) {\n      numStr = '0';\n    } else {\n      formatedText = numStr;\n      hasExponent = true;\n    }\n  }\n\n  if (!hasExponent) {\n    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;\n\n    // determine fractionSize if it is not specified\n    if (isUndefined(fractionSize)) {\n      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);\n    }\n\n    var pow = Math.pow(10, fractionSize);\n    number = Math.round(number * pow) / pow;\n    var fraction = ('' + number).split(DECIMAL_SEP);\n    var whole = fraction[0];\n    fraction = fraction[1] || '';\n\n    var pos = 0,\n        lgroup = pattern.lgSize,\n        group = pattern.gSize;\n\n    if (whole.length >= (lgroup + group)) {\n      pos = whole.length - lgroup;\n      for (var i = 0; i < pos; i++) {\n        if ((pos - i)%group === 0 && i !== 0) {\n          formatedText += groupSep;\n        }\n        formatedText += whole.charAt(i);\n      }\n    }\n\n    for (i = pos; i < whole.length; i++) {\n      if ((whole.length - i)%lgroup === 0 && i !== 0) {\n        formatedText += groupSep;\n      }\n      formatedText += whole.charAt(i);\n    }\n\n    // format fraction part.\n    while(fraction.length < fractionSize) {\n      fraction += '0';\n    }\n\n    if (fractionSize && fractionSize !== \"0\") formatedText += decimalSep + fraction.substr(0, fractionSize);\n  }\n\n  parts.push(isNegative ? pattern.negPre : pattern.posPre);\n  parts.push(formatedText);\n  parts.push(isNegative ? pattern.negSuf : pattern.posSuf);\n  return parts.join('');\n}\n\nfunction padNumber(num, digits, trim) {\n  var neg = '';\n  if (num < 0) {\n    neg =  '-';\n    num = -num;\n  }\n  num = '' + num;\n  while(num.length < digits) num = '0' + num;\n  if (trim)\n    num = num.substr(num.length - digits);\n  return neg + num;\n}\n\n\nfunction dateGetter(name, size, offset, trim) {\n  offset = offset || 0;\n  return function(date) {\n    var value = date['get' + name]();\n    if (offset > 0 || value > -offset)\n      value += offset;\n    if (value === 0 && offset == -12 ) value = 12;\n    return padNumber(value, size, trim);\n  };\n}\n\nfunction dateStrGetter(name, shortForm) {\n  return function(date, formats) {\n    var value = date['get' + name]();\n    var get = uppercase(shortForm ? ('SHORT' + name) : name);\n\n    return formats[get][value];\n  };\n}\n\nfunction timeZoneGetter(date) {\n  var zone = -1 * date.getTimezoneOffset();\n  var paddedZone = (zone >= 0) ? \"+\" : \"\";\n\n  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +\n                padNumber(Math.abs(zone % 60), 2);\n\n  return paddedZone;\n}\n\nfunction ampmGetter(date, formats) {\n  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];\n}\n\nvar DATE_FORMATS = {\n  yyyy: dateGetter('FullYear', 4),\n    yy: dateGetter('FullYear', 2, 0, true),\n     y: dateGetter('FullYear', 1),\n  MMMM: dateStrGetter('Month'),\n   MMM: dateStrGetter('Month', true),\n    MM: dateGetter('Month', 2, 1),\n     M: dateGetter('Month', 1, 1),\n    dd: dateGetter('Date', 2),\n     d: dateGetter('Date', 1),\n    HH: dateGetter('Hours', 2),\n     H: dateGetter('Hours', 1),\n    hh: dateGetter('Hours', 2, -12),\n     h: dateGetter('Hours', 1, -12),\n    mm: dateGetter('Minutes', 2),\n     m: dateGetter('Minutes', 1),\n    ss: dateGetter('Seconds', 2),\n     s: dateGetter('Seconds', 1),\n     // while ISO 8601 requires fractions to be prefixed with `.` or `,` \n     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions\n   sss: dateGetter('Milliseconds', 3),\n  EEEE: dateStrGetter('Day'),\n   EEE: dateStrGetter('Day', true),\n     a: ampmGetter,\n     Z: timeZoneGetter\n};\n\nvar DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/,\n    NUMBER_STRING = /^\\d+$/;\n\n/**\n * @ngdoc filter\n * @name ng.filter:date\n * @function\n *\n * @description\n *   Formats `date` to a string based on the requested `format`.\n *\n *   `format` string can be composed of the following elements:\n *\n *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)\n *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)\n *   * `'MMMM'`: Month in year (January-December)\n *   * `'MMM'`: Month in year (Jan-Dec)\n *   * `'MM'`: Month in year, padded (01-12)\n *   * `'M'`: Month in year (1-12)\n *   * `'dd'`: Day in month, padded (01-31)\n *   * `'d'`: Day in month (1-31)\n *   * `'EEEE'`: Day in Week,(Sunday-Saturday)\n *   * `'EEE'`: Day in Week, (Sun-Sat)\n *   * `'HH'`: Hour in day, padded (00-23)\n *   * `'H'`: Hour in day (0-23)\n *   * `'hh'`: Hour in am/pm, padded (01-12)\n *   * `'h'`: Hour in am/pm, (1-12)\n *   * `'mm'`: Minute in hour, padded (00-59)\n *   * `'m'`: Minute in hour (0-59)\n *   * `'ss'`: Second in minute, padded (00-59)\n *   * `'s'`: Second in minute (0-59)\n *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)\n *   * `'a'`: am/pm marker\n *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)\n *\n *   `format` string can also be one of the following predefined\n *   {@link guide/i18n localizable formats}:\n *\n *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale\n *     (e.g. Sep 3, 2010 12:05:08 pm)\n *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)\n *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale\n *     (e.g. Friday, September 3, 2010)\n *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010\n *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)\n *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)\n *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)\n *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)\n *\n *   `format` string can contain literal values. These need to be quoted with single quotes (e.g.\n *   `\"h 'in the morning'\"`). In order to output single quote, use two single quotes in a sequence\n *   (e.g. `\"h o''clock\"`).\n *\n * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or\n *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.SSSZ and its\n *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is\n *    specified in the string input, the time is considered to be in the local timezone.\n * @param {string=} format Formatting rules (see Description). If not specified,\n *    `mediumDate` is used.\n * @returns {string} Formatted string or the input if input is not recognized as date/millis.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:\n           {{1288323623006 | date:'medium'}}<br>\n       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:\n          {{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}<br>\n       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:\n          {{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}<br>\n     </doc:source>\n     <doc:scenario>\n       it('should format date', function() {\n         expect(binding(\"1288323623006 | date:'medium'\")).\n            toMatch(/Oct 2\\d, 2010 \\d{1,2}:\\d{2}:\\d{2} (AM|PM)/);\n         expect(binding(\"1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'\")).\n            toMatch(/2010\\-10\\-2\\d \\d{2}:\\d{2}:\\d{2} (\\-|\\+)?\\d{4}/);\n         expect(binding(\"'1288323623006' | date:'MM/dd/yyyy @ h:mma'\")).\n            toMatch(/10\\/2\\d\\/2010 @ \\d{1,2}:\\d{2}(AM|PM)/);\n       });\n     </doc:scenario>\n   </doc:example>\n */\ndateFilter.$inject = ['$locale'];\nfunction dateFilter($locale) {\n\n\n  var R_ISO8601_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n                     // 1        2       3         4          5          6          7          8  9     10      11\n  function jsonStringToDate(string) {\n    var match;\n    if (match = string.match(R_ISO8601_STR)) {\n      var date = new Date(0),\n          tzHour = 0,\n          tzMin  = 0,\n          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,\n          timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n      if (match[9]) {\n        tzHour = int(match[9] + match[10]);\n        tzMin = int(match[9] + match[11]);\n      }\n      dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));\n      var h = int(match[4]||0) - tzHour;\n      var m = int(match[5]||0) - tzMin\n      var s = int(match[6]||0);\n      var ms = Math.round(parseFloat('0.' + (match[7]||0)) * 1000);\n      timeSetter.call(date, h, m, s, ms);\n      return date;\n    }\n    return string;\n  }\n\n\n  return function(date, format) {\n    var text = '',\n        parts = [],\n        fn, match;\n\n    format = format || 'mediumDate';\n    format = $locale.DATETIME_FORMATS[format] || format;\n    if (isString(date)) {\n      if (NUMBER_STRING.test(date)) {\n        date = int(date);\n      } else {\n        date = jsonStringToDate(date);\n      }\n    }\n\n    if (isNumber(date)) {\n      date = new Date(date);\n    }\n\n    if (!isDate(date)) {\n      return date;\n    }\n\n    while(format) {\n      match = DATE_FORMATS_SPLIT.exec(format);\n      if (match) {\n        parts = concat(parts, match, 1);\n        format = parts.pop();\n      } else {\n        parts.push(format);\n        format = null;\n      }\n    }\n\n    forEach(parts, function(value){\n      fn = DATE_FORMATS[value];\n      text += fn ? fn(date, $locale.DATETIME_FORMATS)\n                 : value.replace(/(^'|'$)/g, '').replace(/''/g, \"'\");\n    });\n\n    return text;\n  };\n}\n\n\n/**\n * @ngdoc filter\n * @name ng.filter:json\n * @function\n *\n * @description\n *   Allows you to convert a JavaScript object into JSON string.\n *\n *   This filter is mostly useful for debugging. When using the double curly {{value}} notation\n *   the binding is automatically converted to JSON.\n *\n * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.\n * @returns {string} JSON string.\n *\n *\n * @example:\n   <doc:example>\n     <doc:source>\n       <pre>{{ {'name':'value'} | json }}</pre>\n     </doc:source>\n     <doc:scenario>\n       it('should jsonify filtered objects', function() {\n         expect(binding(\"{'name':'value'}\")).toMatch(/\\{\\n  \"name\": ?\"value\"\\n}/);\n       });\n     </doc:scenario>\n   </doc:example>\n *\n */\nfunction jsonFilter() {\n  return function(object) {\n    return toJson(object, true);\n  };\n}\n\n\n/**\n * @ngdoc filter\n * @name ng.filter:lowercase\n * @function\n * @description\n * Converts string to lowercase.\n * @see angular.lowercase\n */\nvar lowercaseFilter = valueFn(lowercase);\n\n\n/**\n * @ngdoc filter\n * @name ng.filter:uppercase\n * @function\n * @description\n * Converts string to uppercase.\n * @see angular.uppercase\n */\nvar uppercaseFilter = valueFn(uppercase);\n\n/**\n * @ngdoc function\n * @name ng.filter:limitTo\n * @function\n *\n * @description\n * Creates a new array or string containing only a specified number of elements. The elements\n * are taken from either the beginning or the end of the source array or string, as specified by\n * the value and sign (positive or negative) of `limit`.\n *\n * Note: This function is used to augment the `Array` type in Angular expressions. See\n * {@link ng.$filter} for more information about Angular arrays.\n *\n * @param {Array|string} input Source array or string to be limited.\n * @param {string|number} limit The length of the returned array or string. If the `limit` number \n *     is positive, `limit` number of items from the beginning of the source array/string are copied.\n *     If the number is negative, `limit` number  of items from the end of the source array/string \n *     are copied. The `limit` will be trimmed if it exceeds `array.length`\n * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array\n *     had less than `limit` elements.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.numbers = [1,2,3,4,5,6,7,8,9];\n           $scope.letters = \"abcdefghi\";\n           $scope.numLimit = 3;\n           $scope.letterLimit = 3;\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         Limit {{numbers}} to: <input type=\"integer\" ng-model=\"numLimit\">\n         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>\n         Limit {{letters}} to: <input type=\"integer\" ng-model=\"letterLimit\">\n         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should limit the number array to first three items', function() {\n         expect(element('.doc-example-live input[ng-model=numLimit]').val()).toBe('3');\n         expect(element('.doc-example-live input[ng-model=letterLimit]').val()).toBe('3');\n         expect(binding('numbers | limitTo:numLimit')).toEqual('[1,2,3]');\n         expect(binding('letters | limitTo:letterLimit')).toEqual('abc');\n       });\n\n       it('should update the output when -3 is entered', function() {\n         input('numLimit').enter(-3);\n         input('letterLimit').enter(-3);\n         expect(binding('numbers | limitTo:numLimit')).toEqual('[7,8,9]');\n         expect(binding('letters | limitTo:letterLimit')).toEqual('ghi');\n       });\n\n       it('should not exceed the maximum size of input array', function() {\n         input('numLimit').enter(100);\n         input('letterLimit').enter(100);\n         expect(binding('numbers | limitTo:numLimit')).toEqual('[1,2,3,4,5,6,7,8,9]');\n         expect(binding('letters | limitTo:letterLimit')).toEqual('abcdefghi');\n       });\n     </doc:scenario>\n   </doc:example>\n */\nfunction limitToFilter(){\n  return function(input, limit) {\n    if (!isArray(input) && !isString(input)) return input;\n    \n    limit = int(limit);\n\n    if (isString(input)) {\n      //NaN check on limit\n      if (limit) {\n        return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);\n      } else {\n        return \"\";\n      }\n    }\n\n    var out = [],\n      i, n;\n\n    // if abs(limit) exceeds maximum length, trim it\n    if (limit > input.length)\n      limit = input.length;\n    else if (limit < -input.length)\n      limit = -input.length;\n\n    if (limit > 0) {\n      i = 0;\n      n = limit;\n    } else {\n      i = input.length + limit;\n      n = input.length;\n    }\n\n    for (; i<n; i++) {\n      out.push(input[i]);\n    }\n\n    return out;\n  }\n}\n\n/**\n * @ngdoc function\n * @name ng.filter:orderBy\n * @function\n *\n * @description\n * Orders a specified `array` by the `expression` predicate.\n *\n * Note: this function is used to augment the `Array` type in Angular expressions. See\n * {@link ng.$filter} for more information about Angular arrays.\n *\n * @param {Array} array The array to sort.\n * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be\n *    used by the comparator to determine the order of elements.\n *\n *    Can be one of:\n *\n *    - `function`: Getter function. The result of this function will be sorted using the\n *      `<`, `=`, `>` operator.\n *    - `string`: An Angular expression which evaluates to an object to order by, such as 'name'\n *      to sort by a property called 'name'. Optionally prefixed with `+` or `-` to control\n *      ascending or descending sort order (for example, +name or -name).\n *    - `Array`: An array of function or string predicates. The first predicate in the array\n *      is used for sorting, but when two items are equivalent, the next predicate is used.\n *\n * @param {boolean=} reverse Reverse the order the array.\n * @returns {Array} Sorted copy of the source array.\n *\n * @example\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.friends =\n               [{name:'John', phone:'555-1212', age:10},\n                {name:'Mary', phone:'555-9876', age:19},\n                {name:'Mike', phone:'555-4321', age:21},\n                {name:'Adam', phone:'555-5678', age:35},\n                {name:'Julie', phone:'555-8765', age:29}]\n           $scope.predicate = '-age';\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>\n         <hr/>\n         [ <a href=\"\" ng-click=\"predicate=''\">unsorted</a> ]\n         <table class=\"friend\">\n           <tr>\n             <th><a href=\"\" ng-click=\"predicate = 'name'; reverse=false\">Name</a>\n                 (<a href ng-click=\"predicate = '-name'; reverse=false\">^</a>)</th>\n             <th><a href=\"\" ng-click=\"predicate = 'phone'; reverse=!reverse\">Phone Number</a></th>\n             <th><a href=\"\" ng-click=\"predicate = 'age'; reverse=!reverse\">Age</a></th>\n           </tr>\n           <tr ng-repeat=\"friend in friends | orderBy:predicate:reverse\">\n             <td>{{friend.name}}</td>\n             <td>{{friend.phone}}</td>\n             <td>{{friend.age}}</td>\n           </tr>\n         </table>\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should be reverse ordered by aged', function() {\n         expect(binding('predicate')).toBe('-age');\n         expect(repeater('table.friend', 'friend in friends').column('friend.age')).\n           toEqual(['35', '29', '21', '19', '10']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Adam', 'Julie', 'Mike', 'Mary', 'John']);\n       });\n\n       it('should reorder the table when user selects different predicate', function() {\n         element('.doc-example-live a:contains(\"Name\")').click();\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Adam', 'John', 'Julie', 'Mary', 'Mike']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.age')).\n           toEqual(['35', '10', '29', '19', '21']);\n\n         element('.doc-example-live a:contains(\"Phone\")').click();\n         expect(repeater('table.friend', 'friend in friends').column('friend.phone')).\n           toEqual(['555-9876', '555-8765', '555-5678', '555-4321', '555-1212']);\n         expect(repeater('table.friend', 'friend in friends').column('friend.name')).\n           toEqual(['Mary', 'Julie', 'Adam', 'Mike', 'John']);\n       });\n     </doc:scenario>\n   </doc:example>\n */\norderByFilter.$inject = ['$parse'];\nfunction orderByFilter($parse){\n  return function(array, sortPredicate, reverseOrder) {\n    if (!isArray(array)) return array;\n    if (!sortPredicate) return array;\n    sortPredicate = isArray(sortPredicate) ? sortPredicate: [sortPredicate];\n    sortPredicate = map(sortPredicate, function(predicate){\n      var descending = false, get = predicate || identity;\n      if (isString(predicate)) {\n        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {\n          descending = predicate.charAt(0) == '-';\n          predicate = predicate.substring(1);\n        }\n        get = $parse(predicate);\n      }\n      return reverseComparator(function(a,b){\n        return compare(get(a),get(b));\n      }, descending);\n    });\n    var arrayCopy = [];\n    for ( var i = 0; i < array.length; i++) { arrayCopy.push(array[i]); }\n    return arrayCopy.sort(reverseComparator(comparator, reverseOrder));\n\n    function comparator(o1, o2){\n      for ( var i = 0; i < sortPredicate.length; i++) {\n        var comp = sortPredicate[i](o1, o2);\n        if (comp !== 0) return comp;\n      }\n      return 0;\n    }\n    function reverseComparator(comp, descending) {\n      return toBoolean(descending)\n          ? function(a,b){return comp(b,a);}\n          : comp;\n    }\n    function compare(v1, v2){\n      var t1 = typeof v1;\n      var t2 = typeof v2;\n      if (t1 == t2) {\n        if (t1 == \"string\") v1 = v1.toLowerCase();\n        if (t1 == \"string\") v2 = v2.toLowerCase();\n        if (v1 === v2) return 0;\n        return v1 < v2 ? -1 : 1;\n      } else {\n        return t1 < t2 ? -1 : 1;\n      }\n    }\n  }\n}\n\nfunction ngDirective(directive) {\n  if (isFunction(directive)) {\n    directive = {\n      link: directive\n    }\n  }\n  directive.restrict = directive.restrict || 'AC';\n  return valueFn(directive);\n}\n\n/**\n * @ngdoc directive\n * @name ng.directive:a\n * @restrict E\n *\n * @description\n * Modifies the default behavior of html A tag, so that the default action is prevented when href\n * attribute is empty.\n *\n * The reasoning for this change is to allow easy creation of action links with `ngClick` directive\n * without changing the location or causing page reloads, e.g.:\n * `<a href=\"\" ng-click=\"model.$save()\">Save</a>`\n */\nvar htmlAnchorDirective = valueFn({\n  restrict: 'E',\n  compile: function(element, attr) {\n\n    if (msie <= 8) {\n\n      // turn <a href ng-click=\"..\">link</a> into a stylable link in IE\n      // but only if it doesn't have name attribute, in which case it's an anchor\n      if (!attr.href && !attr.name) {\n        attr.$set('href', '');\n      }\n\n      // add a comment node to anchors to workaround IE bug that causes element content to be reset\n      // to new attribute content if attribute is updated with value containing @ and element also\n      // contains value with @\n      // see issue #1949\n      element.append(document.createComment('IE fix'));\n    }\n\n    return function(scope, element) {\n      element.bind('click', function(event){\n        // if we have no href url, then don't navigate anywhere.\n        if (!element.attr('href')) {\n          event.preventDefault();\n        }\n      });\n    }\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngHref\n * @restrict A\n *\n * @description\n * Using Angular markup like {{hash}} in an href attribute makes\n * the page open to a wrong URL, if the user clicks that link before\n * angular has a chance to replace the {{hash}} with actual URL, the\n * link will be broken and will most likely return a 404 error.\n * The `ngHref` directive solves this problem.\n *\n * The buggy way to write it:\n * <pre>\n * <a href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * </pre>\n *\n * The correct way to write it:\n * <pre>\n * <a ng-href=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * </pre>\n *\n * @element A\n * @param {template} ngHref any string which can contain `{{}}` markup.\n *\n * @example\n * This example uses `link` variable inside `href` attribute:\n    <doc:example>\n      <doc:source>\n        <input ng-model=\"value\" /><br />\n        <a id=\"link-1\" href ng-click=\"value = 1\">link 1</a> (link, don't reload)<br />\n        <a id=\"link-2\" href=\"\" ng-click=\"value = 2\">link 2</a> (link, don't reload)<br />\n        <a id=\"link-3\" ng-href=\"/{{'123'}}\">link 3</a> (link, reload!)<br />\n        <a id=\"link-4\" href=\"\" name=\"xx\" ng-click=\"value = 4\">anchor</a> (link, don't reload)<br />\n        <a id=\"link-5\" name=\"xxx\" ng-click=\"value = 5\">anchor</a> (no link)<br />\n        <a id=\"link-6\" ng-href=\"{{value}}\">link</a> (link, change location)\n      </doc:source>\n      <doc:scenario>\n        it('should execute ng-click but not reload when href without value', function() {\n          element('#link-1').click();\n          expect(input('value').val()).toEqual('1');\n          expect(element('#link-1').attr('href')).toBe(\"\");\n        });\n\n        it('should execute ng-click but not reload when href empty string', function() {\n          element('#link-2').click();\n          expect(input('value').val()).toEqual('2');\n          expect(element('#link-2').attr('href')).toBe(\"\");\n        });\n\n        it('should execute ng-click and change url when ng-href specified', function() {\n          expect(element('#link-3').attr('href')).toBe(\"/123\");\n\n          element('#link-3').click();\n          expect(browser().window().path()).toEqual('/123');\n        });\n\n        it('should execute ng-click but not reload when href empty string and name specified', function() {\n          element('#link-4').click();\n          expect(input('value').val()).toEqual('4');\n          expect(element('#link-4').attr('href')).toBe('');\n        });\n\n        it('should execute ng-click but not reload when no href but name specified', function() {\n          element('#link-5').click();\n          expect(input('value').val()).toEqual('5');\n          expect(element('#link-5').attr('href')).toBe(undefined);\n        });\n\n        it('should only change url when only ng-href', function() {\n          input('value').enter('6');\n          expect(element('#link-6').attr('href')).toBe('6');\n\n          element('#link-6').click();\n          expect(browser().location().url()).toEqual('/6');\n        });\n      </doc:scenario>\n    </doc:example>\n */\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngSrc\n * @restrict A\n *\n * @description\n * Using Angular markup like `{{hash}}` in a `src` attribute doesn't\n * work right: The browser will fetch from the URL with the literal\n * text `{{hash}}` until Angular replaces the expression inside\n * `{{hash}}`. The `ngSrc` directive solves this problem.\n *\n * The buggy way to write it:\n * <pre>\n * <img src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * </pre>\n *\n * The correct way to write it:\n * <pre>\n * <img ng-src=\"http://www.gravatar.com/avatar/{{hash}}\"/>\n * </pre>\n *\n * @element IMG\n * @param {template} ngSrc any string which can contain `{{}}` markup.\n */\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngSrcset\n * @restrict A\n *\n * @description\n * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't\n * work right: The browser will fetch from the URL with the literal\n * text `{{hash}}` until Angular replaces the expression inside\n * `{{hash}}`. The `ngSrcset` directive solves this problem.\n *\n * The buggy way to write it:\n * <pre>\n * <img srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n * </pre>\n *\n * The correct way to write it:\n * <pre>\n * <img ng-srcset=\"http://www.gravatar.com/avatar/{{hash}} 2x\"/>\n * </pre>\n *\n * @element IMG\n * @param {template} ngSrcset any string which can contain `{{}}` markup.\n */\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngDisabled\n * @restrict A\n *\n * @description\n *\n * The following markup will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:\n * <pre>\n * <div ng-init=\"scope = { isDisabled: false }\">\n *  <button disabled=\"{{scope.isDisabled}}\">Disabled</button>\n * </div>\n * </pre>\n *\n * The HTML specs do not require browsers to preserve the special attributes such as disabled.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngDisabled` directive.\n *\n * @example\n    <doc:example>\n      <doc:source>\n        Click me to toggle: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        <button ng-model=\"button\" ng-disabled=\"checked\">Button</button>\n      </doc:source>\n      <doc:scenario>\n        it('should toggle button', function() {\n          expect(element('.doc-example-live :button').prop('disabled')).toBeFalsy();\n          input('checked').check();\n          expect(element('.doc-example-live :button').prop('disabled')).toBeTruthy();\n        });\n      </doc:scenario>\n    </doc:example>\n *\n * @element INPUT\n * @param {expression} ngDisabled Angular expression that will be evaluated.\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngChecked\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as checked.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngChecked` directive.\n * @example\n    <doc:example>\n      <doc:source>\n        Check me to check both: <input type=\"checkbox\" ng-model=\"master\"><br/>\n        <input id=\"checkSlave\" type=\"checkbox\" ng-checked=\"master\">\n      </doc:source>\n      <doc:scenario>\n        it('should check both checkBoxes', function() {\n          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeFalsy();\n          input('master').check();\n          expect(element('.doc-example-live #checkSlave').prop('checked')).toBeTruthy();\n        });\n      </doc:scenario>\n    </doc:example>\n *\n * @element INPUT\n * @param {expression} ngChecked Angular expression that will be evaluated.\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngMultiple\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as multiple.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngMultiple` directive.\n *\n * @example\n     <doc:example>\n       <doc:source>\n         Check me check multiple: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n         <select id=\"select\" ng-multiple=\"checked\">\n           <option>Misko</option>\n           <option>Igor</option>\n           <option>Vojta</option>\n           <option>Di</option>\n         </select>\n       </doc:source>\n       <doc:scenario>\n         it('should toggle multiple', function() {\n           expect(element('.doc-example-live #select').prop('multiple')).toBeFalsy();\n           input('checked').check();\n           expect(element('.doc-example-live #select').prop('multiple')).toBeTruthy();\n         });\n       </doc:scenario>\n     </doc:example>\n *\n * @element SELECT\n * @param {expression} ngMultiple Angular expression that will be evaluated.\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngReadonly\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as readonly.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngReadonly` directive.\n * @example\n    <doc:example>\n      <doc:source>\n        Check me to make text readonly: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n        <input type=\"text\" ng-readonly=\"checked\" value=\"I'm Angular\"/>\n      </doc:source>\n      <doc:scenario>\n        it('should toggle readonly attr', function() {\n          expect(element('.doc-example-live :text').prop('readonly')).toBeFalsy();\n          input('checked').check();\n          expect(element('.doc-example-live :text').prop('readonly')).toBeTruthy();\n        });\n      </doc:scenario>\n    </doc:example>\n *\n * @element INPUT\n * @param {string} expression Angular expression that will be evaluated.\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngSelected\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as selected.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduced the `ngSelected` directive.\n * @example\n    <doc:example>\n      <doc:source>\n        Check me to select: <input type=\"checkbox\" ng-model=\"selected\"><br/>\n        <select>\n          <option>Hello!</option>\n          <option id=\"greet\" ng-selected=\"selected\">Greetings!</option>\n        </select>\n      </doc:source>\n      <doc:scenario>\n        it('should select Greetings!', function() {\n          expect(element('.doc-example-live #greet').prop('selected')).toBeFalsy();\n          input('selected').check();\n          expect(element('.doc-example-live #greet').prop('selected')).toBeTruthy();\n        });\n      </doc:scenario>\n    </doc:example>\n *\n * @element OPTION\n * @param {string} expression Angular expression that will be evaluated.\n */\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngOpen\n * @restrict A\n *\n * @description\n * The HTML specs do not require browsers to preserve the special attributes such as open.\n * (The presence of them means true and absence means false)\n * This prevents the angular compiler from correctly retrieving the binding expression.\n * To solve this problem, we introduce the `ngOpen` directive.\n *\n * @example\n     <doc:example>\n       <doc:source>\n         Check me check multiple: <input type=\"checkbox\" ng-model=\"open\"><br/>\n         <details id=\"details\" ng-open=\"open\">\n            <summary>Show/Hide me</summary>\n         </details>\n       </doc:source>\n       <doc:scenario>\n         it('should toggle open', function() {\n           expect(element('#details').prop('open')).toBeFalsy();\n           input('open').check();\n           expect(element('#details').prop('open')).toBeTruthy();\n         });\n       </doc:scenario>\n     </doc:example>\n *\n * @element DETAILS\n * @param {string} expression Angular expression that will be evaluated.\n */\n\nvar ngAttributeAliasDirectives = {};\n\n\n// boolean attrs are evaluated\nforEach(BOOLEAN_ATTR, function(propName, attrName) {\n  var normalized = directiveNormalize('ng-' + attrName);\n  ngAttributeAliasDirectives[normalized] = function() {\n    return {\n      priority: 100,\n      compile: function() {\n        return function(scope, element, attr) {\n          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {\n            attr.$set(attrName, !!value);\n          });\n        };\n      }\n    };\n  };\n});\n\n\n// ng-src, ng-srcset, ng-href are interpolated\nforEach(['src', 'srcset', 'href'], function(attrName) {\n  var normalized = directiveNormalize('ng-' + attrName);\n  ngAttributeAliasDirectives[normalized] = function() {\n    return {\n      priority: 99, // it needs to run after the attributes are interpolated\n      link: function(scope, element, attr) {\n        attr.$observe(normalized, function(value) {\n          if (!value)\n             return;\n\n          attr.$set(attrName, value);\n\n          // on IE, if \"ng:src\" directive declaration is used and \"src\" attribute doesn't exist\n          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need\n          // to set the property as well to achieve the desired effect.\n          // we use attr[attrName] value since $set can sanitize the url.\n          if (msie) element.prop(attrName, attr[attrName]);\n        });\n      }\n    };\n  };\n});\n\nvar nullFormCtrl = {\n  $addControl: noop,\n  $removeControl: noop,\n  $setValidity: noop,\n  $setDirty: noop,\n  $setPristine: noop\n};\n\n/**\n * @ngdoc object\n * @name ng.directive:form.FormController\n *\n * @property {boolean} $pristine True if user has not interacted with the form yet.\n * @property {boolean} $dirty True if user has already interacted with the form.\n * @property {boolean} $valid True if all of the containing forms and controls are valid.\n * @property {boolean} $invalid True if at least one containing control or form is invalid.\n *\n * @property {Object} $error Is an object hash, containing references to all invalid controls or\n *  forms, where:\n *\n *  - keys are validation tokens (error names) — such as `required`, `url` or `email`),\n *  - values are arrays of controls or forms that are invalid with given error.\n *\n * @description\n * `FormController` keeps track of all its controls and nested forms as well as state of them,\n * such as being valid/invalid or dirty/pristine.\n *\n * Each {@link ng.directive:form form} directive creates an instance\n * of `FormController`.\n *\n */\n//asks for $scope to fool the BC controller module\nFormController.$inject = ['$element', '$attrs', '$scope'];\nfunction FormController(element, attrs) {\n  var form = this,\n      parentForm = element.parent().controller('form') || nullFormCtrl,\n      invalidCount = 0, // used to easily determine if we are valid\n      errors = form.$error = {},\n      controls = [];\n\n  // init state\n  form.$name = attrs.name;\n  form.$dirty = false;\n  form.$pristine = true;\n  form.$valid = true;\n  form.$invalid = false;\n\n  parentForm.$addControl(form);\n\n  // Setup initial state of the control\n  element.addClass(PRISTINE_CLASS);\n  toggleValidCss(true);\n\n  // convenience method for easy toggling of classes\n  function toggleValidCss(isValid, validationErrorKey) {\n    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';\n    element.\n      removeClass((isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey).\n      addClass((isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);\n  }\n\n  form.$addControl = function(control) {\n    controls.push(control);\n\n    if (control.$name && !form.hasOwnProperty(control.$name)) {\n      form[control.$name] = control;\n    }\n  };\n\n  form.$removeControl = function(control) {\n    if (control.$name && form[control.$name] === control) {\n      delete form[control.$name];\n    }\n    forEach(errors, function(queue, validationToken) {\n      form.$setValidity(validationToken, true, control);\n    });\n\n    arrayRemove(controls, control);\n  };\n\n  form.$setValidity = function(validationToken, isValid, control) {\n    var queue = errors[validationToken];\n\n    if (isValid) {\n      if (queue) {\n        arrayRemove(queue, control);\n        if (!queue.length) {\n          invalidCount--;\n          if (!invalidCount) {\n            toggleValidCss(isValid);\n            form.$valid = true;\n            form.$invalid = false;\n          }\n          errors[validationToken] = false;\n          toggleValidCss(true, validationToken);\n          parentForm.$setValidity(validationToken, true, form);\n        }\n      }\n\n    } else {\n      if (!invalidCount) {\n        toggleValidCss(isValid);\n      }\n      if (queue) {\n        if (includes(queue, control)) return;\n      } else {\n        errors[validationToken] = queue = [];\n        invalidCount++;\n        toggleValidCss(false, validationToken);\n        parentForm.$setValidity(validationToken, false, form);\n      }\n      queue.push(control);\n\n      form.$valid = false;\n      form.$invalid = true;\n    }\n  };\n\n  form.$setDirty = function() {\n    element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);\n    form.$dirty = true;\n    form.$pristine = false;\n    parentForm.$setDirty();\n  };\n\n  /**\n   * @ngdoc function\n   * @name ng.directive:form.FormController#$setPristine\n   * @methodOf ng.directive:form.FormController\n   *\n   * @description\n   * Sets the form to its pristine state.\n   *\n   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine\n   * state (ng-pristine class). This method will also propagate to all the controls contained\n   * in this form.\n   *\n   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after\n   * saving or resetting it.\n   */\n  form.$setPristine = function () {\n    element.removeClass(DIRTY_CLASS).addClass(PRISTINE_CLASS);\n    form.$dirty = false;\n    form.$pristine = true;\n    forEach(controls, function(control) {\n      control.$setPristine();\n    });\n  };\n}\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngForm\n * @restrict EAC\n *\n * @description\n * Nestable alias of {@link ng.directive:form `form`} directive. HTML\n * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a\n * sub-group of controls needs to be determined.\n *\n * @param {string=} name|ngForm Name of the form. If specified, the form controller will be published into\n *                       related scope, under this name.\n *\n */\n\n /**\n * @ngdoc directive\n * @name ng.directive:form\n * @restrict E\n *\n * @description\n * Directive that instantiates\n * {@link ng.directive:form.FormController FormController}.\n *\n * If `name` attribute is specified, the form controller is published onto the current scope under\n * this name.\n *\n * # Alias: {@link ng.directive:ngForm `ngForm`}\n *\n * In angular forms can be nested. This means that the outer form is valid when all of the child\n * forms are valid as well. However browsers do not allow nesting of `<form>` elements, for this\n * reason angular provides {@link ng.directive:ngForm `ngForm`} alias\n * which behaves identical to `<form>` but allows form nesting.\n *\n *\n * # CSS classes\n *  - `ng-valid` Is set if the form is valid.\n *  - `ng-invalid` Is set if the form is invalid.\n *  - `ng-pristine` Is set if the form is pristine.\n *  - `ng-dirty` Is set if the form is dirty.\n *\n *\n * # Submitting a form and preventing default action\n *\n * Since the role of forms in client-side Angular applications is different than in classical\n * roundtrip apps, it is desirable for the browser not to translate the form submission into a full\n * page reload that sends the data to the server. Instead some javascript logic should be triggered\n * to handle the form submission in application specific way.\n *\n * For this reason, Angular prevents the default action (form submission to the server) unless the\n * `<form>` element has an `action` attribute specified.\n *\n * You can use one of the following two ways to specify what javascript method should be called when\n * a form is submitted:\n *\n * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n * - {@link ng.directive:ngClick ngClick} directive on the first\n  *  button or input field of type submit (input[type=submit])\n *\n * To prevent double execution of the handler, use only one of ngSubmit or ngClick directives. This\n * is because of the following form submission rules coming from the html spec:\n *\n * - If a form has only one input field then hitting enter in this field triggers form submit\n * (`ngSubmit`)\n * - if a form has has 2+ input fields and no buttons or input[type=submit] then hitting enter\n * doesn't trigger submit\n * - if a form has one or more input fields and one or more buttons or input[type=submit] then\n * hitting enter in any of the input fields will trigger the click handler on the *first* button or\n * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n *\n * @param {string=} name Name of the form. If specified, the form controller will be published into\n *                       related scope, under this name.\n *\n * @example\n    <doc:example>\n      <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.userType = 'guest';\n         }\n       </script>\n       <form name=\"myForm\" ng-controller=\"Ctrl\">\n         userType: <input name=\"input\" ng-model=\"userType\" required>\n         <span class=\"error\" ng-show=\"myForm.input.$error.required\">Required!</span><br>\n         <tt>userType = {{userType}}</tt><br>\n         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>\n         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n        </form>\n      </doc:source>\n      <doc:scenario>\n        it('should initialize to model', function() {\n         expect(binding('userType')).toEqual('guest');\n         expect(binding('myForm.input.$valid')).toEqual('true');\n        });\n\n        it('should be invalid if empty', function() {\n         input('userType').enter('');\n         expect(binding('userType')).toEqual('');\n         expect(binding('myForm.input.$valid')).toEqual('false');\n        });\n      </doc:scenario>\n    </doc:example>\n */\nvar formDirectiveFactory = function(isNgForm) {\n  return ['$timeout', function($timeout) {\n    var formDirective = {\n      name: 'form',\n      restrict: 'E',\n      controller: FormController,\n      compile: function() {\n        return {\n          pre: function(scope, formElement, attr, controller) {\n            if (!attr.action) {\n              // we can't use jq events because if a form is destroyed during submission the default\n              // action is not prevented. see #1238\n              //\n              // IE 9 is not affected because it doesn't fire a submit event and try to do a full\n              // page reload if the form was destroyed by submission of the form via a click handler\n              // on a button in the form. Looks like an IE9 specific bug.\n              var preventDefaultListener = function(event) {\n                event.preventDefault\n                  ? event.preventDefault()\n                  : event.returnValue = false; // IE\n              };\n\n              addEventListenerFn(formElement[0], 'submit', preventDefaultListener);\n\n              // unregister the preventDefault listener so that we don't not leak memory but in a\n              // way that will achieve the prevention of the default action.\n              formElement.bind('$destroy', function() {\n                $timeout(function() {\n                  removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);\n                }, 0, false);\n              });\n            }\n\n            var parentFormCtrl = formElement.parent().controller('form'),\n                alias = attr.name || attr.ngForm;\n\n            if (alias) {\n              scope[alias] = controller;\n            }\n            if (parentFormCtrl) {\n              formElement.bind('$destroy', function() {\n                parentFormCtrl.$removeControl(controller);\n                if (alias) {\n                  scope[alias] = undefined;\n                }\n                extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards\n              });\n            }\n          }\n        };\n      }\n    };\n\n    return isNgForm ? extend(copy(formDirective), {restrict: 'EAC'}) : formDirective;\n  }];\n};\n\nvar formDirective = formDirectiveFactory();\nvar ngFormDirective = formDirectiveFactory(true);\n\nvar URL_REGEXP = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/;\nvar EMAIL_REGEXP = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/;\nvar NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))\\s*$/;\n\nvar inputType = {\n\n  /**\n   * @ngdoc inputType\n   * @name ng.directive:input.text\n   *\n   * @description\n   * Standard HTML text input with angular data binding.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Adds `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   *    patterns defined as scope expressions.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trimming the\n   *    input.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.text = 'guest';\n             $scope.word = /^\\s*\\w*\\s*$/;\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           Single word: <input type=\"text\" name=\"input\" ng-model=\"text\"\n                               ng-pattern=\"word\" required ng-trim=\"false\">\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.pattern\">\n             Single word only!</span>\n\n           <tt>text = {{text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should initialize to model', function() {\n            expect(binding('text')).toEqual('guest');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should be invalid if multi word', function() {\n            input('text').enter('hello world');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should not be trimmed', function() {\n            input('text').enter('untrimmed ');\n            expect(binding('text')).toEqual('untrimmed ');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n        </doc:scenario>\n      </doc:example>\n   */\n  'text': textInputType,\n\n\n  /**\n   * @ngdoc inputType\n   * @name ng.directive:input.number\n   *\n   * @description\n   * Text input with number validation and transformation. Sets the `number` validation\n   * error if not a valid number.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.\n   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   *    patterns defined as scope expressions.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.value = 12;\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           Number: <input type=\"number\" name=\"input\" ng-model=\"value\"\n                          min=\"0\" max=\"99\" required>\n           <span class=\"error\" ng-show=\"myForm.list.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.list.$error.number\">\n             Not valid number!</span>\n           <tt>value = {{value}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should initialize to model', function() {\n           expect(binding('value')).toEqual('12');\n           expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n          it('should be invalid if empty', function() {\n           input('value').enter('');\n           expect(binding('value')).toEqual('');\n           expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should be invalid if over max', function() {\n           input('value').enter('123');\n           expect(binding('value')).toEqual('');\n           expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n        </doc:scenario>\n      </doc:example>\n   */\n  'number': numberInputType,\n\n\n  /**\n   * @ngdoc inputType\n   * @name ng.directive:input.url\n   *\n   * @description\n   * Text input with URL validation. Sets the `url` validation error key if the content is not a\n   * valid URL.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   *    patterns defined as scope expressions.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.text = 'http://google.com';\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           URL: <input type=\"url\" name=\"input\" ng-model=\"text\" required>\n           <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n             Required!</span>\n           <span class=\"error\" ng-show=\"myForm.input.$error.url\">\n             Not valid url!</span>\n           <tt>text = {{text}}</tt><br/>\n           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should initialize to model', function() {\n            expect(binding('text')).toEqual('http://google.com');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should be invalid if not url', function() {\n            input('text').enter('xxx');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n        </doc:scenario>\n      </doc:example>\n   */\n  'url': urlInputType,\n\n\n  /**\n   * @ngdoc inputType\n   * @name ng.directive:input.email\n   *\n   * @description\n   * Text input with email validation. Sets the `email` validation error key if not a valid email\n   * address.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} required Sets `required` validation error key if the value is not entered.\n   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n   *    `required` when you want to data-bind to the `required` attribute.\n   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n   *    minlength.\n   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n   *    maxlength.\n   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n   *    patterns defined as scope expressions.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.text = 'me@example.com';\n           }\n         </script>\n           <form name=\"myForm\" ng-controller=\"Ctrl\">\n             Email: <input type=\"email\" name=\"input\" ng-model=\"text\" required>\n             <span class=\"error\" ng-show=\"myForm.input.$error.required\">\n               Required!</span>\n             <span class=\"error\" ng-show=\"myForm.input.$error.email\">\n               Not valid email!</span>\n             <tt>text = {{text}}</tt><br/>\n             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>\n             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>\n             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>\n           </form>\n        </doc:source>\n        <doc:scenario>\n          it('should initialize to model', function() {\n            expect(binding('text')).toEqual('me@example.com');\n            expect(binding('myForm.input.$valid')).toEqual('true');\n          });\n\n          it('should be invalid if empty', function() {\n            input('text').enter('');\n            expect(binding('text')).toEqual('');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n\n          it('should be invalid if not email', function() {\n            input('text').enter('xxx');\n            expect(binding('myForm.input.$valid')).toEqual('false');\n          });\n        </doc:scenario>\n      </doc:example>\n   */\n  'email': emailInputType,\n\n\n  /**\n   * @ngdoc inputType\n   * @name ng.directive:input.radio\n   *\n   * @description\n   * HTML radio button.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string} value The value to which the expression should be set when selected.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.color = 'blue';\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           <input type=\"radio\" ng-model=\"color\" value=\"red\">  Red <br/>\n           <input type=\"radio\" ng-model=\"color\" value=\"green\"> Green <br/>\n           <input type=\"radio\" ng-model=\"color\" value=\"blue\"> Blue <br/>\n           <tt>color = {{color}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should change state', function() {\n            expect(binding('color')).toEqual('blue');\n\n            input('color').select('red');\n            expect(binding('color')).toEqual('red');\n          });\n        </doc:scenario>\n      </doc:example>\n   */\n  'radio': radioInputType,\n\n\n  /**\n   * @ngdoc inputType\n   * @name ng.directive:input.checkbox\n   *\n   * @description\n   * HTML checkbox.\n   *\n   * @param {string} ngModel Assignable angular expression to data-bind to.\n   * @param {string=} name Property name of the form under which the control is published.\n   * @param {string=} ngTrueValue The value to which the expression should be set when selected.\n   * @param {string=} ngFalseValue The value to which the expression should be set when not selected.\n   * @param {string=} ngChange Angular expression to be executed when input changes due to user\n   *    interaction with the input element.\n   *\n   * @example\n      <doc:example>\n        <doc:source>\n         <script>\n           function Ctrl($scope) {\n             $scope.value1 = true;\n             $scope.value2 = 'YES'\n           }\n         </script>\n         <form name=\"myForm\" ng-controller=\"Ctrl\">\n           Value1: <input type=\"checkbox\" ng-model=\"value1\"> <br/>\n           Value2: <input type=\"checkbox\" ng-model=\"value2\"\n                          ng-true-value=\"YES\" ng-false-value=\"NO\"> <br/>\n           <tt>value1 = {{value1}}</tt><br/>\n           <tt>value2 = {{value2}}</tt><br/>\n          </form>\n        </doc:source>\n        <doc:scenario>\n          it('should change state', function() {\n            expect(binding('value1')).toEqual('true');\n            expect(binding('value2')).toEqual('YES');\n\n            input('value1').check();\n            input('value2').check();\n            expect(binding('value1')).toEqual('false');\n            expect(binding('value2')).toEqual('NO');\n          });\n        </doc:scenario>\n      </doc:example>\n   */\n  'checkbox': checkboxInputType,\n\n  'hidden': noop,\n  'button': noop,\n  'submit': noop,\n  'reset': noop\n};\n\n\nfunction isEmpty(value) {\n  return isUndefined(value) || value === '' || value === null || value !== value;\n}\n\n\nfunction textInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n\n  var listener = function() {\n    var value = element.val();\n\n    // By default we will trim the value\n    // If the attribute ng-trim exists we will avoid trimming\n    // e.g. <input ng-model=\"foo\" ng-trim=\"false\">\n    if (toBoolean(attr.ngTrim || 'T')) {\n      value = trim(value);\n    }\n\n    if (ctrl.$viewValue !== value) {\n      scope.$apply(function() {\n        ctrl.$setViewValue(value);\n      });\n    }\n  };\n\n  // if the browser does support \"input\" event, we are fine - except on IE9 which doesn't fire the\n  // input event on backspace, delete or cut\n  if ($sniffer.hasEvent('input')) {\n    element.bind('input', listener);\n  } else {\n    var timeout;\n\n    var deferListener = function() {\n      if (!timeout) {\n        timeout = $browser.defer(function() {\n          listener();\n          timeout = null;\n        });\n      }\n    };\n\n    element.bind('keydown', function(event) {\n      var key = event.keyCode;\n\n      // ignore\n      //    command            modifiers                   arrows\n      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;\n\n      deferListener();\n    });\n\n    // if user paste into input using mouse, we need \"change\" event to catch it\n    element.bind('change', listener);\n\n    // if user modifies input value using context menu in IE, we need \"paste\" and \"cut\" events to catch it\n    if ($sniffer.hasEvent('paste')) {\n      element.bind('paste cut', deferListener);\n    }\n  }\n\n\n  ctrl.$render = function() {\n    element.val(isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);\n  };\n\n  // pattern validator\n  var pattern = attr.ngPattern,\n      patternValidator,\n      match;\n\n  var validate = function(regexp, value) {\n    if (isEmpty(value) || regexp.test(value)) {\n      ctrl.$setValidity('pattern', true);\n      return value;\n    } else {\n      ctrl.$setValidity('pattern', false);\n      return undefined;\n    }\n  };\n\n  if (pattern) {\n    match = pattern.match(/^\\/(.*)\\/([gim]*)$/);\n    if (match) {\n      pattern = new RegExp(match[1], match[2]);\n      patternValidator = function(value) {\n        return validate(pattern, value)\n      };\n    } else {\n      patternValidator = function(value) {\n        var patternObj = scope.$eval(pattern);\n\n        if (!patternObj || !patternObj.test) {\n          throw new Error('Expected ' + pattern + ' to be a RegExp but was ' + patternObj);\n        }\n        return validate(patternObj, value);\n      };\n    }\n\n    ctrl.$formatters.push(patternValidator);\n    ctrl.$parsers.push(patternValidator);\n  }\n\n  // min length validator\n  if (attr.ngMinlength) {\n    var minlength = int(attr.ngMinlength);\n    var minLengthValidator = function(value) {\n      if (!isEmpty(value) && value.length < minlength) {\n        ctrl.$setValidity('minlength', false);\n        return undefined;\n      } else {\n        ctrl.$setValidity('minlength', true);\n        return value;\n      }\n    };\n\n    ctrl.$parsers.push(minLengthValidator);\n    ctrl.$formatters.push(minLengthValidator);\n  }\n\n  // max length validator\n  if (attr.ngMaxlength) {\n    var maxlength = int(attr.ngMaxlength);\n    var maxLengthValidator = function(value) {\n      if (!isEmpty(value) && value.length > maxlength) {\n        ctrl.$setValidity('maxlength', false);\n        return undefined;\n      } else {\n        ctrl.$setValidity('maxlength', true);\n        return value;\n      }\n    };\n\n    ctrl.$parsers.push(maxLengthValidator);\n    ctrl.$formatters.push(maxLengthValidator);\n  }\n}\n\nfunction numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  textInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n  ctrl.$parsers.push(function(value) {\n    var empty = isEmpty(value);\n    if (empty || NUMBER_REGEXP.test(value)) {\n      ctrl.$setValidity('number', true);\n      return value === '' ? null : (empty ? value : parseFloat(value));\n    } else {\n      ctrl.$setValidity('number', false);\n      return undefined;\n    }\n  });\n\n  ctrl.$formatters.push(function(value) {\n    return isEmpty(value) ? '' : '' + value;\n  });\n\n  if (attr.min) {\n    var min = parseFloat(attr.min);\n    var minValidator = function(value) {\n      if (!isEmpty(value) && value < min) {\n        ctrl.$setValidity('min', false);\n        return undefined;\n      } else {\n        ctrl.$setValidity('min', true);\n        return value;\n      }\n    };\n\n    ctrl.$parsers.push(minValidator);\n    ctrl.$formatters.push(minValidator);\n  }\n\n  if (attr.max) {\n    var max = parseFloat(attr.max);\n    var maxValidator = function(value) {\n      if (!isEmpty(value) && value > max) {\n        ctrl.$setValidity('max', false);\n        return undefined;\n      } else {\n        ctrl.$setValidity('max', true);\n        return value;\n      }\n    };\n\n    ctrl.$parsers.push(maxValidator);\n    ctrl.$formatters.push(maxValidator);\n  }\n\n  ctrl.$formatters.push(function(value) {\n\n    if (isEmpty(value) || isNumber(value)) {\n      ctrl.$setValidity('number', true);\n      return value;\n    } else {\n      ctrl.$setValidity('number', false);\n      return undefined;\n    }\n  });\n}\n\nfunction urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  textInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n  var urlValidator = function(value) {\n    if (isEmpty(value) || URL_REGEXP.test(value)) {\n      ctrl.$setValidity('url', true);\n      return value;\n    } else {\n      ctrl.$setValidity('url', false);\n      return undefined;\n    }\n  };\n\n  ctrl.$formatters.push(urlValidator);\n  ctrl.$parsers.push(urlValidator);\n}\n\nfunction emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {\n  textInputType(scope, element, attr, ctrl, $sniffer, $browser);\n\n  var emailValidator = function(value) {\n    if (isEmpty(value) || EMAIL_REGEXP.test(value)) {\n      ctrl.$setValidity('email', true);\n      return value;\n    } else {\n      ctrl.$setValidity('email', false);\n      return undefined;\n    }\n  };\n\n  ctrl.$formatters.push(emailValidator);\n  ctrl.$parsers.push(emailValidator);\n}\n\nfunction radioInputType(scope, element, attr, ctrl) {\n  // make the name unique, if not defined\n  if (isUndefined(attr.name)) {\n    element.attr('name', nextUid());\n  }\n\n  element.bind('click', function() {\n    if (element[0].checked) {\n      scope.$apply(function() {\n        ctrl.$setViewValue(attr.value);\n      });\n    }\n  });\n\n  ctrl.$render = function() {\n    var value = attr.value;\n    element[0].checked = (value == ctrl.$viewValue);\n  };\n\n  attr.$observe('value', ctrl.$render);\n}\n\nfunction checkboxInputType(scope, element, attr, ctrl) {\n  var trueValue = attr.ngTrueValue,\n      falseValue = attr.ngFalseValue;\n\n  if (!isString(trueValue)) trueValue = true;\n  if (!isString(falseValue)) falseValue = false;\n\n  element.bind('click', function() {\n    scope.$apply(function() {\n      ctrl.$setViewValue(element[0].checked);\n    });\n  });\n\n  ctrl.$render = function() {\n    element[0].checked = ctrl.$viewValue;\n  };\n\n  ctrl.$formatters.push(function(value) {\n    return value === trueValue;\n  });\n\n  ctrl.$parsers.push(function(value) {\n    return value ? trueValue : falseValue;\n  });\n}\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:textarea\n * @restrict E\n *\n * @description\n * HTML textarea element control with angular data-binding. The data-binding and validation\n * properties of this element are exactly the same as those of the\n * {@link ng.directive:input input element}.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n *    `required` when you want to data-bind to the `required` attribute.\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n *    minlength.\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n *    maxlength.\n * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n *    patterns defined as scope expressions.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:input\n * @restrict E\n *\n * @description\n * HTML input element control with angular data-binding. Input control follows HTML5 input types\n * and polyfills the HTML5 validation behavior for older browsers.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required Sets `required` validation error key if the value is not entered.\n * @param {boolean=} ngRequired Sets `required` attribute if set to true\n * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than\n *    minlength.\n * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than\n *    maxlength.\n * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the\n *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for\n *    patterns defined as scope expressions.\n * @param {string=} ngChange Angular expression to be executed when input changes due to user\n *    interaction with the input element.\n *\n * @example\n    <doc:example>\n      <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.user = {name: 'guest', last: 'visitor'};\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <form name=\"myForm\">\n           User name: <input type=\"text\" name=\"userName\" ng-model=\"user.name\" required>\n           <span class=\"error\" ng-show=\"myForm.userName.$error.required\">\n             Required!</span><br>\n           Last name: <input type=\"text\" name=\"lastName\" ng-model=\"user.last\"\n             ng-minlength=\"3\" ng-maxlength=\"10\">\n           <span class=\"error\" ng-show=\"myForm.lastName.$error.minlength\">\n             Too short!</span>\n           <span class=\"error\" ng-show=\"myForm.lastName.$error.maxlength\">\n             Too long!</span><br>\n         </form>\n         <hr>\n         <tt>user = {{user}}</tt><br/>\n         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>\n         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>\n         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>\n         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>\n         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>\n         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>\n       </div>\n      </doc:source>\n      <doc:scenario>\n        it('should initialize to model', function() {\n          expect(binding('user')).toEqual('{\"name\":\"guest\",\"last\":\"visitor\"}');\n          expect(binding('myForm.userName.$valid')).toEqual('true');\n          expect(binding('myForm.$valid')).toEqual('true');\n        });\n\n        it('should be invalid if empty when required', function() {\n          input('user.name').enter('');\n          expect(binding('user')).toEqual('{\"last\":\"visitor\"}');\n          expect(binding('myForm.userName.$valid')).toEqual('false');\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n\n        it('should be valid if empty when min length is set', function() {\n          input('user.last').enter('');\n          expect(binding('user')).toEqual('{\"name\":\"guest\",\"last\":\"\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('true');\n          expect(binding('myForm.$valid')).toEqual('true');\n        });\n\n        it('should be invalid if less than required min length', function() {\n          input('user.last').enter('xx');\n          expect(binding('user')).toEqual('{\"name\":\"guest\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('false');\n          expect(binding('myForm.lastName.$error')).toMatch(/minlength/);\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n\n        it('should be invalid if longer than max length', function() {\n          input('user.last').enter('some ridiculously long name');\n          expect(binding('user'))\n            .toEqual('{\"name\":\"guest\"}');\n          expect(binding('myForm.lastName.$valid')).toEqual('false');\n          expect(binding('myForm.lastName.$error')).toMatch(/maxlength/);\n          expect(binding('myForm.$valid')).toEqual('false');\n        });\n      </doc:scenario>\n    </doc:example>\n */\nvar inputDirective = ['$browser', '$sniffer', function($browser, $sniffer) {\n  return {\n    restrict: 'E',\n    require: '?ngModel',\n    link: function(scope, element, attr, ctrl) {\n      if (ctrl) {\n        (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer,\n                                                            $browser);\n      }\n    }\n  };\n}];\n\nvar VALID_CLASS = 'ng-valid',\n    INVALID_CLASS = 'ng-invalid',\n    PRISTINE_CLASS = 'ng-pristine',\n    DIRTY_CLASS = 'ng-dirty';\n\n/**\n * @ngdoc object\n * @name ng.directive:ngModel.NgModelController\n *\n * @property {string} $viewValue Actual string value in the view.\n * @property {*} $modelValue The value in the model, that the control is bound to.\n * @property {Array.<Function>} $parsers Whenever the control reads value from the DOM, it executes\n *     all of these functions to sanitize / convert the value as well as validate.\n *\n * @property {Array.<Function>} $formatters Whenever the model value changes, it executes all of\n *     these functions to convert the value as well as validate.\n *\n * @property {Object} $error An object hash with all errors as keys.\n *\n * @property {boolean} $pristine True if user has not interacted with the control yet.\n * @property {boolean} $dirty True if user has already interacted with the control.\n * @property {boolean} $valid True if there is no error.\n * @property {boolean} $invalid True if at least one error on the control.\n *\n * @description\n *\n * `NgModelController` provides API for the `ng-model` directive. The controller contains\n * services for data-binding, validation, CSS update, value formatting and parsing. It\n * specifically does not contain any logic which deals with DOM rendering or listening to\n * DOM events. The `NgModelController` is meant to be extended by other directives where, the\n * directive provides DOM manipulation and the `NgModelController` provides the data-binding.\n *\n * This example shows how to use `NgModelController` with a custom control to achieve\n * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)\n * collaborate together to achieve the desired result.\n *\n * <example module=\"customControl\">\n    <file name=\"style.css\">\n      [contenteditable] {\n        border: 1px solid black;\n        background-color: white;\n        min-height: 20px;\n      }\n\n      .ng-invalid {\n        border: 1px solid red;\n      }\n\n    </file>\n    <file name=\"script.js\">\n      angular.module('customControl', []).\n        directive('contenteditable', function() {\n          return {\n            restrict: 'A', // only activate on element attribute\n            require: '?ngModel', // get a hold of NgModelController\n            link: function(scope, element, attrs, ngModel) {\n              if(!ngModel) return; // do nothing if no ng-model\n\n              // Specify how UI should be updated\n              ngModel.$render = function() {\n                element.html(ngModel.$viewValue || '');\n              };\n\n              // Listen for change events to enable binding\n              element.bind('blur keyup change', function() {\n                scope.$apply(read);\n              });\n              read(); // initialize\n\n              // Write data to the model\n              function read() {\n                ngModel.$setViewValue(element.html());\n              }\n            }\n          };\n        });\n    </file>\n    <file name=\"index.html\">\n      <form name=\"myForm\">\n       <div contenteditable\n            name=\"myWidget\" ng-model=\"userContent\"\n            required>Change me!</div>\n        <span ng-show=\"myForm.myWidget.$error.required\">Required!</span>\n       <hr>\n       <textarea ng-model=\"userContent\"></textarea>\n      </form>\n    </file>\n    <file name=\"scenario.js\">\n      it('should data-bind and become invalid', function() {\n        var contentEditable = element('[contenteditable]');\n\n        expect(contentEditable.text()).toEqual('Change me!');\n        input('userContent').enter('');\n        expect(contentEditable.text()).toEqual('');\n        expect(contentEditable.prop('className')).toMatch(/ng-invalid-required/);\n      });\n    </file>\n * </example>\n *\n */\nvar NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse',\n    function($scope, $exceptionHandler, $attr, $element, $parse) {\n  this.$viewValue = Number.NaN;\n  this.$modelValue = Number.NaN;\n  this.$parsers = [];\n  this.$formatters = [];\n  this.$viewChangeListeners = [];\n  this.$pristine = true;\n  this.$dirty = false;\n  this.$valid = true;\n  this.$invalid = false;\n  this.$name = $attr.name;\n\n  var ngModelGet = $parse($attr.ngModel),\n      ngModelSet = ngModelGet.assign;\n\n  if (!ngModelSet) {\n    throw Error(NON_ASSIGNABLE_MODEL_EXPRESSION + $attr.ngModel +\n        ' (' + startingTag($element) + ')');\n  }\n\n  /**\n   * @ngdoc function\n   * @name ng.directive:ngModel.NgModelController#$render\n   * @methodOf ng.directive:ngModel.NgModelController\n   *\n   * @description\n   * Called when the view needs to be updated. It is expected that the user of the ng-model\n   * directive will implement this method.\n   */\n  this.$render = noop;\n\n  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,\n      invalidCount = 0, // used to easily determine if we are valid\n      $error = this.$error = {}; // keep invalid keys here\n\n\n  // Setup initial state of the control\n  $element.addClass(PRISTINE_CLASS);\n  toggleValidCss(true);\n\n  // convenience method for easy toggling of classes\n  function toggleValidCss(isValid, validationErrorKey) {\n    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';\n    $element.\n      removeClass((isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey).\n      addClass((isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);\n  }\n\n  /**\n   * @ngdoc function\n   * @name ng.directive:ngModel.NgModelController#$setValidity\n   * @methodOf ng.directive:ngModel.NgModelController\n   *\n   * @description\n   * Change the validity state, and notifies the form when the control changes validity. (i.e. it\n   * does not notify form if given validator is already marked as invalid).\n   *\n   * This method should be called by validators - i.e. the parser or formatter functions.\n   *\n   * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign\n   *        to `$error[validationErrorKey]=isValid` so that it is available for data-binding.\n   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case\n   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`\n   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .\n   * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).\n   */\n  this.$setValidity = function(validationErrorKey, isValid) {\n    if ($error[validationErrorKey] === !isValid) return;\n\n    if (isValid) {\n      if ($error[validationErrorKey]) invalidCount--;\n      if (!invalidCount) {\n        toggleValidCss(true);\n        this.$valid = true;\n        this.$invalid = false;\n      }\n    } else {\n      toggleValidCss(false);\n      this.$invalid = true;\n      this.$valid = false;\n      invalidCount++;\n    }\n\n    $error[validationErrorKey] = !isValid;\n    toggleValidCss(isValid, validationErrorKey);\n\n    parentForm.$setValidity(validationErrorKey, isValid, this);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ng.directive:ngModel.NgModelController#$setPristine\n   * @methodOf ng.directive:ngModel.NgModelController\n   *\n   * @description\n   * Sets the control to its pristine state.\n   *\n   * This method can be called to remove the 'ng-dirty' class and set the control to its pristine\n   * state (ng-pristine class).\n   */\n  this.$setPristine = function () {\n    this.$dirty = false;\n    this.$pristine = true;\n    $element.removeClass(DIRTY_CLASS).addClass(PRISTINE_CLASS);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ng.directive:ngModel.NgModelController#$setViewValue\n   * @methodOf ng.directive:ngModel.NgModelController\n   *\n   * @description\n   * Read a value from view.\n   *\n   * This method should be called from within a DOM event handler.\n   * For example {@link ng.directive:input input} or\n   * {@link ng.directive:select select} directives call it.\n   *\n   * It internally calls all `parsers` and if resulted value is valid, updates the model and\n   * calls all registered change listeners.\n   *\n   * @param {string} value Value from the view.\n   */\n  this.$setViewValue = function(value) {\n    this.$viewValue = value;\n\n    // change to dirty\n    if (this.$pristine) {\n      this.$dirty = true;\n      this.$pristine = false;\n      $element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);\n      parentForm.$setDirty();\n    }\n\n    forEach(this.$parsers, function(fn) {\n      value = fn(value);\n    });\n\n    if (this.$modelValue !== value) {\n      this.$modelValue = value;\n      ngModelSet($scope, value);\n      forEach(this.$viewChangeListeners, function(listener) {\n        try {\n          listener();\n        } catch(e) {\n          $exceptionHandler(e);\n        }\n      })\n    }\n  };\n\n  // model -> value\n  var ctrl = this;\n\n  $scope.$watch(function ngModelWatch() {\n    var value = ngModelGet($scope);\n\n    // if scope model value and ngModel value are out of sync\n    if (ctrl.$modelValue !== value) {\n\n      var formatters = ctrl.$formatters,\n          idx = formatters.length;\n\n      ctrl.$modelValue = value;\n      while(idx--) {\n        value = formatters[idx](value);\n      }\n\n      if (ctrl.$viewValue !== value) {\n        ctrl.$viewValue = value;\n        ctrl.$render();\n      }\n    }\n  });\n}];\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngModel\n *\n * @element input\n *\n * @description\n * Is directive that tells Angular to do two-way data binding. It works together with `input`,\n * `select`, `textarea`. You can easily write your own directives to use `ngModel` as well.\n *\n * `ngModel` is responsible for:\n *\n * - binding the view into the model, which other directives such as `input`, `textarea` or `select`\n *   require,\n * - providing validation behavior (i.e. required, number, email, url),\n * - keeping state of the control (valid/invalid, dirty/pristine, validation errors),\n * - setting related css class onto the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`),\n * - register the control with parent {@link ng.directive:form form}.\n *\n * For basic examples, how to use `ngModel`, see:\n *\n *  - {@link ng.directive:input input}\n *    - {@link ng.directive:input.text text}\n *    - {@link ng.directive:input.checkbox checkbox}\n *    - {@link ng.directive:input.radio radio}\n *    - {@link ng.directive:input.number number}\n *    - {@link ng.directive:input.email email}\n *    - {@link ng.directive:input.url url}\n *  - {@link ng.directive:select select}\n *  - {@link ng.directive:textarea textarea}\n *\n */\nvar ngModelDirective = function() {\n  return {\n    require: ['ngModel', '^?form'],\n    controller: NgModelController,\n    link: function(scope, element, attr, ctrls) {\n      // notify others, especially parent forms\n\n      var modelCtrl = ctrls[0],\n          formCtrl = ctrls[1] || nullFormCtrl;\n\n      formCtrl.$addControl(modelCtrl);\n\n      element.bind('$destroy', function() {\n        formCtrl.$removeControl(modelCtrl);\n      });\n    }\n  };\n};\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngChange\n * @restrict E\n *\n * @description\n * Evaluate given expression when user changes the input.\n * The expression is not evaluated when the value change is coming from the model.\n *\n * Note, this directive requires `ngModel` to be present.\n *\n * @element input\n *\n * @example\n * <doc:example>\n *   <doc:source>\n *     <script>\n *       function Controller($scope) {\n *         $scope.counter = 0;\n *         $scope.change = function() {\n *           $scope.counter++;\n *         };\n *       }\n *     </script>\n *     <div ng-controller=\"Controller\">\n *       <input type=\"checkbox\" ng-model=\"confirmed\" ng-change=\"change()\" id=\"ng-change-example1\" />\n *       <input type=\"checkbox\" ng-model=\"confirmed\" id=\"ng-change-example2\" />\n *       <label for=\"ng-change-example2\">Confirmed</label><br />\n *       debug = {{confirmed}}<br />\n *       counter = {{counter}}\n *     </div>\n *   </doc:source>\n *   <doc:scenario>\n *     it('should evaluate the expression if changing from view', function() {\n *       expect(binding('counter')).toEqual('0');\n *       element('#ng-change-example1').click();\n *       expect(binding('counter')).toEqual('1');\n *       expect(binding('confirmed')).toEqual('true');\n *     });\n *\n *     it('should not evaluate the expression if changing from model', function() {\n *       element('#ng-change-example2').click();\n *       expect(binding('counter')).toEqual('0');\n *       expect(binding('confirmed')).toEqual('true');\n *     });\n *   </doc:scenario>\n * </doc:example>\n */\nvar ngChangeDirective = valueFn({\n  require: 'ngModel',\n  link: function(scope, element, attr, ctrl) {\n    ctrl.$viewChangeListeners.push(function() {\n      scope.$eval(attr.ngChange);\n    });\n  }\n});\n\n\nvar requiredDirective = function() {\n  return {\n    require: '?ngModel',\n    link: function(scope, elm, attr, ctrl) {\n      if (!ctrl) return;\n      attr.required = true; // force truthy in case we are on non input element\n\n      var validator = function(value) {\n        if (attr.required && (isEmpty(value) || value === false)) {\n          ctrl.$setValidity('required', false);\n          return;\n        } else {\n          ctrl.$setValidity('required', true);\n          return value;\n        }\n      };\n\n      ctrl.$formatters.push(validator);\n      ctrl.$parsers.unshift(validator);\n\n      attr.$observe('required', function() {\n        validator(ctrl.$viewValue);\n      });\n    }\n  };\n};\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngList\n *\n * @description\n * Text input that converts between comma-separated string into an array of strings.\n *\n * @element input\n * @param {string=} ngList optional delimiter that should be used to split the value. If\n *   specified in form `/something/` then the value will be converted into a regular expression.\n *\n * @example\n    <doc:example>\n      <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.names = ['igor', 'misko', 'vojta'];\n         }\n       </script>\n       <form name=\"myForm\" ng-controller=\"Ctrl\">\n         List: <input name=\"namesInput\" ng-model=\"names\" ng-list required>\n         <span class=\"error\" ng-show=\"myForm.list.$error.required\">\n           Required!</span>\n         <tt>names = {{names}}</tt><br/>\n         <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>\n         <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>\n         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>\n         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>\n        </form>\n      </doc:source>\n      <doc:scenario>\n        it('should initialize to model', function() {\n          expect(binding('names')).toEqual('[\"igor\",\"misko\",\"vojta\"]');\n          expect(binding('myForm.namesInput.$valid')).toEqual('true');\n        });\n\n        it('should be invalid if empty', function() {\n          input('names').enter('');\n          expect(binding('names')).toEqual('[]');\n          expect(binding('myForm.namesInput.$valid')).toEqual('false');\n        });\n      </doc:scenario>\n    </doc:example>\n */\nvar ngListDirective = function() {\n  return {\n    require: 'ngModel',\n    link: function(scope, element, attr, ctrl) {\n      var match = /\\/(.*)\\//.exec(attr.ngList),\n          separator = match && new RegExp(match[1]) || attr.ngList || ',';\n\n      var parse = function(viewValue) {\n        var list = [];\n\n        if (viewValue) {\n          forEach(viewValue.split(separator), function(value) {\n            if (value) list.push(trim(value));\n          });\n        }\n\n        return list;\n      };\n\n      ctrl.$parsers.push(parse);\n      ctrl.$formatters.push(function(value) {\n        if (isArray(value)) {\n          return value.join(', ');\n        }\n\n        return undefined;\n      });\n    }\n  };\n};\n\n\nvar CONSTANT_VALUE_REGEXP = /^(true|false|\\d+)$/;\n\nvar ngValueDirective = function() {\n  return {\n    priority: 100,\n    compile: function(tpl, tplAttr) {\n      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {\n        return function(scope, elm, attr) {\n          attr.$set('value', scope.$eval(attr.ngValue));\n        };\n      } else {\n        return function(scope, elm, attr) {\n          scope.$watch(attr.ngValue, function valueWatchAction(value) {\n            attr.$set('value', value, false);\n          });\n        };\n      }\n    }\n  };\n};\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngBind\n *\n * @description\n * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element\n * with the value of a given expression, and to update the text content when the value of that\n * expression changes.\n *\n * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like\n * `{{ expression }}` which is similar but less verbose.\n *\n * One scenario in which the use of `ngBind` is preferred over `{{ expression }}` binding is when\n * it's desirable to put bindings into template that is momentarily displayed by the browser in its\n * raw state before Angular compiles it. Since `ngBind` is an element attribute, it makes the\n * bindings invisible to the user while the page is loading.\n *\n * An alternative solution to this problem would be using the\n * {@link ng.directive:ngCloak ngCloak} directive.\n *\n *\n * @element ANY\n * @param {expression} ngBind {@link guide/expression Expression} to evaluate.\n *\n * @example\n * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.name = 'Whirled';\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n         Enter name: <input type=\"text\" ng-model=\"name\"><br>\n         Hello <span ng-bind=\"name\"></span>!\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-bind', function() {\n         expect(using('.doc-example-live').binding('name')).toBe('Whirled');\n         using('.doc-example-live').input('name').enter('world');\n         expect(using('.doc-example-live').binding('name')).toBe('world');\n       });\n     </doc:scenario>\n   </doc:example>\n */\nvar ngBindDirective = ngDirective(function(scope, element, attr) {\n  element.addClass('ng-binding').data('$binding', attr.ngBind);\n  scope.$watch(attr.ngBind, function ngBindWatchAction(value) {\n    element.text(value == undefined ? '' : value);\n  });\n});\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngBindTemplate\n *\n * @description\n * The `ngBindTemplate` directive specifies that the element\n * text should be replaced with the template in ngBindTemplate.\n * Unlike ngBind the ngBindTemplate can contain multiple `{{` `}}`\n * expressions. (This is required since some HTML elements\n * can not have SPAN elements such as TITLE, or OPTION to name a few.)\n *\n * @element ANY\n * @param {string} ngBindTemplate template of form\n *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.\n *\n * @example\n * Try it here: enter text in text box and watch the greeting change.\n   <doc:example>\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.salutation = 'Hello';\n           $scope.name = 'World';\n         }\n       </script>\n       <div ng-controller=\"Ctrl\">\n        Salutation: <input type=\"text\" ng-model=\"salutation\"><br>\n        Name: <input type=\"text\" ng-model=\"name\"><br>\n        <pre ng-bind-template=\"{{salutation}} {{name}}!\"></pre>\n       </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-bind', function() {\n         expect(using('.doc-example-live').binding('salutation')).\n           toBe('Hello');\n         expect(using('.doc-example-live').binding('name')).\n           toBe('World');\n         using('.doc-example-live').input('salutation').enter('Greetings');\n         using('.doc-example-live').input('name').enter('user');\n         expect(using('.doc-example-live').binding('salutation')).\n           toBe('Greetings');\n         expect(using('.doc-example-live').binding('name')).\n           toBe('user');\n       });\n     </doc:scenario>\n   </doc:example>\n */\nvar ngBindTemplateDirective = ['$interpolate', function($interpolate) {\n  return function(scope, element, attr) {\n    // TODO: move this to scenario runner\n    var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));\n    element.addClass('ng-binding').data('$binding', interpolateFn);\n    attr.$observe('ngBindTemplate', function(value) {\n      element.text(value);\n    });\n  }\n}];\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngBindHtmlUnsafe\n *\n * @description\n * Creates a binding that will innerHTML the result of evaluating the `expression` into the current\n * element. *The innerHTML-ed content will not be sanitized!* You should use this directive only if\n * {@link ngSanitize.directive:ngBindHtml ngBindHtml} directive is too\n * restrictive and when you absolutely trust the source of the content you are binding to.\n *\n * See {@link ngSanitize.$sanitize $sanitize} docs for examples.\n *\n * @element ANY\n * @param {expression} ngBindHtmlUnsafe {@link guide/expression Expression} to evaluate.\n */\nvar ngBindHtmlUnsafeDirective = [function() {\n  return function(scope, element, attr) {\n    element.addClass('ng-binding').data('$binding', attr.ngBindHtmlUnsafe);\n    scope.$watch(attr.ngBindHtmlUnsafe, function ngBindHtmlUnsafeWatchAction(value) {\n      element.html(value || '');\n    });\n  };\n}];\n\nfunction classDirective(name, selector) {\n  name = 'ngClass' + name;\n  return ngDirective(function(scope, element, attr) {\n    var oldVal = undefined;\n\n    scope.$watch(attr[name], ngClassWatchAction, true);\n\n    attr.$observe('class', function(value) {\n      var ngClass = scope.$eval(attr[name]);\n      ngClassWatchAction(ngClass, ngClass);\n    });\n\n\n    if (name !== 'ngClass') {\n      scope.$watch('$index', function($index, old$index) {\n        var mod = $index & 1;\n        if (mod !== old$index & 1) {\n          if (mod === selector) {\n            addClass(scope.$eval(attr[name]));\n          } else {\n            removeClass(scope.$eval(attr[name]));\n          }\n        }\n      });\n    }\n\n\n    function ngClassWatchAction(newVal) {\n      if (selector === true || scope.$index % 2 === selector) {\n        if (oldVal && !equals(newVal,oldVal)) {\n          removeClass(oldVal);\n        }\n        addClass(newVal);\n      }\n      oldVal = copy(newVal);\n    }\n\n\n    function removeClass(classVal) {\n      if (isObject(classVal) && !isArray(classVal)) {\n        classVal = map(classVal, function(v, k) { if (v) return k });\n      }\n      element.removeClass(isArray(classVal) ? classVal.join(' ') : classVal);\n    }\n\n\n    function addClass(classVal) {\n      if (isObject(classVal) && !isArray(classVal)) {\n        classVal = map(classVal, function(v, k) { if (v) return k });\n      }\n      if (classVal) {\n        element.addClass(isArray(classVal) ? classVal.join(' ') : classVal);\n      }\n    }\n  });\n}\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngClass\n *\n * @description\n * The `ngClass` allows you to set CSS class on HTML element dynamically by databinding an\n * expression that represents all classes to be added.\n *\n * The directive won't add duplicate classes if a particular class was already set.\n *\n * When the expression changes, the previously added classes are removed and only then the\n * new classes are added.\n *\n * @element ANY\n * @param {expression} ngClass {@link guide/expression Expression} to eval. The result\n *   of the evaluation can be a string representing space delimited class\n *   names, an array, or a map of class names to boolean values.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n      <input type=\"button\" value=\"set\" ng-click=\"myVar='my-class'\">\n      <input type=\"button\" value=\"clear\" ng-click=\"myVar=''\">\n      <br>\n      <span ng-class=\"myVar\">Sample Text</span>\n     </file>\n     <file name=\"style.css\">\n       .my-class {\n         color: red;\n       }\n     </file>\n     <file name=\"scenario.js\">\n       it('should check ng-class', function() {\n         expect(element('.doc-example-live span').prop('className')).not().\n           toMatch(/my-class/);\n\n         using('.doc-example-live').element(':button:first').click();\n\n         expect(element('.doc-example-live span').prop('className')).\n           toMatch(/my-class/);\n\n         using('.doc-example-live').element(':button:last').click();\n\n         expect(element('.doc-example-live span').prop('className')).not().\n           toMatch(/my-class/);\n       });\n     </file>\n   </example>\n */\nvar ngClassDirective = classDirective('', true);\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngClassOdd\n *\n * @description\n * The `ngClassOdd` and `ngClassEven` directives work exactly as\n * {@link ng.directive:ngClass ngClass}, except it works in\n * conjunction with `ngRepeat` and takes affect only on odd (even) rows.\n *\n * This directive can be applied only within a scope of an\n * {@link ng.directive:ngRepeat ngRepeat}.\n *\n * @element ANY\n * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result\n *   of the evaluation can be a string representing space delimited class names or an array.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}}\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"scenario.js\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element('.doc-example-live li:first span').prop('className')).\n           toMatch(/odd/);\n         expect(element('.doc-example-live li:last span').prop('className')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>\n */\nvar ngClassOddDirective = classDirective('Odd', 0);\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngClassEven\n *\n * @description\n * The `ngClassOdd` and `ngClassEven` directives work exactly as\n * {@link ng.directive:ngClass ngClass}, except it works in\n * conjunction with `ngRepeat` and takes affect only on odd (even) rows.\n *\n * This directive can be applied only within a scope of an\n * {@link ng.directive:ngRepeat ngRepeat}.\n *\n * @element ANY\n * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The\n *   result of the evaluation can be a string representing space delimited class names or an array.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <ol ng-init=\"names=['John', 'Mary', 'Cate', 'Suz']\">\n          <li ng-repeat=\"name in names\">\n           <span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\">\n             {{name}} &nbsp; &nbsp; &nbsp;\n           </span>\n          </li>\n        </ol>\n     </file>\n     <file name=\"style.css\">\n       .odd {\n         color: red;\n       }\n       .even {\n         color: blue;\n       }\n     </file>\n     <file name=\"scenario.js\">\n       it('should check ng-class-odd and ng-class-even', function() {\n         expect(element('.doc-example-live li:first span').prop('className')).\n           toMatch(/odd/);\n         expect(element('.doc-example-live li:last span').prop('className')).\n           toMatch(/even/);\n       });\n     </file>\n   </example>\n */\nvar ngClassEvenDirective = classDirective('Even', 1);\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngCloak\n *\n * @description\n * The `ngCloak` directive is used to prevent the Angular html template from being briefly\n * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this\n * directive to avoid the undesirable flicker effect caused by the html template display.\n *\n * The directive can be applied to the `<body>` element, but typically a fine-grained application is\n * preferred in order to benefit from progressive rendering of the browser view.\n *\n * `ngCloak` works in cooperation with a css rule that is embedded within `angular.js` and\n *  `angular.min.js` files. Following is the css rule:\n *\n * <pre>\n * [ng\\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {\n *   display: none;\n * }\n * </pre>\n *\n * When this css rule is loaded by the browser, all html elements (including their children) that\n * are tagged with the `ng-cloak` directive are hidden. When Angular comes across this directive\n * during the compilation of the template it deletes the `ngCloak` element attribute, which\n * makes the compiled element visible.\n *\n * For the best result, `angular.js` script must be loaded in the head section of the html file;\n * alternatively, the css rule (above) must be included in the external stylesheet of the\n * application.\n *\n * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they\n * cannot match the `[ng\\:cloak]` selector. To work around this limitation, you must add the css\n * class `ngCloak` in addition to `ngCloak` directive as shown in the example below.\n *\n * @element ANY\n *\n * @example\n   <doc:example>\n     <doc:source>\n        <div id=\"template1\" ng-cloak>{{ 'hello' }}</div>\n        <div id=\"template2\" ng-cloak class=\"ng-cloak\">{{ 'hello IE7' }}</div>\n     </doc:source>\n     <doc:scenario>\n       it('should remove the template directive and css class', function() {\n         expect(element('.doc-example-live #template1').attr('ng-cloak')).\n           not().toBeDefined();\n         expect(element('.doc-example-live #template2').attr('ng-cloak')).\n           not().toBeDefined();\n       });\n     </doc:scenario>\n   </doc:example>\n *\n */\nvar ngCloakDirective = ngDirective({\n  compile: function(element, attr) {\n    attr.$set('ngCloak', undefined);\n    element.removeClass('ng-cloak');\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngController\n *\n * @description\n * The `ngController` directive assigns behavior to a scope. This is a key aspect of how angular\n * supports the principles behind the Model-View-Controller design pattern.\n *\n * MVC components in angular:\n *\n * * Model — The Model is data in scope properties; scopes are attached to the DOM.\n * * View — The template (HTML with data bindings) is rendered into the View.\n * * Controller — The `ngController` directive specifies a Controller class; the class has\n *   methods that typically express the business logic behind the application.\n *\n * Note that an alternative way to define controllers is via the {@link ng.$route $route} service.\n *\n * @element ANY\n * @scope\n * @param {expression} ngController Name of a globally accessible constructor function or an\n *     {@link guide/expression expression} that on the current scope evaluates to a\n *     constructor function. The controller instance can further be published into the scope\n *     by adding `as localName` the controller name attribute.\n *\n * @example\n * Here is a simple form for editing user contact information. Adding, removing, clearing, and\n * greeting are methods declared on the controller (see source tab). These methods can\n * easily be called from the angular markup. Notice that the scope becomes the `this` for the\n * controller's instance. This allows for easy access to the view data from the controller. Also\n * notice that any changes to the data are automatically reflected in the View without the need\n * for a manual update. The example is included in two different declaration styles based on\n * your style preferences.\n   <doc:example>\n     <doc:source>\n      <script>\n        function SettingsController() {\n          this.name = \"John Smith\";\n          this.contacts = [\n            {type: 'phone', value: '408 555 1212'},\n            {type: 'email', value: 'john.smith@example.org'} ];\n          };\n\n        SettingsController.prototype.greet = function() {\n          alert(this.name);\n        };\n\n        SettingsController.prototype.addContact = function() {\n          this.contacts.push({type: 'email', value: 'yourname@example.org'});\n        };\n\n        SettingsController.prototype.removeContact = function(contactToRemove) {\n         var index = this.contacts.indexOf(contactToRemove);\n          this.contacts.splice(index, 1);\n        };\n\n        SettingsController.prototype.clearContact = function(contact) {\n          contact.type = 'phone';\n          contact.value = '';\n        };\n      </script>\n      <div ng-controller=\"SettingsController as settings\">\n        Name: <input type=\"text\" ng-model=\"settings.name\"/>\n        [ <a href=\"\" ng-click=\"settings.greet()\">greet</a> ]<br/>\n        Contact:\n        <ul>\n          <li ng-repeat=\"contact in settings.contacts\">\n            <select ng-model=\"contact.type\">\n               <option>phone</option>\n               <option>email</option>\n            </select>\n            <input type=\"text\" ng-model=\"contact.value\"/>\n            [ <a href=\"\" ng-click=\"settings.clearContact(contact)\">clear</a>\n            | <a href=\"\" ng-click=\"settings.removeContact(contact)\">X</a> ]\n          </li>\n          <li>[ <a href=\"\" ng-click=\"settings.addContact()\">add</a> ]</li>\n       </ul>\n      </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check controller', function() {\n         expect(element('.doc-example-live div>:input').val()).toBe('John Smith');\n         expect(element('.doc-example-live li:nth-child(1) input').val())\n           .toBe('408 555 1212');\n         expect(element('.doc-example-live li:nth-child(2) input').val())\n           .toBe('john.smith@example.org');\n\n         element('.doc-example-live li:first a:contains(\"clear\")').click();\n         expect(element('.doc-example-live li:first input').val()).toBe('');\n\n         element('.doc-example-live li:last a:contains(\"add\")').click();\n         expect(element('.doc-example-live li:nth-child(3) input').val())\n           .toBe('yourname@example.org');\n       });\n     </doc:scenario>\n   </doc:example>\n\n\n\n    <doc:example>\n     <doc:source>\n      <script>\n        function SettingsController($scope) {\n          $scope.name = \"John Smith\";\n          $scope.contacts = [\n            {type:'phone', value:'408 555 1212'},\n            {type:'email', value:'john.smith@example.org'} ];\n\n          $scope.greet = function() {\n           alert(this.name);\n          };\n\n          $scope.addContact = function() {\n           this.contacts.push({type:'email', value:'yourname@example.org'});\n          };\n\n          $scope.removeContact = function(contactToRemove) {\n           var index = this.contacts.indexOf(contactToRemove);\n           this.contacts.splice(index, 1);\n          };\n\n          $scope.clearContact = function(contact) {\n           contact.type = 'phone';\n           contact.value = '';\n          };\n        }\n      </script>\n      <div ng-controller=\"SettingsController\">\n        Name: <input type=\"text\" ng-model=\"name\"/>\n        [ <a href=\"\" ng-click=\"greet()\">greet</a> ]<br/>\n        Contact:\n        <ul>\n          <li ng-repeat=\"contact in contacts\">\n            <select ng-model=\"contact.type\">\n               <option>phone</option>\n               <option>email</option>\n            </select>\n            <input type=\"text\" ng-model=\"contact.value\"/>\n            [ <a href=\"\" ng-click=\"clearContact(contact)\">clear</a>\n            | <a href=\"\" ng-click=\"removeContact(contact)\">X</a> ]\n          </li>\n          <li>[ <a href=\"\" ng-click=\"addContact()\">add</a> ]</li>\n       </ul>\n      </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check controller', function() {\n         expect(element('.doc-example-live div>:input').val()).toBe('John Smith');\n         expect(element('.doc-example-live li:nth-child(1) input').val())\n           .toBe('408 555 1212');\n         expect(element('.doc-example-live li:nth-child(2) input').val())\n           .toBe('john.smith@example.org');\n\n         element('.doc-example-live li:first a:contains(\"clear\")').click();\n         expect(element('.doc-example-live li:first input').val()).toBe('');\n\n         element('.doc-example-live li:last a:contains(\"add\")').click();\n         expect(element('.doc-example-live li:nth-child(3) input').val())\n           .toBe('yourname@example.org');\n       });\n     </doc:scenario>\n   </doc:example>\n\n */\nvar ngControllerDirective = [function() {\n  return {\n    scope: true,\n    controller: '@'\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngCsp\n * @priority 1000\n *\n * @element html\n * @description\n * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.\n * \n * This is necessary when developing things like Google Chrome Extensions.\n * \n * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).\n * For us to be compatible, we just need to implement the \"getterFn\" in $parse without violating\n * any of these restrictions.\n * \n * AngularJS uses `Function(string)` generated functions as a speed optimization. By applying `ngCsp`\n * it is be possible to opt into the CSP compatible mode. When this mode is on AngularJS will\n * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will\n * be raised.\n * \n * In order to use this feature put `ngCsp` directive on the root element of the application.\n * \n * @example\n * This example shows how to apply the `ngCsp` directive to the `html` tag.\n   <pre>\n     <!doctype html>\n     <html ng-app ng-csp>\n     ...\n     ...\n     </html>\n   </pre>\n */\n\nvar ngCspDirective = ['$sniffer', function($sniffer) {\n  return {\n    priority: 1000,\n    compile: function() {\n      $sniffer.csp = true;\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngClick\n *\n * @description\n * The ngClick allows you to specify custom behavior when\n * element is clicked.\n *\n * @element ANY\n * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon\n * click. (Event object is available as `$event`)\n *\n * @example\n   <doc:example>\n     <doc:source>\n      <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n        Increment\n      </button>\n      count: {{count}}\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-click', function() {\n         expect(binding('count')).toBe('0');\n         element('.doc-example-live :button').click();\n         expect(binding('count')).toBe('1');\n       });\n     </doc:scenario>\n   </doc:example>\n */\n/*\n * A directive that allows creation of custom onclick handlers that are defined as angular\n * expressions and are compiled and executed within the current scope.\n *\n * Events that are handled via these handler are always configured not to propagate further.\n */\nvar ngEventDirectives = {};\nforEach(\n  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress'.split(' '),\n  function(name) {\n    var directiveName = directiveNormalize('ng-' + name);\n    ngEventDirectives[directiveName] = ['$parse', function($parse) {\n      return function(scope, element, attr) {\n        var fn = $parse(attr[directiveName]);\n        element.bind(lowercase(name), function(event) {\n          scope.$apply(function() {\n            fn(scope, {$event:event});\n          });\n        });\n      };\n    }];\n  }\n);\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngDblclick\n *\n * @description\n * The `ngDblclick` directive allows you to specify custom behavior on dblclick event.\n *\n * @element ANY\n * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon\n * dblclick. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngMousedown\n *\n * @description\n * The ngMousedown directive allows you to specify custom behavior on mousedown event.\n *\n * @element ANY\n * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon\n * mousedown. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngMouseup\n *\n * @description\n * Specify custom behavior on mouseup event.\n *\n * @element ANY\n * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon\n * mouseup. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngMouseover\n *\n * @description\n * Specify custom behavior on mouseover event.\n *\n * @element ANY\n * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon\n * mouseover. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngMouseenter\n *\n * @description\n * Specify custom behavior on mouseenter event.\n *\n * @element ANY\n * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon\n * mouseenter. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngMouseleave\n *\n * @description\n * Specify custom behavior on mouseleave event.\n *\n * @element ANY\n * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon\n * mouseleave. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngMousemove\n *\n * @description\n * Specify custom behavior on mousemove event.\n *\n * @element ANY\n * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon\n * mousemove. (Event object is available as `$event`)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngKeydown\n *\n * @description\n * Specify custom behavior on keydown event.\n *\n * @element ANY\n * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon\n * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngKeyup\n *\n * @description\n * Specify custom behavior on keyup event.\n *\n * @element ANY\n * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon\n * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngKeypress\n *\n * @description\n * Specify custom behavior on keypress event.\n *\n * @element ANY\n * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon\n * keypress. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)\n *\n * @example\n * See {@link ng.directive:ngClick ngClick}\n */\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngSubmit\n *\n * @description\n * Enables binding angular expressions to onsubmit events.\n *\n * Additionally it prevents the default action (which for form means sending the request to the\n * server and reloading the current page).\n *\n * @element form\n * @param {expression} ngSubmit {@link guide/expression Expression} to eval.\n *\n * @example\n   <doc:example>\n     <doc:source>\n      <script>\n        function Ctrl($scope) {\n          $scope.list = [];\n          $scope.text = 'hello';\n          $scope.submit = function() {\n            if (this.text) {\n              this.list.push(this.text);\n              this.text = '';\n            }\n          };\n        }\n      </script>\n      <form ng-submit=\"submit()\" ng-controller=\"Ctrl\">\n        Enter text and hit enter:\n        <input type=\"text\" ng-model=\"text\" name=\"text\" />\n        <input type=\"submit\" id=\"submit\" value=\"Submit\" />\n        <pre>list={{list}}</pre>\n      </form>\n     </doc:source>\n     <doc:scenario>\n       it('should check ng-submit', function() {\n         expect(binding('list')).toBe('[]');\n         element('.doc-example-live #submit').click();\n         expect(binding('list')).toBe('[\"hello\"]');\n         expect(input('text').val()).toBe('');\n       });\n       it('should ignore empty strings', function() {\n         expect(binding('list')).toBe('[]');\n         element('.doc-example-live #submit').click();\n         element('.doc-example-live #submit').click();\n         expect(binding('list')).toBe('[\"hello\"]');\n       });\n     </doc:scenario>\n   </doc:example>\n */\nvar ngSubmitDirective = ngDirective(function(scope, element, attrs) {\n  element.bind('submit', function() {\n    scope.$apply(attrs.ngSubmit);\n  });\n});\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngIf\n * @restrict A\n *\n * @description\n * The `ngIf` directive removes and recreates a portion of the DOM tree (HTML)\n * conditionally based on **\"falsy\"** and **\"truthy\"** values, respectively, evaluated within\n * an {expression}. In other words, if the expression assigned to **ngIf evaluates to a false\n * value** then **the element is removed from the DOM** and **if true** then **a clone of the\n * element is reinserted into the DOM**.\n *\n * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the\n * element in the DOM rather than changing its visibility via the `display` css property.  A common\n * case when this difference is significant is when using css selectors that rely on an element's\n * position within the DOM (HTML), such as the `:first-child` or `:last-child` pseudo-classes.\n *\n * Note that **when an element is removed using ngIf its scope is destroyed** and **a new scope\n * is created when the element is restored**.  The scope created within `ngIf` inherits from \n * its parent scope using\n * {@link https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance prototypal inheritance}.\n * An important implication of this is if `ngModel` is used within `ngIf` to bind to\n * a javascript primitive defined in the parent scope. In this case any modifications made to the\n * variable within the child scope will override (hide) the value in the parent scope.\n *\n * Also, `ngIf` recreates elements using their compiled state. An example scenario of this behavior\n * is if an element's class attribute is directly modified after it's compiled, using something like \n * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element\n * the added class will be lost because the original compiled state is used to regenerate the element.\n *\n * Additionally, you can provide animations via the ngAnimate attribute to animate the **enter**\n * and **leave** effects.\n *\n * @animations\n * enter - happens just after the ngIf contents change and a new DOM element is created and injected into the ngIf container\n * leave - happens just before the ngIf contents are removed from the DOM\n *\n * @element ANY\n * @scope\n * @param {expression} ngIf If the {@link guide/expression expression} is falsy then\n *     the element is removed from the DOM tree (HTML).\n *\n * @example\n  <example animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\" ng-init=\"checked=true\" /><br/>\n      Show when checked:\n      <span ng-if=\"checked\" ng-animate=\"'example'\">\n        I'm removed when the checkbox is unchecked.\n      </span>\n    </file>\n    <file name=\"animations.css\">\n      .example-leave, .example-enter {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -ms-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n      }\n\n      .example-enter {\n        opacity:0;\n      }\n      .example-enter.example-enter-active {\n        opacity:1;\n      }\n\n      .example-leave {\n        opacity:1;\n      }\n      .example-leave.example-leave-active {\n        opacity:0;\n      }\n    </file>\n  </example>\n */\nvar ngIfDirective = ['$animator', function($animator) {\n  return {\n    transclude: 'element',\n    priority: 1000,\n    terminal: true,\n    restrict: 'A',\n    compile: function (element, attr, transclude) {\n      return function ($scope, $element, $attr) {\n        var animate = $animator($scope, $attr);\n        var childElement, childScope;\n        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {\n          if (childElement) {\n            animate.leave(childElement);\n            childElement = undefined;\n          }\n          if (childScope) {\n            childScope.$destroy();\n            childScope = undefined;\n          }\n          if (toBoolean(value)) {\n            childScope = $scope.$new();\n            transclude(childScope, function (clone) {\n              childElement = clone;\n              animate.enter(clone, $element.parent(), $element);\n            });\n          }\n        });\n      }\n    }\n  }\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngInclude\n * @restrict ECA\n *\n * @description\n * Fetches, compiles and includes an external HTML fragment.\n *\n * Keep in mind that Same Origin Policy applies to included resources\n * (e.g. ngInclude won't work for cross-domain requests on all browsers and for\n *  file:// access on some browsers).\n *\n * Additionally, you can also provide animations via the ngAnimate attribute to animate the **enter**\n * and **leave** effects.\n *\n * @animations\n * enter - happens just after the ngInclude contents change and a new DOM element is created and injected into the ngInclude container\n * leave - happens just after the ngInclude contents change and just before the former contents are removed from the DOM\n *\n * @scope\n *\n * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,\n *                 make sure you wrap it in quotes, e.g. `src=\"'myPartialTemplate.html'\"`.\n * @param {string=} onload Expression to evaluate when a new partial is loaded.\n *\n * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the content is loaded.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.\n *\n * @example\n  <example animations=\"true\">\n    <file name=\"index.html\">\n     <div ng-controller=\"Ctrl\">\n       <select ng-model=\"template\" ng-options=\"t.name for t in templates\">\n        <option value=\"\">(blank)</option>\n       </select>\n       url of the template: <tt>{{template.url}}</tt>\n       <hr/>\n       <div class=\"example-animate-container\"\n            ng-include=\"template.url\"\n            ng-animate=\"{enter: 'example-enter', leave: 'example-leave'}\"></div>\n     </div>\n    </file>\n    <file name=\"script.js\">\n      function Ctrl($scope) {\n        $scope.templates =\n          [ { name: 'template1.html', url: 'template1.html'}\n          , { name: 'template2.html', url: 'template2.html'} ];\n        $scope.template = $scope.templates[0];\n      }\n     </file>\n    <file name=\"template1.html\">\n      <div>Content of template1.html</div>\n    </file>\n    <file name=\"template2.html\">\n      <div>Content of template2.html</div>\n    </file>\n    <file name=\"animations.css\">\n      .example-leave,\n      .example-enter {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -ms-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n        position:absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n      }\n\n      .example-animate-container > * {\n        display:block;\n        padding:10px;\n      }\n\n      .example-enter {\n        top:-50px;\n      }\n      .example-enter.example-enter-active {\n        top:0;\n      }\n\n      .example-leave {\n        top:0;\n      }\n      .example-leave.example-leave-active {\n        top:50px;\n      }\n    </file>\n    <file name=\"scenario.js\">\n      it('should load template1.html', function() {\n       expect(element('.doc-example-live [ng-include]').text()).\n         toMatch(/Content of template1.html/);\n      });\n      it('should load template2.html', function() {\n       select('template').option('1');\n       expect(element('.doc-example-live [ng-include]').text()).\n         toMatch(/Content of template2.html/);\n      });\n      it('should change to blank', function() {\n       select('template').option('');\n       expect(element('.doc-example-live [ng-include]').text()).toEqual('');\n      });\n    </file>\n  </example>\n */\n\n\n/**\n * @ngdoc event\n * @name ng.directive:ngInclude#$includeContentRequested\n * @eventOf ng.directive:ngInclude\n * @eventType emit on the scope ngInclude was declared in\n * @description\n * Emitted every time the ngInclude content is requested.\n */\n\n\n/**\n * @ngdoc event\n * @name ng.directive:ngInclude#$includeContentLoaded\n * @eventOf ng.directive:ngInclude\n * @eventType emit on the current ngInclude scope\n * @description\n * Emitted every time the ngInclude content is reloaded.\n */\nvar ngIncludeDirective = ['$http', '$templateCache', '$anchorScroll', '$compile', '$animator',\n                  function($http,   $templateCache,   $anchorScroll,   $compile,   $animator) {\n  return {\n    restrict: 'ECA',\n    terminal: true,\n    compile: function(element, attr) {\n      var srcExp = attr.ngInclude || attr.src,\n          onloadExp = attr.onload || '',\n          autoScrollExp = attr.autoscroll;\n\n      return function(scope, element, attr) {\n        var animate = $animator(scope, attr);\n        var changeCounter = 0,\n            childScope;\n\n        var clearContent = function() {\n          if (childScope) {\n            childScope.$destroy();\n            childScope = null;\n          }\n          animate.leave(element.contents(), element);\n        };\n\n        scope.$watch(srcExp, function ngIncludeWatchAction(src) {\n          var thisChangeId = ++changeCounter;\n\n          if (src) {\n            $http.get(src, {cache: $templateCache}).success(function(response) {\n              if (thisChangeId !== changeCounter) return;\n\n              if (childScope) childScope.$destroy();\n              childScope = scope.$new();\n              animate.leave(element.contents(), element);\n\n              var contents = jqLite('<div/>').html(response).contents();\n\n              animate.enter(contents, element);\n              $compile(contents)(childScope);\n\n              if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {\n                $anchorScroll();\n              }\n\n              childScope.$emit('$includeContentLoaded');\n              scope.$eval(onloadExp);\n            }).error(function() {\n              if (thisChangeId === changeCounter) clearContent();\n            });\n            scope.$emit('$includeContentRequested');\n          } else {\n            clearContent();\n          }\n        });\n      };\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngInit\n *\n * @description\n * The `ngInit` directive specifies initialization tasks to be executed\n *  before the template enters execution mode during bootstrap.\n *\n * @element ANY\n * @param {expression} ngInit {@link guide/expression Expression} to eval.\n *\n * @example\n   <doc:example>\n     <doc:source>\n    <div ng-init=\"greeting='Hello'; person='World'\">\n      {{greeting}} {{person}}!\n    </div>\n     </doc:source>\n     <doc:scenario>\n       it('should check greeting', function() {\n         expect(binding('greeting')).toBe('Hello');\n         expect(binding('person')).toBe('World');\n       });\n     </doc:scenario>\n   </doc:example>\n */\nvar ngInitDirective = ngDirective({\n  compile: function() {\n    return {\n      pre: function(scope, element, attrs) {\n        scope.$eval(attrs.ngInit);\n      }\n    }\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngNonBindable\n * @priority 1000\n *\n * @description\n * Sometimes it is necessary to write code which looks like bindings but which should be left alone\n * by angular. Use `ngNonBindable` to make angular ignore a chunk of HTML.\n *\n * @element ANY\n *\n * @example\n * In this example there are two location where a simple binding (`{{}}`) is present, but the one\n * wrapped in `ngNonBindable` is left alone.\n *\n * @example\n    <doc:example>\n      <doc:source>\n        <div>Normal: {{1 + 2}}</div>\n        <div ng-non-bindable>Ignored: {{1 + 2}}</div>\n      </doc:source>\n      <doc:scenario>\n       it('should check ng-non-bindable', function() {\n         expect(using('.doc-example-live').binding('1 + 2')).toBe('3');\n         expect(using('.doc-example-live').element('div:last').text()).\n           toMatch(/1 \\+ 2/);\n       });\n      </doc:scenario>\n    </doc:example>\n */\nvar ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngPluralize\n * @restrict EA\n *\n * @description\n * # Overview\n * `ngPluralize` is a directive that displays messages according to en-US localization rules.\n * These rules are bundled with angular.js and the rules can be overridden\n * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive\n * by specifying the mappings between\n * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\n * plural categories} and the strings to be displayed.\n *\n * # Plural categories and explicit number rules\n * There are two\n * {@link http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html\n * plural categories} in Angular's default en-US locale: \"one\" and \"other\".\n *\n * While a plural category may match many numbers (for example, in en-US locale, \"other\" can match\n * any number that is not 1), an explicit number rule can only match one number. For example, the\n * explicit number rule for \"3\" matches the number 3. You will see the use of plural categories\n * and explicit number rules throughout later parts of this documentation.\n *\n * # Configuring ngPluralize\n * You configure ngPluralize by providing 2 attributes: `count` and `when`.\n * You can also provide an optional attribute, `offset`.\n *\n * The value of the `count` attribute can be either a string or an {@link guide/expression\n * Angular expression}; these are evaluated on the current scope for its bound value.\n *\n * The `when` attribute specifies the mappings between plural categories and the actual\n * string to be displayed. The value of the attribute should be a JSON object so that Angular\n * can interpret it correctly.\n *\n * The following example shows how to configure ngPluralize:\n *\n * <pre>\n * <ng-pluralize count=\"personCount\"\n                 when=\"{'0': 'Nobody is viewing.',\n *                      'one': '1 person is viewing.',\n *                      'other': '{} people are viewing.'}\">\n * </ng-pluralize>\n *</pre>\n *\n * In the example, `\"0: Nobody is viewing.\"` is an explicit number rule. If you did not\n * specify this rule, 0 would be matched to the \"other\" category and \"0 people are viewing\"\n * would be shown instead of \"Nobody is viewing\". You can specify an explicit number rule for\n * other numbers, for example 12, so that instead of showing \"12 people are viewing\", you can\n * show \"a dozen people are viewing\".\n *\n * You can use a set of closed braces(`{}`) as a placeholder for the number that you want substituted\n * into pluralized strings. In the previous example, Angular will replace `{}` with\n * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder\n * for <span ng-non-bindable>{{numberExpression}}</span>.\n *\n * # Configuring ngPluralize with offset\n * The `offset` attribute allows further customization of pluralized text, which can result in\n * a better user experience. For example, instead of the message \"4 people are viewing this document\",\n * you might display \"John, Kate and 2 others are viewing this document\".\n * The offset attribute allows you to offset a number by any desired value.\n * Let's take a look at an example:\n *\n * <pre>\n * <ng-pluralize count=\"personCount\" offset=2\n *               when=\"{'0': 'Nobody is viewing.',\n *                      '1': '{{person1}} is viewing.',\n *                      '2': '{{person1}} and {{person2}} are viewing.',\n *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',\n *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n * </ng-pluralize>\n * </pre>\n *\n * Notice that we are still using two plural categories(one, other), but we added\n * three explicit number rules 0, 1 and 2.\n * When one person, perhaps John, views the document, \"John is viewing\" will be shown.\n * When three people view the document, no explicit number rule is found, so\n * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.\n * In this case, plural category 'one' is matched and \"John, Marry and one other person are viewing\"\n * is shown.\n *\n * Note that when you specify offsets, you must provide explicit number rules for\n * numbers from 0 up to and including the offset. If you use an offset of 3, for example,\n * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for\n * plural categories \"one\" and \"other\".\n *\n * @param {string|expression} count The variable to be bounded to.\n * @param {string} when The mapping between plural category to its corresponding strings.\n * @param {number=} offset Offset to deduct from the total number.\n *\n * @example\n    <doc:example>\n      <doc:source>\n        <script>\n          function Ctrl($scope) {\n            $scope.person1 = 'Igor';\n            $scope.person2 = 'Misko';\n            $scope.personCount = 1;\n          }\n        </script>\n        <div ng-controller=\"Ctrl\">\n          Person 1:<input type=\"text\" ng-model=\"person1\" value=\"Igor\" /><br/>\n          Person 2:<input type=\"text\" ng-model=\"person2\" value=\"Misko\" /><br/>\n          Number of People:<input type=\"text\" ng-model=\"personCount\" value=\"1\" /><br/>\n\n          <!--- Example with simple pluralization rules for en locale --->\n          Without Offset:\n          <ng-pluralize count=\"personCount\"\n                        when=\"{'0': 'Nobody is viewing.',\n                               'one': '1 person is viewing.',\n                               'other': '{} people are viewing.'}\">\n          </ng-pluralize><br>\n\n          <!--- Example with offset --->\n          With Offset(2):\n          <ng-pluralize count=\"personCount\" offset=2\n                        when=\"{'0': 'Nobody is viewing.',\n                               '1': '{{person1}} is viewing.',\n                               '2': '{{person1}} and {{person2}} are viewing.',\n                               'one': '{{person1}}, {{person2}} and one other person are viewing.',\n                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}\">\n          </ng-pluralize>\n        </div>\n      </doc:source>\n      <doc:scenario>\n        it('should show correct pluralized string', function() {\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                             toBe('1 person is viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                                                toBe('Igor is viewing.');\n\n          using('.doc-example-live').input('personCount').enter('0');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                               toBe('Nobody is viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                                              toBe('Nobody is viewing.');\n\n          using('.doc-example-live').input('personCount').enter('2');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('2 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor and Misko are viewing.');\n\n          using('.doc-example-live').input('personCount').enter('3');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('3 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor, Misko and one other person are viewing.');\n\n          using('.doc-example-live').input('personCount').enter('4');\n          expect(element('.doc-example-live ng-pluralize:first').text()).\n                                            toBe('4 people are viewing.');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n                              toBe('Igor, Misko and 2 other people are viewing.');\n        });\n\n        it('should show data-binded names', function() {\n          using('.doc-example-live').input('personCount').enter('4');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n              toBe('Igor, Misko and 2 other people are viewing.');\n\n          using('.doc-example-live').input('person1').enter('Di');\n          using('.doc-example-live').input('person2').enter('Vojta');\n          expect(element('.doc-example-live ng-pluralize:last').text()).\n              toBe('Di, Vojta and 2 other people are viewing.');\n        });\n      </doc:scenario>\n    </doc:example>\n */\nvar ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {\n  var BRACE = /{}/g;\n  return {\n    restrict: 'EA',\n    link: function(scope, element, attr) {\n      var numberExp = attr.count,\n          whenExp = element.attr(attr.$attr.when), // this is because we have {{}} in attrs\n          offset = attr.offset || 0,\n          whens = scope.$eval(whenExp),\n          whensExpFns = {},\n          startSymbol = $interpolate.startSymbol(),\n          endSymbol = $interpolate.endSymbol();\n\n      forEach(whens, function(expression, key) {\n        whensExpFns[key] =\n          $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' +\n            offset + endSymbol));\n      });\n\n      scope.$watch(function ngPluralizeWatch() {\n        var value = parseFloat(scope.$eval(numberExp));\n\n        if (!isNaN(value)) {\n          //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,\n          //check it against pluralization rules in $locale service\n          if (!(value in whens)) value = $locale.pluralCat(value - offset);\n           return whensExpFns[value](scope, element, true);\n        } else {\n          return '';\n        }\n      }, function ngPluralizeWatchAction(newVal) {\n        element.text(newVal);\n      });\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngRepeat\n *\n * @description\n * The `ngRepeat` directive instantiates a template once per item from a collection. Each template\n * instance gets its own scope, where the given loop variable is set to the current collection item,\n * and `$index` is set to the item index or key.\n *\n * Special properties are exposed on the local scope of each template instance, including:\n *\n *   * `$index` – `{number}` – iterator offset of the repeated element (0..length-1)\n *   * `$first` – `{boolean}` – true if the repeated element is first in the iterator.\n *   * `$middle` – `{boolean}` – true if the repeated element is between the first and last in the iterator.\n *   * `$last` – `{boolean}` – true if the repeated element is last in the iterator.\n *\n * Additionally, you can also provide animations via the ngAnimate attribute to animate the **enter**,\n * **leave** and **move** effects.\n *\n * @animations\n * enter - when a new item is added to the list or when an item is revealed after a filter\n * leave - when an item is removed from the list or when an item is filtered out\n * move - when an adjacent item is filtered out causing a reorder or when the item contents are reordered\n *\n * @element ANY\n * @scope\n * @priority 1000\n * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These\n *   formats are currently supported:\n *\n *   * `variable in expression` – where variable is the user defined loop variable and `expression`\n *     is a scope expression giving the collection to enumerate.\n *\n *     For example: `track in cd.tracks`.\n *\n *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,\n *     and `expression` is the scope expression giving the collection to enumerate.\n *\n *     For example: `(name, age) in {'adam':10, 'amalie':12}`.\n *\n *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function\n *     which can be used to associate the objects in the collection with the DOM elements. If no tractking function\n *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have\n *     more then one tractking function to  resolve to the same key. (This would mean that two distinct objects are\n *     mapped to the same DOM element, which is not possible.)\n *\n *     For example: `item in items` is equivalent to `item in items track by $id(item)'. This implies that the DOM elements\n *     will be associated by item identity in the array.\n *\n *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique\n *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements\n *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM\n *     element in the same way ian the DOM.\n *\n *     For example: `item in items track by item.id` Is a typical pattern when the items come from the database. In this\n *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`\n *     property is same.\n *\n * @example\n * This example initializes the scope to a list of names and\n * then uses `ngRepeat` to display every person:\n  <example animations=\"true\">\n    <file name=\"index.html\">\n      <div ng-init=\"friends = [\n        {name:'John', age:25, gender:'boy'},\n        {name:'Jessie', age:30, gender:'girl'},\n        {name:'Johanna', age:28, gender:'girl'},\n        {name:'Joy', age:15, gender:'girl'},\n        {name:'Mary', age:28, gender:'girl'},\n        {name:'Peter', age:95, gender:'boy'},\n        {name:'Sebastian', age:50, gender:'boy'},\n        {name:'Erika', age:27, gender:'girl'},\n        {name:'Patrick', age:40, gender:'boy'},\n        {name:'Samantha', age:60, gender:'girl'}\n      ]\">\n        I have {{friends.length}} friends. They are:\n        <input type=\"search\" ng-model=\"q\" placeholder=\"filter friends...\" />\n        <ul>\n          <li ng-repeat=\"friend in friends | filter:q\"\n              ng-animate=\"{enter: 'example-repeat-enter',\n                          leave: 'example-repeat-leave',\n                          move: 'example-repeat-move'}\">\n            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.\n          </li>\n        </ul>\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .example-repeat-enter,\n      .example-repeat-leave,\n      .example-repeat-move {\n        -webkit-transition:all linear 0.5s;\n        -moz-transition:all linear 0.5s;\n        -ms-transition:all linear 0.5s;\n        -o-transition:all linear 0.5s;\n        transition:all linear 0.5s;\n      }\n\n      .example-repeat-enter {\n        line-height:0;\n        opacity:0;\n      }\n      .example-repeat-enter.example-repeat-enter-active {\n        line-height:20px;\n        opacity:1;\n      }\n\n      .example-repeat-leave {\n        opacity:1;\n        line-height:20px;\n      }\n      .example-repeat-leave.example-repeat-leave-active {\n        opacity:0;\n        line-height:0;\n      }\n\n      .example-repeat-move { }\n      .example-repeat-move.example-repeat-move-active { }\n    </file>\n    <file name=\"scenario.js\">\n       it('should render initial data set', function() {\n         var r = using('.doc-example-live').repeater('ul li');\n         expect(r.count()).toBe(10);\n         expect(r.row(0)).toEqual([\"1\",\"John\",\"25\"]);\n         expect(r.row(1)).toEqual([\"2\",\"Jessie\",\"30\"]);\n         expect(r.row(9)).toEqual([\"10\",\"Samantha\",\"60\"]);\n         expect(binding('friends.length')).toBe(\"10\");\n       });\n\n       it('should update repeater when filter predicate changes', function() {\n         var r = using('.doc-example-live').repeater('ul li');\n         expect(r.count()).toBe(10);\n\n         input('q').enter('ma');\n\n         expect(r.count()).toBe(2);\n         expect(r.row(0)).toEqual([\"1\",\"Mary\",\"28\"]);\n         expect(r.row(1)).toEqual([\"2\",\"Samantha\",\"60\"]);\n       });\n      </file>\n    </example>\n */\nvar ngRepeatDirective = ['$parse', '$animator', function($parse, $animator) {\n  var NG_REMOVED = '$$NG_REMOVED';\n  return {\n    transclude: 'element',\n    priority: 1000,\n    terminal: true,\n    compile: function(element, attr, linker) {\n      return function($scope, $element, $attr){\n        var animate = $animator($scope, $attr);\n        var expression = $attr.ngRepeat;\n        var match = expression.match(/^\\s*(.+)\\s+in\\s+(.*?)\\s*(\\s+track\\s+by\\s+(.+)\\s*)?$/),\n          trackByExp, trackByExpGetter, trackByIdFn, lhs, rhs, valueIdentifier, keyIdentifier,\n          hashFnLocals = {$id: hashKey};\n\n        if (!match) {\n          throw Error(\"Expected ngRepeat in form of '_item_ in _collection_[ track by _id_]' but got '\" +\n            expression + \"'.\");\n        }\n\n        lhs = match[1];\n        rhs = match[2];\n        trackByExp = match[4];\n\n        if (trackByExp) {\n          trackByExpGetter = $parse(trackByExp);\n          trackByIdFn = function(key, value, index) {\n            // assign key, value, and $index to the locals so that they can be used in hash functions\n            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;\n            hashFnLocals[valueIdentifier] = value;\n            hashFnLocals.$index = index;\n            return trackByExpGetter($scope, hashFnLocals);\n          };\n        } else {\n          trackByIdFn = function(key, value) {\n            return hashKey(value);\n          }\n        }\n\n        match = lhs.match(/^(?:([\\$\\w]+)|\\(([\\$\\w]+)\\s*,\\s*([\\$\\w]+)\\))$/);\n        if (!match) {\n          throw Error(\"'item' in 'item in collection' should be identifier or (key, value) but got '\" +\n              lhs + \"'.\");\n        }\n        valueIdentifier = match[3] || match[1];\n        keyIdentifier = match[2];\n\n        // Store a list of elements from previous run. This is a hash where key is the item from the\n        // iterator, and the value is objects with following properties.\n        //   - scope: bound scope\n        //   - element: previous element.\n        //   - index: position\n        var lastBlockMap = {};\n\n        //watch props\n        $scope.$watchCollection(rhs, function ngRepeatAction(collection){\n          var index, length,\n              cursor = $element,     // current position of the node\n              nextCursor,\n              // Same as lastBlockMap but it has the current state. It will become the\n              // lastBlockMap on the next iteration.\n              nextBlockMap = {},\n              arrayLength,\n              childScope,\n              key, value, // key/value of iteration\n              trackById,\n              collectionKeys,\n              block,       // last object information {scope, element, id}\n              nextBlockOrder = [];\n\n\n          if (isArrayLike(collection)) {\n            collectionKeys = collection;\n          } else {\n            // if object, extract keys, sort them and use to determine order of iteration over obj props\n            collectionKeys = [];\n            for (key in collection) {\n              if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {\n                collectionKeys.push(key);\n              }\n            }\n            collectionKeys.sort();\n          }\n\n          arrayLength = collectionKeys.length;\n\n          // locate existing items\n          length = nextBlockOrder.length = collectionKeys.length;\n          for(index = 0; index < length; index++) {\n           key = (collection === collectionKeys) ? index : collectionKeys[index];\n           value = collection[key];\n           trackById = trackByIdFn(key, value, index);\n           if(lastBlockMap.hasOwnProperty(trackById)) {\n             block = lastBlockMap[trackById]\n             delete lastBlockMap[trackById];\n             nextBlockMap[trackById] = block;\n             nextBlockOrder[index] = block;\n           } else if (nextBlockMap.hasOwnProperty(trackById)) {\n             // restore lastBlockMap\n             forEach(nextBlockOrder, function(block) {\n               if (block && block.element) lastBlockMap[block.id] = block;\n             });\n             // This is a duplicate and we need to throw an error\n             throw new Error('Duplicates in a repeater are not allowed. Repeater: ' + expression +\n                 ' key: ' + trackById);\n           } else {\n             // new never before seen block\n             nextBlockOrder[index] = { id: trackById };\n             nextBlockMap[trackById] = false;\n           }\n         }\n\n          // remove existing items\n          for (key in lastBlockMap) {\n            if (lastBlockMap.hasOwnProperty(key)) {\n              block = lastBlockMap[key];\n              animate.leave(block.element);\n              block.element[0][NG_REMOVED] = true;\n              block.scope.$destroy();\n            }\n          }\n\n          // we are not using forEach for perf reasons (trying to avoid #call)\n          for (index = 0, length = collectionKeys.length; index < length; index++) {\n            key = (collection === collectionKeys) ? index : collectionKeys[index];\n            value = collection[key];\n            block = nextBlockOrder[index];\n\n            if (block.element) {\n              // if we have already seen this object, then we need to reuse the\n              // associated scope/element\n              childScope = block.scope;\n\n              nextCursor = cursor[0];\n              do {\n                nextCursor = nextCursor.nextSibling;\n              } while(nextCursor && nextCursor[NG_REMOVED]);\n\n              if (block.element[0] == nextCursor) {\n                // do nothing\n                cursor = block.element;\n              } else {\n                // existing item which got moved\n                animate.move(block.element, null, cursor);\n                cursor = block.element;\n              }\n            } else {\n              // new item which we don't know about\n              childScope = $scope.$new();\n            }\n\n            childScope[valueIdentifier] = value;\n            if (keyIdentifier) childScope[keyIdentifier] = key;\n            childScope.$index = index;\n            childScope.$first = (index === 0);\n            childScope.$last = (index === (arrayLength - 1));\n            childScope.$middle = !(childScope.$first || childScope.$last);\n\n            if (!block.element) {\n              linker(childScope, function(clone) {\n                animate.enter(clone, null, cursor);\n                cursor = clone;\n                block.scope = childScope;\n                block.element = clone;\n                nextBlockMap[block.id] = block;\n              });\n            }\n          }\n          lastBlockMap = nextBlockMap;\n        });\n      };\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngShow\n *\n * @description\n * The `ngShow` and `ngHide` directives show or hide a portion of the DOM tree (HTML)\n * conditionally based on **\"truthy\"** values evaluated within an {expression}. In other\n * words, if the expression assigned to **ngShow evaluates to a true value** then **the element is set to visible**\n * (via `display:block` in css) and **if false** then **the element is set to hidden** (so display:none).\n * With ngHide this is the reverse whereas true values cause the element itself to become\n * hidden.\n *\n * Additionally, you can also provide animations via the ngAnimate attribute to animate the **show**\n * and **hide** effects.\n *\n * @animations\n * show - happens after the ngShow expression evaluates to a truthy value and the contents are set to visible\n * hide - happens before the ngShow expression evaluates to a non truthy value and just before the contents are set to hidden\n *\n * @element ANY\n * @param {expression} ngShow If the {@link guide/expression expression} is truthy\n *     then the element is shown or hidden respectively.\n *\n * @example\n  <example animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n      <div>\n        Show:\n        <span class=\"check-element\"\n              ng-show=\"checked\"\n              ng-animate=\"{show: 'example-show', hide: 'example-hide'}\">\n          <span class=\"icon-thumbs-up\"></span> I show up when your checkbox is checked.\n        </span>\n      </div>\n      <div>\n        Hide:\n        <span class=\"check-element\"\n              ng-hide=\"checked\"\n              ng-animate=\"{show: 'example-show', hide: 'example-hide'}\">\n          <span class=\"icon-thumbs-down\"></span> I hide when your checkbox is checked.\n        </span>\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .example-show, .example-hide {\n        -webkit-transition:all linear 0.5s;\n        -moz-transition:all linear 0.5s;\n        -ms-transition:all linear 0.5s;\n        -o-transition:all linear 0.5s;\n        transition:all linear 0.5s;\n      }\n\n      .example-show {\n        line-height:0;\n        opacity:0;\n        padding:0 10px;\n      }\n      .example-show-active.example-show-active {\n        line-height:20px;\n        opacity:1;\n        padding:10px;\n        border:1px solid black;\n        background:white;\n      }\n\n      .example-hide {\n        line-height:20px;\n        opacity:1;\n        padding:10px;\n        border:1px solid black;\n        background:white;\n      }\n      .example-hide-active.example-hide-active {\n        line-height:0;\n        opacity:0;\n        padding:0 10px;\n      }\n\n      .check-element {\n        padding:10px;\n        border:1px solid black;\n        background:white;\n      }\n    </file>\n    <file name=\"scenario.js\">\n       it('should check ng-show / ng-hide', function() {\n         expect(element('.doc-example-live span:first:hidden').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:visible').count()).toEqual(1);\n\n         input('checked').check();\n\n         expect(element('.doc-example-live span:first:visible').count()).toEqual(1);\n         expect(element('.doc-example-live span:last:hidden').count()).toEqual(1);\n       });\n    </file>\n  </example>\n */\n//TODO(misko): refactor to remove element from the DOM\nvar ngShowDirective = ['$animator', function($animator) {\n  return function(scope, element, attr) {\n    var animate = $animator(scope, attr);\n    scope.$watch(attr.ngShow, function ngShowWatchAction(value){\n      animate[toBoolean(value) ? 'show' : 'hide'](element);\n    });\n  };\n}];\n\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngHide\n *\n * @description\n * The `ngShow` and `ngHide` directives show or hide a portion of the DOM tree (HTML)\n * conditionally based on **\"truthy\"** values evaluated within an {expression}. In other\n * words, if the expression assigned to **ngShow evaluates to a true value** then **the element is set to visible**\n * (via `display:block` in css) and **if false** then **the element is set to hidden** (so display:none).\n * With ngHide this is the reverse whereas true values cause the element itself to become\n * hidden.\n *\n * Additionally, you can also provide animations via the ngAnimate attribute to animate the **show**\n * and **hide** effects.\n *\n * @animations\n * show - happens after the ngHide expression evaluates to a non truthy value and the contents are set to visible\n * hide - happens after the ngHide expression evaluates to a truthy value and just before the contents are set to hidden\n *\n * @element ANY\n * @param {expression} ngHide If the {@link guide/expression expression} is truthy then\n *     the element is shown or hidden respectively.\n *\n * @example\n  <example animations=\"true\">\n    <file name=\"index.html\">\n      Click me: <input type=\"checkbox\" ng-model=\"checked\"><br/>\n      <div>\n        Show:\n        <span class=\"check-element\"\n              ng-show=\"checked\"\n              ng-animate=\"{show: 'example-show', hide: 'example-hide'}\">\n          <span class=\"icon-thumbs-up\"></span> I show up when your checkbox is checked.\n        </span>\n      </div>\n      <div>\n        Hide:\n        <span class=\"check-element\"\n              ng-hide=\"checked\"\n              ng-animate=\"{show: 'example-show', hide: 'example-hide'}\">\n          <span class=\"icon-thumbs-down\"></span> I hide when your checkbox is checked.\n        </span>\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .example-show, .example-hide {\n        -webkit-transition:all linear 0.5s;\n        -moz-transition:all linear 0.5s;\n        -ms-transition:all linear 0.5s;\n        -o-transition:all linear 0.5s;\n        transition:all linear 0.5s;\n      }\n\n      .example-show {\n        line-height:0;\n        opacity:0;\n        padding:0 10px;\n      }\n      .example-show.example-show-active {\n        line-height:20px;\n        opacity:1;\n        padding:10px;\n        border:1px solid black;\n        background:white;\n      }\n\n      .example-hide {\n        line-height:20px;\n        opacity:1;\n        padding:10px;\n        border:1px solid black;\n        background:white;\n      }\n      .example-hide.example-hide-active {\n        line-height:0;\n        opacity:0;\n        padding:0 10px;\n      }\n\n      .check-element {\n        padding:10px;\n        border:1px solid black;\n        background:white;\n      }\n    </file>\n    <file name=\"scenario.js\">\n       it('should check ng-show / ng-hide', function() {\n         expect(element('.doc-example-live .check-element:first:hidden').count()).toEqual(1);\n         expect(element('.doc-example-live .check-element:last:visible').count()).toEqual(1);\n\n         input('checked').check();\n\n         expect(element('.doc-example-live .check-element:first:visible').count()).toEqual(1);\n         expect(element('.doc-example-live .check-element:last:hidden').count()).toEqual(1);\n       });\n    </file>\n  </example>\n */\n//TODO(misko): refactor to remove element from the DOM\nvar ngHideDirective = ['$animator', function($animator) {\n  return function(scope, element, attr) {\n    var animate = $animator(scope, attr);\n    scope.$watch(attr.ngHide, function ngHideWatchAction(value){\n      animate[toBoolean(value) ? 'hide' : 'show'](element);\n    });\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngStyle\n *\n * @description\n * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.\n *\n * @element ANY\n * @param {expression} ngStyle {@link guide/expression Expression} which evals to an\n *      object whose keys are CSS style names and values are corresponding values for those CSS\n *      keys.\n *\n * @example\n   <example>\n     <file name=\"index.html\">\n        <input type=\"button\" value=\"set\" ng-click=\"myStyle={color:'red'}\">\n        <input type=\"button\" value=\"clear\" ng-click=\"myStyle={}\">\n        <br/>\n        <span ng-style=\"myStyle\">Sample Text</span>\n        <pre>myStyle={{myStyle}}</pre>\n     </file>\n     <file name=\"style.css\">\n       span {\n         color: black;\n       }\n     </file>\n     <file name=\"scenario.js\">\n       it('should check ng-style', function() {\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');\n         element('.doc-example-live :button[value=set]').click();\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(255, 0, 0)');\n         element('.doc-example-live :button[value=clear]').click();\n         expect(element('.doc-example-live span').css('color')).toBe('rgb(0, 0, 0)');\n       });\n     </file>\n   </example>\n */\nvar ngStyleDirective = ngDirective(function(scope, element, attr) {\n  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {\n    if (oldStyles && (newStyles !== oldStyles)) {\n      forEach(oldStyles, function(val, style) { element.css(style, '');});\n    }\n    if (newStyles) element.css(newStyles);\n  }, true);\n});\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngSwitch\n * @restrict EA\n *\n * @description\n * The ngSwitch directive is used to conditionally swap DOM structure on your template based on a scope expression.\n * Elements within ngSwitch but without ngSwitchWhen or ngSwitchDefault directives will be preserved at the location\n * as specified in the template.\n *\n * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it\n * from the template cache), ngSwitch simply choses one of the nested elements and makes it visible based on which element\n * matches the value obtained from the evaluated expression. In other words, you define a container element\n * (where you place the directive), place an expression on the **on=\"...\" attribute**\n * (or the **ng-switch=\"...\" attribute**), define any inner elements inside of the directive and place\n * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on\n * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default\n * attribute is displayed.\n *\n * Additionally, you can also provide animations via the ngAnimate attribute to animate the **enter**\n * and **leave** effects.\n *\n * @animations\n * enter - happens after the ngSwtich contents change and the matched child element is placed inside the container\n * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM\n *\n * @usage\n * <ANY ng-switch=\"expression\">\n *   <ANY ng-switch-when=\"matchValue1\">...</ANY>\n *   <ANY ng-switch-when=\"matchValue2\">...</ANY>\n *   <ANY ng-switch-default>...</ANY>\n * </ANY>\n *\n * @scope\n * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.\n * @paramDescription\n * On child elements add:\n *\n * * `ngSwitchWhen`: the case statement to match against. If match then this\n *   case will be displayed. If the same match appears multiple times, all the\n *   elements will be displayed.\n * * `ngSwitchDefault`: the default case when no other case match. If there\n *   are multiple default cases, all of them will be displayed when no other\n *   case match.\n *\n *\n * @example\n  <example animations=\"true\">\n    <file name=\"index.html\">\n      <div ng-controller=\"Ctrl\">\n        <select ng-model=\"selection\" ng-options=\"item for item in items\">\n        </select>\n        <tt>selection={{selection}}</tt>\n        <hr/>\n        <div\n          class=\"example-animate-container\"\n          ng-switch on=\"selection\"\n          ng-animate=\"{enter: 'example-enter', leave: 'example-leave'}\">\n            <div ng-switch-when=\"settings\">Settings Div</div>\n            <div ng-switch-when=\"home\">Home Span</div>\n            <div ng-switch-default>default</div>\n        </div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      function Ctrl($scope) {\n        $scope.items = ['settings', 'home', 'other'];\n        $scope.selection = $scope.items[0];\n      }\n    </file>\n    <file name=\"animations.css\">\n      .example-leave, .example-enter {\n        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -ms-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;\n\n        position:absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n      }\n\n      .example-animate-container > * {\n        display:block;\n        padding:10px;\n      }\n\n      .example-enter {\n        top:-50px;\n      }\n      .example-enter.example-enter-active {\n        top:0;\n      }\n\n      .example-leave {\n        top:0;\n      }\n      .example-leave.example-leave-active {\n        top:50px;\n      }\n    </file>\n    <file name=\"scenario.js\">\n      it('should start in settings', function() {\n        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Settings Div/);\n      });\n      it('should change to home', function() {\n        select('selection').option('home');\n        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/Home Span/);\n      });\n      it('should select default', function() {\n        select('selection').option('other');\n        expect(element('.doc-example-live [ng-switch]').text()).toMatch(/default/);\n      });\n    </file>\n  </example>\n */\nvar ngSwitchDirective = ['$animator', function($animator) {\n  return {\n    restrict: 'EA',\n    require: 'ngSwitch',\n\n    // asks for $scope to fool the BC controller module\n    controller: ['$scope', function ngSwitchController() {\n     this.cases = {};\n    }],\n    link: function(scope, element, attr, ngSwitchController) {\n      var animate = $animator(scope, attr);\n      var watchExpr = attr.ngSwitch || attr.on,\n          selectedTranscludes,\n          selectedElements,\n          selectedScopes = [];\n\n      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {\n        for (var i= 0, ii=selectedScopes.length; i<ii; i++) {\n          selectedScopes[i].$destroy();\n          animate.leave(selectedElements[i]);\n        }\n\n        selectedElements = [];\n        selectedScopes = [];\n\n        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {\n          scope.$eval(attr.change);\n          forEach(selectedTranscludes, function(selectedTransclude) {\n            var selectedScope = scope.$new();\n            selectedScopes.push(selectedScope);\n            selectedTransclude.transclude(selectedScope, function(caseElement) {\n              var anchor = selectedTransclude.element;\n\n              selectedElements.push(caseElement);\n              animate.enter(caseElement, anchor.parent(), anchor);\n            });\n          });\n        }\n      });\n    }\n  }\n}];\n\nvar ngSwitchWhenDirective = ngDirective({\n  transclude: 'element',\n  priority: 500,\n  require: '^ngSwitch',\n  compile: function(element, attrs, transclude) {\n    return function(scope, element, attr, ctrl) {\n      ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);\n      ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: transclude, element: element });\n    };\n  }\n});\n\nvar ngSwitchDefaultDirective = ngDirective({\n  transclude: 'element',\n  priority: 500,\n  require: '^ngSwitch',\n  compile: function(element, attrs, transclude) {\n    return function(scope, element, attr, ctrl) {\n      ctrl.cases['?'] = (ctrl.cases['?'] || []);\n      ctrl.cases['?'].push({ transclude: transclude, element: element });\n    };\n  }\n});\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngTransclude\n *\n * @description\n * Insert the transcluded DOM here.\n *\n * @element ANY\n *\n * @example\n   <doc:example module=\"transclude\">\n     <doc:source>\n       <script>\n         function Ctrl($scope) {\n           $scope.title = 'Lorem Ipsum';\n           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';\n         }\n\n         angular.module('transclude', [])\n          .directive('pane', function(){\n             return {\n               restrict: 'E',\n               transclude: true,\n               scope: 'isolate',\n               locals: { title:'bind' },\n               template: '<div style=\"border: 1px solid black;\">' +\n                           '<div style=\"background-color: gray\">{{title}}</div>' +\n                           '<div ng-transclude></div>' +\n                         '</div>'\n             };\n         });\n       </script>\n       <div ng-controller=\"Ctrl\">\n         <input ng-model=\"title\"><br>\n         <textarea ng-model=\"text\"></textarea> <br/>\n         <pane title=\"{{title}}\">{{text}}</pane>\n       </div>\n     </doc:source>\n     <doc:scenario>\n        it('should have transcluded', function() {\n          input('title').enter('TITLE');\n          input('text').enter('TEXT');\n          expect(binding('title')).toEqual('TITLE');\n          expect(binding('text')).toEqual('TEXT');\n        });\n     </doc:scenario>\n   </doc:example>\n *\n */\nvar ngTranscludeDirective = ngDirective({\n  controller: ['$transclude', '$element', function($transclude, $element) {\n    $transclude(function(clone) {\n      $element.append(clone);\n    });\n  }]\n});\n\n/**\n * @ngdoc directive\n * @name ng.directive:ngView\n * @restrict ECA\n *\n * @description\n * # Overview\n * `ngView` is a directive that complements the {@link ng.$route $route} service by\n * including the rendered template of the current route into the main layout (`index.html`) file.\n * Every time the current route changes, the included view changes with it according to the\n * configuration of the `$route` service.\n *\n * Additionally, you can also provide animations via the ngAnimate attribute to animate the **enter**\n * and **leave** effects.\n *\n * @animations\n * enter - happens just after the ngView contents are changed (when the new view DOM element is inserted into the DOM)\n * leave - happens just after the current ngView contents change and just before the former contents are removed from the DOM\n *\n * @scope\n * @example\n    <example module=\"ngView\" animations=\"true\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCntl as main\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div\n            ng-view\n            class=\"example-animate-container\"\n            ng-animate=\"{enter: 'example-enter', leave: 'example-leave'}\"></div>\n          <hr />\n\n          <pre>$location.path() = {{main.$location.path()}}</pre>\n          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n          <pre>$route.current.params = {{main.$route.current.params}}</pre>\n          <pre>$route.current.scope.name = {{main.$route.current.scope.name}}</pre>\n          <pre>$routeParams = {{main.$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        <div>\n          controller: {{book.name}}<br />\n          Book Id: {{book.params.bookId}}<br />\n        </div>\n      </file>\n\n      <file name=\"chapter.html\">\n        <div>\n          controller: {{chapter.name}}<br />\n          Book Id: {{chapter.params.bookId}}<br />\n          Chapter Id: {{chapter.params.chapterId}}\n        </div>\n      </file>\n\n      <file name=\"animations.css\">\n        .example-leave, .example-enter {\n          -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n          -moz-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n          -ms-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n          -o-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n        }\n\n        .example-animate-container {\n          position:relative;\n          height:100px;\n        }\n\n        .example-animate-container > * {\n          display:block;\n          width:100%;\n          border-left:1px solid black;\n\n          position:absolute;\n          top:0;\n          left:0;\n          right:0;\n          bottom:0;\n          padding:10px;\n        }\n\n        .example-enter {\n          left:100%;\n        }\n        .example-enter.example-enter-active {\n          left:0;\n        }\n\n        .example-leave { }\n        .example-leave.example-leave-active {\n          left:-100%;\n        }\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngView', [], function($routeProvider, $locationProvider) {\n          $routeProvider.when('/Book/:bookId', {\n            templateUrl: 'book.html',\n            controller: BookCntl,\n            controllerAs: 'book'\n          });\n          $routeProvider.when('/Book/:bookId/ch/:chapterId', {\n            templateUrl: 'chapter.html',\n            controller: ChapterCntl,\n            controllerAs: 'chapter'\n          });\n\n          // configure html5 to get links working on jsfiddle\n          $locationProvider.html5Mode(true);\n        });\n\n        function MainCntl($route, $routeParams, $location) {\n          this.$route = $route;\n          this.$location = $location;\n          this.$routeParams = $routeParams;\n        }\n\n        function BookCntl($routeParams) {\n          this.name = \"BookCntl\";\n          this.params = $routeParams;\n        }\n\n        function ChapterCntl($routeParams) {\n          this.name = \"ChapterCntl\";\n          this.params = $routeParams;\n        }\n      </file>\n\n      <file name=\"scenario.js\">\n        it('should load and compile correct template', function() {\n          element('a:contains(\"Moby: Ch1\")').click();\n          var content = element('.doc-example-live [ng-view]').text();\n          expect(content).toMatch(/controller\\: ChapterCntl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element('a:contains(\"Scarlet\")').click();\n          content = element('.doc-example-live [ng-view]').text();\n          expect(content).toMatch(/controller\\: BookCntl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n      </file>\n    </example>\n */\n\n\n/**\n * @ngdoc event\n * @name ng.directive:ngView#$viewContentLoaded\n * @eventOf ng.directive:ngView\n * @eventType emit on the current ngView scope\n * @description\n * Emitted every time the ngView content is reloaded.\n */\nvar ngViewDirective = ['$http', '$templateCache', '$route', '$anchorScroll', '$compile',\n                       '$controller', '$animator',\n               function($http,   $templateCache,   $route,   $anchorScroll,   $compile,\n                        $controller,  $animator) {\n  return {\n    restrict: 'ECA',\n    terminal: true,\n    link: function(scope, element, attr) {\n      var lastScope,\n          onloadExp = attr.onload || '',\n          animate = $animator(scope, attr);\n\n      scope.$on('$routeChangeSuccess', update);\n      update();\n\n\n      function destroyLastScope() {\n        if (lastScope) {\n          lastScope.$destroy();\n          lastScope = null;\n        }\n      }\n\n      function clearContent() {\n        animate.leave(element.contents(), element);\n        destroyLastScope();\n      }\n\n      function update() {\n        var locals = $route.current && $route.current.locals,\n            template = locals && locals.$template;\n\n        if (template) {\n          clearContent();\n          var enterElements = jqLite('<div></div>').html(template).contents();\n          animate.enter(enterElements, element);\n\n          var link = $compile(enterElements),\n              current = $route.current,\n              controller;\n\n          lastScope = current.scope = scope.$new();\n          if (current.controller) {\n            locals.$scope = lastScope;\n            controller = $controller(current.controller, locals);\n            if (current.controllerAs) {\n              lastScope[current.controllerAs] = controller;\n            }\n            element.children().data('$ngControllerController', controller);\n          }\n\n          link(lastScope);\n          lastScope.$emit('$viewContentLoaded');\n          lastScope.$eval(onloadExp);\n\n          // $anchorScroll might listen on event...\n          $anchorScroll();\n        } else {\n          clearContent();\n        }\n      }\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:script\n *\n * @description\n * Load content of a script tag, with type `text/ng-template`, into `$templateCache`, so that the\n * template can be used by `ngInclude`, `ngView` or directive templates.\n *\n * @restrict E\n * @param {'text/ng-template'} type must be set to `'text/ng-template'`\n *\n * @example\n  <doc:example>\n    <doc:source>\n      <script type=\"text/ng-template\" id=\"/tpl.html\">\n        Content of the template.\n      </script>\n\n      <a ng-click=\"currentTpl='/tpl.html'\" id=\"tpl-link\">Load inlined template</a>\n      <div id=\"tpl-content\" ng-include src=\"currentTpl\"></div>\n    </doc:source>\n    <doc:scenario>\n      it('should load template defined inside script tag', function() {\n        element('#tpl-link').click();\n        expect(element('#tpl-content').text()).toMatch(/Content of the template/);\n      });\n    </doc:scenario>\n  </doc:example>\n */\nvar scriptDirective = ['$templateCache', function($templateCache) {\n  return {\n    restrict: 'E',\n    terminal: true,\n    compile: function(element, attr) {\n      if (attr.type == 'text/ng-template') {\n        var templateUrl = attr.id,\n            // IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent\n            text = element[0].text;\n\n        $templateCache.put(templateUrl, text);\n      }\n    }\n  };\n}];\n\n/**\n * @ngdoc directive\n * @name ng.directive:select\n * @restrict E\n *\n * @description\n * HTML `SELECT` element with angular data-binding.\n *\n * # `ngOptions`\n *\n * Optionally `ngOptions` attribute can be used to dynamically generate a list of `<option>`\n * elements for a `<select>` element using an array or an object obtained by evaluating the\n * `ngOptions` expression.\n *˝˝\n * When an item in the select menu is select, the value of array element or object property\n * represented by the selected option will be bound to the model identified by the `ngModel`\n * directive of the parent select element.\n *\n * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can\n * be nested into the `<select>` element. This element will then represent `null` or \"not selected\"\n * option. See example below for demonstration.\n *\n * Note: `ngOptions` provides iterator facility for `<option>` element which should be used instead\n * of {@link ng.directive:ngRepeat ngRepeat} when you want the\n * `select` model to be bound to a non-string value. This is because an option element can currently\n * be bound to string values only.\n *\n * @param {string} ngModel Assignable angular expression to data-bind to.\n * @param {string=} name Property name of the form under which the control is published.\n * @param {string=} required The control is considered valid only if value is entered.\n * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to\n *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of\n *    `required` when you want to data-bind to the `required` attribute.\n * @param {comprehension_expression=} ngOptions in one of the following forms:\n *\n *   * for array data sources:\n *     * `label` **`for`** `value` **`in`** `array`\n *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`\n *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`\n *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`\n *   * for object data sources:\n *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`\n *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`\n *     * `select` **`as`** `label` **`group by`** `group`\n *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`\n *\n * Where:\n *\n *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.\n *   * `value`: local variable which will refer to each item in the `array` or each property value\n *      of `object` during iteration.\n *   * `key`: local variable which will refer to a property name in `object` during iteration.\n *   * `label`: The result of this expression will be the label for `<option>` element. The\n *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).\n *   * `select`: The result of this expression will be bound to the model of the parent `<select>`\n *      element. If not specified, `select` expression will default to `value`.\n *   * `group`: The result of this expression will be used to group options using the `<optgroup>`\n *      DOM element.\n *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be\n *      used to identify the objects in the array. The `trackexpr` will most likely refer to the\n *     `value` variable (e.g. `value.propertyName`).\n *\n * @example\n    <doc:example>\n      <doc:source>\n        <script>\n        function MyCntrl($scope) {\n          $scope.colors = [\n            {name:'black', shade:'dark'},\n            {name:'white', shade:'light'},\n            {name:'red', shade:'dark'},\n            {name:'blue', shade:'dark'},\n            {name:'yellow', shade:'light'}\n          ];\n          $scope.color = $scope.colors[2]; // red\n        }\n        </script>\n        <div ng-controller=\"MyCntrl\">\n          <ul>\n            <li ng-repeat=\"color in colors\">\n              Name: <input ng-model=\"color.name\">\n              [<a href ng-click=\"colors.splice($index, 1)\">X</a>]\n            </li>\n            <li>\n              [<a href ng-click=\"colors.push({})\">add</a>]\n            </li>\n          </ul>\n          <hr/>\n          Color (null not allowed):\n          <select ng-model=\"color\" ng-options=\"c.name for c in colors\"></select><br>\n\n          Color (null allowed):\n          <span  class=\"nullable\">\n            <select ng-model=\"color\" ng-options=\"c.name for c in colors\">\n              <option value=\"\">-- chose color --</option>\n            </select>\n          </span><br/>\n\n          Color grouped by shade:\n          <select ng-model=\"color\" ng-options=\"c.name group by c.shade for c in colors\">\n          </select><br/>\n\n\n          Select <a href ng-click=\"color={name:'not in list'}\">bogus</a>.<br>\n          <hr/>\n          Currently selected: {{ {selected_color:color}  }}\n          <div style=\"border:solid 1px black; height:20px\"\n               ng-style=\"{'background-color':color.name}\">\n          </div>\n        </div>\n      </doc:source>\n      <doc:scenario>\n         it('should check ng-options', function() {\n           expect(binding('{selected_color:color}')).toMatch('red');\n           select('color').option('0');\n           expect(binding('{selected_color:color}')).toMatch('black');\n           using('.nullable').select('color').option('');\n           expect(binding('{selected_color:color}')).toMatch('null');\n         });\n      </doc:scenario>\n    </doc:example>\n */\n\nvar ngOptionsDirective = valueFn({ terminal: true });\nvar selectDirective = ['$compile', '$parse', function($compile,   $parse) {\n                         //0000111110000000000022220000000000000000000000333300000000000000444444444444444440000000005555555555555555500000006666666666666666600000000000000007777000000000000000000088888\n  var NG_OPTIONS_REGEXP = /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w\\d]*)|(?:\\(\\s*([\\$\\w][\\$\\w\\d]*)\\s*,\\s*([\\$\\w][\\$\\w\\d]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/,\n      nullModelCtrl = {$setViewValue: noop};\n\n  return {\n    restrict: 'E',\n    require: ['select', '?ngModel'],\n    controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {\n      var self = this,\n          optionsMap = {},\n          ngModelCtrl = nullModelCtrl,\n          nullOption,\n          unknownOption;\n\n\n      self.databound = $attrs.ngModel;\n\n\n      self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {\n        ngModelCtrl = ngModelCtrl_;\n        nullOption = nullOption_;\n        unknownOption = unknownOption_;\n      }\n\n\n      self.addOption = function(value) {\n        optionsMap[value] = true;\n\n        if (ngModelCtrl.$viewValue == value) {\n          $element.val(value);\n          if (unknownOption.parent()) unknownOption.remove();\n        }\n      };\n\n\n      self.removeOption = function(value) {\n        if (this.hasOption(value)) {\n          delete optionsMap[value];\n          if (ngModelCtrl.$viewValue == value) {\n            this.renderUnknownOption(value);\n          }\n        }\n      };\n\n\n      self.renderUnknownOption = function(val) {\n        var unknownVal = '? ' + hashKey(val) + ' ?';\n        unknownOption.val(unknownVal);\n        $element.prepend(unknownOption);\n        $element.val(unknownVal);\n        unknownOption.prop('selected', true); // needed for IE\n      }\n\n\n      self.hasOption = function(value) {\n        return optionsMap.hasOwnProperty(value);\n      }\n\n      $scope.$on('$destroy', function() {\n        // disable unknown option so that we don't do work when the whole select is being destroyed\n        self.renderUnknownOption = noop;\n      });\n    }],\n\n    link: function(scope, element, attr, ctrls) {\n      // if ngModel is not defined, we don't need to do anything\n      if (!ctrls[1]) return;\n\n      var selectCtrl = ctrls[0],\n          ngModelCtrl = ctrls[1],\n          multiple = attr.multiple,\n          optionsExp = attr.ngOptions,\n          nullOption = false, // if false, user will not be able to select it (used by ngOptions)\n          emptyOption,\n          // we can't just jqLite('<option>') since jqLite is not smart enough\n          // to create it in <select> and IE barfs otherwise.\n          optionTemplate = jqLite(document.createElement('option')),\n          optGroupTemplate =jqLite(document.createElement('optgroup')),\n          unknownOption = optionTemplate.clone();\n\n      // find \"null\" option\n      for(var i = 0, children = element.children(), ii = children.length; i < ii; i++) {\n        if (children[i].value == '') {\n          emptyOption = nullOption = children.eq(i);\n          break;\n        }\n      }\n\n      selectCtrl.init(ngModelCtrl, nullOption, unknownOption);\n\n      // required validator\n      if (multiple && (attr.required || attr.ngRequired)) {\n        var requiredValidator = function(value) {\n          ngModelCtrl.$setValidity('required', !attr.required || (value && value.length));\n          return value;\n        };\n\n        ngModelCtrl.$parsers.push(requiredValidator);\n        ngModelCtrl.$formatters.unshift(requiredValidator);\n\n        attr.$observe('required', function() {\n          requiredValidator(ngModelCtrl.$viewValue);\n        });\n      }\n\n      if (optionsExp) Options(scope, element, ngModelCtrl);\n      else if (multiple) Multiple(scope, element, ngModelCtrl);\n      else Single(scope, element, ngModelCtrl, selectCtrl);\n\n\n      ////////////////////////////\n\n\n\n      function Single(scope, selectElement, ngModelCtrl, selectCtrl) {\n        ngModelCtrl.$render = function() {\n          var viewValue = ngModelCtrl.$viewValue;\n\n          if (selectCtrl.hasOption(viewValue)) {\n            if (unknownOption.parent()) unknownOption.remove();\n            selectElement.val(viewValue);\n            if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy\n          } else {\n            if (isUndefined(viewValue) && emptyOption) {\n              selectElement.val('');\n            } else {\n              selectCtrl.renderUnknownOption(viewValue);\n            }\n          }\n        };\n\n        selectElement.bind('change', function() {\n          scope.$apply(function() {\n            if (unknownOption.parent()) unknownOption.remove();\n            ngModelCtrl.$setViewValue(selectElement.val());\n          });\n        });\n      }\n\n      function Multiple(scope, selectElement, ctrl) {\n        var lastView;\n        ctrl.$render = function() {\n          var items = new HashMap(ctrl.$viewValue);\n          forEach(selectElement.find('option'), function(option) {\n            option.selected = isDefined(items.get(option.value));\n          });\n        };\n\n        // we have to do it on each watch since ngModel watches reference, but\n        // we need to work of an array, so we need to see if anything was inserted/removed\n        scope.$watch(function selectMultipleWatch() {\n          if (!equals(lastView, ctrl.$viewValue)) {\n            lastView = copy(ctrl.$viewValue);\n            ctrl.$render();\n          }\n        });\n\n        selectElement.bind('change', function() {\n          scope.$apply(function() {\n            var array = [];\n            forEach(selectElement.find('option'), function(option) {\n              if (option.selected) {\n                array.push(option.value);\n              }\n            });\n            ctrl.$setViewValue(array);\n          });\n        });\n      }\n\n      function Options(scope, selectElement, ctrl) {\n        var match;\n\n        if (! (match = optionsExp.match(NG_OPTIONS_REGEXP))) {\n          throw Error(\n            \"Expected ngOptions in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_ (track by _expr_)?'\" +\n            \" but got '\" + optionsExp + \"'.\");\n        }\n\n        var displayFn = $parse(match[2] || match[1]),\n            valueName = match[4] || match[6],\n            keyName = match[5],\n            groupByFn = $parse(match[3] || ''),\n            valueFn = $parse(match[2] ? match[1] : valueName),\n            valuesFn = $parse(match[7]),\n            track = match[8],\n            trackFn = track ? $parse(match[8]) : null,\n            // This is an array of array of existing option groups in DOM. We try to reuse these if possible\n            // optionGroupsCache[0] is the options with no option group\n            // optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element\n            optionGroupsCache = [[{element: selectElement, label:''}]];\n\n        if (nullOption) {\n          // compile the element since there might be bindings in it\n          $compile(nullOption)(scope);\n\n          // remove the class, which is added automatically because we recompile the element and it\n          // becomes the compilation root\n          nullOption.removeClass('ng-scope');\n\n          // we need to remove it before calling selectElement.html('') because otherwise IE will\n          // remove the label from the element. wtf?\n          nullOption.remove();\n        }\n\n        // clear contents, we'll add what's needed based on the model\n        selectElement.html('');\n\n        selectElement.bind('change', function() {\n          scope.$apply(function() {\n            var optionGroup,\n                collection = valuesFn(scope) || [],\n                locals = {},\n                key, value, optionElement, index, groupIndex, length, groupLength;\n\n            if (multiple) {\n              value = [];\n              for (groupIndex = 0, groupLength = optionGroupsCache.length;\n                   groupIndex < groupLength;\n                   groupIndex++) {\n                // list of options for that group. (first item has the parent)\n                optionGroup = optionGroupsCache[groupIndex];\n\n                for(index = 1, length = optionGroup.length; index < length; index++) {\n                  if ((optionElement = optionGroup[index].element)[0].selected) {\n                    key = optionElement.val();\n                    if (keyName) locals[keyName] = key;\n                    if (trackFn) {\n                      for (var trackIndex = 0; trackIndex < collection.length; trackIndex++) {\n                        locals[valueName] = collection[trackIndex];\n                        if (trackFn(scope, locals) == key) break;\n                      } \n                    } else {\n                      locals[valueName] = collection[key];\n                    }\n                    value.push(valueFn(scope, locals));\n                  }\n                }\n              }\n            } else {\n              key = selectElement.val();\n              if (key == '?') {\n                value = undefined;\n              } else if (key == ''){\n                value = null;\n              } else {\n                if (trackFn) {\n                  for (var trackIndex = 0; trackIndex < collection.length; trackIndex++) {\n                    locals[valueName] = collection[trackIndex];\n                    if (trackFn(scope, locals) == key) {\n                      value = valueFn(scope, locals);\n                      break;\n                    }\n                  }\n                } else {\n                  locals[valueName] = collection[key];\n                  if (keyName) locals[keyName] = key;\n                  value = valueFn(scope, locals);\n                }\n              }\n            }\n            ctrl.$setViewValue(value);\n          });\n        });\n\n        ctrl.$render = render;\n\n        // TODO(vojta): can't we optimize this ?\n        scope.$watch(render);\n\n        function render() {\n          var optionGroups = {'':[]}, // Temporary location for the option groups before we render them\n              optionGroupNames = [''],\n              optionGroupName,\n              optionGroup,\n              option,\n              existingParent, existingOptions, existingOption,\n              modelValue = ctrl.$modelValue,\n              values = valuesFn(scope) || [],\n              keys = keyName ? sortedKeys(values) : values,\n              groupLength, length,\n              groupIndex, index,\n              locals = {},\n              selected,\n              selectedSet = false, // nothing is selected yet\n              lastElement,\n              element,\n              label;\n\n          if (multiple) {\n            if (trackFn && isArray(modelValue)) {\n              selectedSet = new HashMap([]);\n              for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {\n                locals[valueName] = modelValue[trackIndex];\n                selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);\n              }\n            } else {\n              selectedSet = new HashMap(modelValue);\n            }\n          }\n\n          // We now build up the list of options we need (we merge later)\n          for (index = 0; length = keys.length, index < length; index++) {\n               locals[valueName] = values[keyName ? locals[keyName]=keys[index]:index];\n               optionGroupName = groupByFn(scope, locals) || '';\n            if (!(optionGroup = optionGroups[optionGroupName])) {\n              optionGroup = optionGroups[optionGroupName] = [];\n              optionGroupNames.push(optionGroupName);\n            }\n            if (multiple) {\n              selected = selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals)) != undefined;\n            } else {\n              if (trackFn) {\n                var modelCast = {};\n                modelCast[valueName] = modelValue;\n                selected = trackFn(scope, modelCast) === trackFn(scope, locals);\n              } else {\n                selected = modelValue === valueFn(scope, locals);\n              }\n              selectedSet = selectedSet || selected; // see if at least one item is selected\n            }\n            label = displayFn(scope, locals); // what will be seen by the user\n            label = label === undefined ? '' : label; // doing displayFn(scope, locals) || '' overwrites zero values\n            optionGroup.push({\n              id: trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index),   // either the index into array or key from object\n              label: label,\n              selected: selected                   // determine if we should be selected\n            });\n          }\n          if (!multiple) {\n            if (nullOption || modelValue === null) {\n              // insert null option if we have a placeholder, or the model is null\n              optionGroups[''].unshift({id:'', label:'', selected:!selectedSet});\n            } else if (!selectedSet) {\n              // option could not be found, we have to insert the undefined item\n              optionGroups[''].unshift({id:'?', label:'', selected:true});\n            }\n          }\n\n          // Now we need to update the list of DOM nodes to match the optionGroups we computed above\n          for (groupIndex = 0, groupLength = optionGroupNames.length;\n               groupIndex < groupLength;\n               groupIndex++) {\n            // current option group name or '' if no group\n            optionGroupName = optionGroupNames[groupIndex];\n\n            // list of options for that group. (first item has the parent)\n            optionGroup = optionGroups[optionGroupName];\n\n            if (optionGroupsCache.length <= groupIndex) {\n              // we need to grow the optionGroups\n              existingParent = {\n                element: optGroupTemplate.clone().attr('label', optionGroupName),\n                label: optionGroup.label\n              };\n              existingOptions = [existingParent];\n              optionGroupsCache.push(existingOptions);\n              selectElement.append(existingParent.element);\n            } else {\n              existingOptions = optionGroupsCache[groupIndex];\n              existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element\n\n              // update the OPTGROUP label if not the same.\n              if (existingParent.label != optionGroupName) {\n                existingParent.element.attr('label', existingParent.label = optionGroupName);\n              }\n            }\n\n            lastElement = null;  // start at the beginning\n            for(index = 0, length = optionGroup.length; index < length; index++) {\n              option = optionGroup[index];\n              if ((existingOption = existingOptions[index+1])) {\n                // reuse elements\n                lastElement = existingOption.element;\n                if (existingOption.label !== option.label) {\n                  lastElement.text(existingOption.label = option.label);\n                }\n                if (existingOption.id !== option.id) {\n                  lastElement.val(existingOption.id = option.id);\n                }\n                // lastElement.prop('selected') provided by jQuery has side-effects\n                if (lastElement[0].selected !== option.selected) {\n                  lastElement.prop('selected', (existingOption.selected = option.selected));\n                }\n              } else {\n                // grow elements\n\n                // if it's a null option\n                if (option.id === '' && nullOption) {\n                  // put back the pre-compiled element\n                  element = nullOption;\n                } else {\n                  // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but\n                  // in this version of jQuery on some browser the .text() returns a string\n                  // rather then the element.\n                  (element = optionTemplate.clone())\n                      .val(option.id)\n                      .attr('selected', option.selected)\n                      .text(option.label);\n                }\n\n                existingOptions.push(existingOption = {\n                    element: element,\n                    label: option.label,\n                    id: option.id,\n                    selected: option.selected\n                });\n                if (lastElement) {\n                  lastElement.after(element);\n                } else {\n                  existingParent.element.append(element);\n                }\n                lastElement = element;\n              }\n            }\n            // remove any excessive OPTIONs in a group\n            index++; // increment since the existingOptions[0] is parent element not OPTION\n            while(existingOptions.length > index) {\n              existingOptions.pop().element.remove();\n            }\n          }\n          // remove any excessive OPTGROUPs from select\n          while(optionGroupsCache.length > groupIndex) {\n            optionGroupsCache.pop()[0].element.remove();\n          }\n        }\n      }\n    }\n  }\n}];\n\nvar optionDirective = ['$interpolate', function($interpolate) {\n  var nullSelectCtrl = {\n    addOption: noop,\n    removeOption: noop\n  };\n\n  return {\n    restrict: 'E',\n    priority: 100,\n    compile: function(element, attr) {\n      if (isUndefined(attr.value)) {\n        var interpolateFn = $interpolate(element.text(), true);\n        if (!interpolateFn) {\n          attr.$set('value', element.text());\n        }\n      }\n\n      return function (scope, element, attr) {\n        var selectCtrlName = '$selectController',\n            parent = element.parent(),\n            selectCtrl = parent.data(selectCtrlName) ||\n              parent.parent().data(selectCtrlName); // in case we are in optgroup\n\n        if (selectCtrl && selectCtrl.databound) {\n          // For some reason Opera defaults to true and if not overridden this messes up the repeater.\n          // We don't want the view to drive the initialization of the model anyway.\n          element.prop('selected', false);\n        } else {\n          selectCtrl = nullSelectCtrl;\n        }\n\n        if (interpolateFn) {\n          scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {\n            attr.$set('value', newVal);\n            if (newVal !== oldVal) selectCtrl.removeOption(oldVal);\n            selectCtrl.addOption(newVal);\n          });\n        } else {\n          selectCtrl.addOption(attr.value);\n        }\n\n        element.bind('$destroy', function() {\n          selectCtrl.removeOption(attr.value);\n        });\n      };\n    }\n  }\n}];\n\nvar styleDirective = valueFn({\n  restrict: 'E',\n  terminal: true\n});\n\n  //try to bind to jquery now so that one can write angular.element().read()\n  //but we will rebind on bootstrap again.\n  bindJQuery();\n\n  publishExternalAPI(angular);\n\n  jqLite(document).ready(function() {\n    angularInit(document, bootstrap);\n  });\n\n})(window, document);\nangular.element(document).find('head').append('<style type=\"text/css\">@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak{display:none;}ng\\\\:form{display:block;}</style>');\ndefine(\"angular\", [\"jquery\"], (function (global) {\n    return function () {\n        var ret, fn;\n        return ret || global.angular;\n    };\n}(this)));\n",
    "\neval(\"\\ndefine(\\'js/controllers/AdminController.js\\',[\\n    \\'angular\\'\\n],  function(\\n    angular\\n    ) {\\n    \\\"use strict\\\";\\n\\n    var AdminController = function ($scope){\\n        $scope.test = \\'AdminController\\';\\n    };\\n\\n    AdminController.$inject = [\\n        \\'$scope\\'\\n    ];\\n\\n    return AdminController;\\n});\\n\\n//# sourceURL=/js/controllers/AdminController.js\");\n",
    "\neval(\"\\ndefine(\\'js/controllers/GameResultsController.js\\',[\\n    \\'angular\\'\\n],  function(\\n    angular\\n    ) {\\n    \\\"use strict\\\";\\n\\n    var GameResultsController = function ($scope){\\n        $scope.test = \\'GameResultsController\\';\\n    };\\n\\n    GameResultsController.$inject = [\\n        \\'$scope\\'\\n    ];\\n\\n    return GameResultsController;\\n});\\n\\n//# sourceURL=/js/controllers/GameResultsController.js\");\n",
    "\neval(\"\\ndefine(\\'js/controllers/RecordGameController.js\\',[\\n    \\'angular\\'\\n],  function(\\n    angular\\n    ) {\\n    \\\"use strict\\\";\\n\\n    var RecordGameController = function ($scope){\\n        $scope.test = \\'RecordGameController\\';\\n    };\\n\\n    RecordGameController.$inject = [\\n        \\'$scope\\'\\n    ];\\n\\n    return RecordGameController;\\n});\\n\\n//# sourceURL=/js/controllers/RecordGameController.js\");\n",
    "\neval(\"define(\\'js/controllers/controllers\\',[\\n    \\'angular\\',\\n    \\'js/controllers/AdminController.js\\',\\n    \\'js/controllers/GameResultsController.js\\',\\n    \\'js/controllers/RecordGameController.js\\'\\n], function(\\n    angular,\\n    AdminController,\\n    GameResultsController,\\n    RecordGameController\\n    ) {\\n\\n    \\\"use strict\\\";\\n\\n    var controllers = angular.module(\\'controllers\\', []);\\n    controllers.controller(\\'AdminController\\', AdminController);\\n    controllers.controller(\\'GameResultsController\\', GameResultsController);\\n    controllers.controller(\\'RecordGameController\\', RecordGameController);\\n\\n    return controllers;\\n});\\n\\n//# sourceURL=/js/controllers/controllers.js\");\n",
    "\neval(\"define(\\'js/filters/filters\\',[\\n    \\'angular\\'\\n], function(\\n    angular\\n    ){\\n    \\\"use strict\\\";\\n    var filters = angular.module(\\'filters\\', []);\\n\\n    return filters;\\n});\\n\\n//# sourceURL=/js/filters/filters.js\");\n",
    "\neval(\"\\ndefine(\\'js/services/services\\',[\\n    \\'angular\\'\\n\\n], function(\\n    angular\\n    ){\\n    \\'use strict\\';\\n    var services = angular.module(\\'services\\', []);\\n\\n    return services;\\n});\\n\\n//# sourceURL=/js/services/services.js\");\n",
    "\neval(\"\\\"use_strict\\\";\\n\\ndefine(\\'js/directives/directives\\',[\\n    \\'angular\\'\\n], function(\\n    angular\\n\\n){\\n    \\\"use strict\\\";\\n    var directives = angular.module(\\'directives\\', []);\\n\\n    return directives;\\n});\\n\\n//# sourceURL=/js/directives/directives.js\");\n",
    "\neval(\"define(\\'js/app\\',[\\n    \\'angular\\',\\n    \\'js/controllers/controllers\\',\\n    \\'js/filters/filters\\',\\n    \\'js/services/services\\',\\n    \\'js/directives/directives\\'\\n], function(angular){\\n        \\'use strict\\';\\n\\n        var app =  angular.module(\\'FieldPromotion\\', [\\'controllers\\', \\'services\\', \\'filters\\', \\'directives\\']);\\n\\n        app.config([\\'$routeProvider\\', \\'$locationProvider\\', \\'resourcePath\\', function($routeProvider, $locationProvider, resourcePath){\\n            $locationProvider.html5Mode(true);\\n            $routeProvider.\\n                when(\\'/\\', {templateUrl: resourcePath + \\'templates/record_game.html\\', controller: \\'RecordGameController\\'}).\\n                when(\\'/admin\\', {templateUrl: resourcePath + \\'templates/admin.html\\', controller: \\'AdminController\\'}).\\n                when(\\'/record\\', {templateUrl: resourcePath + \\'templates/record_game.html\\', controller: \\'RecordGameController\\'}).\\n                when(\\'/view\\', {templateUrl: resourcePath + \\'templates/view_game.html\\', controller: \\'GameResultsController\\'});\\n        }]);\\n\\n        return app;\\n    }\\n);\\n\\n//# sourceURL=/js/app.js\");\n",
    "\nrequirejs.config({\n    baseUrl:'./',\n    paths:{\n        angular: 'js/lib/angular-1.1.5',\n        'angular-resource': 'js/lib/angular-resource-1.1.5',\n        text: \"js/lib/text\",\n        jquery: \"js/lib/jquery-1.9.1\",\n        lodash: \"js/lib/lodash\",\n    },\n\n    shim: {\n        angular: {\n            deps: ['jquery'],\n            exports: 'angular'\n        },\n        'angular-resource': {\n            deps: ['angular'],\n            exports: 'angularResource'\n        },\n        jquery: {\n            exports: '$'\n        },\n        lodash: {\n            exports: '_'\n        }\n    }\n});\n\nif(typeof(console) === 'undefined'){\n    console = {};\n}\n\n/**\n * The entry point into our stuff.\n */\nrequirejs(['angular', 'js/app'], function(domReady, angular, app){\n    \"use strict\";\n    angular.bootstrap(document, ['FieldPromotion']);\n});\n\ndefine(\"main\", function(){});\n"
  ]
}